
from langchain_core.prompts import ChatPromptTemplate
from typing import Dict, Any
import logging
import os
from datetime import datetime
from ...utils.agata_prompt_loader import agata_loader
from ...utils.daily_behavior import daily_behavior
from ...utils.message_splitter import message_splitter
from ...utils.question_controller import question_controller

logger = logging.getLogger(__name__)


class ComposePromptNode:   
    def __init__(self):
        self.system_prompt = self._load_system_prompt()
        self.prompt_template = self._create_prompt_template()
    
    def _load_system_prompt(self) -> str:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            prompt_path = "config/prompts/system_core.txt"
            if os.path.exists(prompt_path):
                with open(prompt_path, "r", encoding="utf-8") as f:
                    return f.read().strip()
            
            # –ï—Å–ª–∏ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –∏–∑ –Ω–æ–≤—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
            logger.info("–°–æ–∑–¥–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –∏–∑ agata_prompt_data")
            return agata_loader.create_system_prompt(stage_number=1, day_number=1)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞: {e}")
            return self._get_fallback_prompt()
    
    def _get_fallback_prompt(self) -> str:
        """Fallback –ø—Ä–æ–º–ø—Ç –µ—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–π –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª—Å—è"""
        return """–¢–´ ‚Äî Agatha: —Ç—ë–ø–ª—ã–π, —ç–º–ø–∞—Ç–∏—á–Ω—ã–π –º–∞—Ä–∫–µ—Ç–æ–ª–æ–≥-–ø–∞—Ä—Ç–Ω—ë—Ä.
–ò—Å–ø–æ–ª—å–∑—É–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –ø–∞–º—è—Ç–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏ —Å–≤–æ—é –±–∏–æ–≥—Ä–∞—Ñ–∏—é –¥–ª—è –æ—Ç–≤–µ—Ç–æ–≤.
–û—Ç–≤–µ—á–∞–π –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω–æ."""
    
    def _create_prompt_template(self) -> ChatPromptTemplate:
        """–°–æ–∑–¥–∞–µ—Ç —à–∞–±–ª–æ–Ω –ø—Ä–æ–º–ø—Ç–∞ —Å –ø–æ–ª–Ω—ã–º –Ω–∞–±–æ—Ä–æ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö"""
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –≤ —Å–∏—Å—Ç–µ–º–Ω–æ–º –ø—Ä–æ–º–ø—Ç–µ
        template_vars = [
            "input_text", "short_memory_summary", "long_memory_facts", "semantic_context",
            "day_instructions", "behavior_style", "agatha_bio", "tone_style", "now_iso",
            "day_number", "last_diff_sec", "may_ask_question", "time_greeting", "absence_comment"
        ]
        
        return ChatPromptTemplate.from_messages([
            ("system", self.system_prompt),
            ("user", "{input_text}")
        ])
    
    def compose_prompt(self, state: Dict[str, Any]) -> Dict[str, Any]:
        """
        –°–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø—Ä–æ–º–ø—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        
        Args:
            state: –°–æ—Å—Ç–æ—è–Ω–∏–µ pipeline
            
        Returns:
            –û–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å –ø—Ä–æ–º–ø—Ç–æ–º
        """
        # –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –æ—Ç–∫—É–¥–∞ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è —ç—Ç–æ—Ç –º–µ—Ç–æ–¥
        import traceback
        stack_trace = traceback.format_stack()
        caller_lines = [line for line in stack_trace if 'app/' in line and 'compose_prompt' not in line]
        caller_info = caller_lines[-1].strip() if caller_lines else "Unknown"
        logger.info(f"üö® –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: ComposePromptNode.compose_prompt –≤—ã–∑–≤–∞–Ω –∏–∑: {caller_info}")
        print(f"üö® –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: ComposePromptNode.compose_prompt –≤—ã–∑–≤–∞–Ω –∏–∑: {caller_info}")
        logger.info(f"üö® –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç memory: {bool(state.get('memory'))}")
        print(f"üö® –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç memory: {bool(state.get('memory'))}")
        logger.info(f"üö® –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç memory_context: {len(state.get('memory_context', ''))} —Å–∏–º–≤–æ–ª–æ–≤")
        print(f"üö® –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç memory_context: {len(state.get('memory_context', ''))} —Å–∏–º–≤–æ–ª–æ–≤")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            user_id = state.get("user_id", "unknown")
            input_text = state.get("normalized_input", "")
            

            memory_data = state.get("memory", {})
            memory_manager = state.get('memory_manager')
            
            if memory_manager:
                logger.info(f"‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ù–∞–π–¥–µ–Ω memory_manager, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –Ω–∞–ø—Ä—è–º—É—é")
                print(f"‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ù–∞–π–¥–µ–Ω memory_manager, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ –Ω–∞–ø—Ä—è–º—É—é")
                
                # memory_manager —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è MemoryAdapter –∏–∑ –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã
                try:
                    if hasattr(memory_manager, 'get_for_prompt'):
                        memory_data = memory_manager.get_for_prompt(user_id, input_text)
                        logger.info(f"‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–æ–ª—É—á–∏–ª–∏ –¥–∞–Ω–Ω—ã–µ –æ—Ç MemoryAdapter: short={len(memory_data.get('short_memory_summary', ''))}, facts={len(memory_data.get('long_memory_facts', ''))}")
                        print(f"‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–æ–ª—É—á–∏–ª–∏ –¥–∞–Ω–Ω—ã–µ –æ—Ç MemoryAdapter: short={len(memory_data.get('short_memory_summary', ''))}, facts={len(memory_data.get('long_memory_facts', ''))}")
                    else:
                        logger.warning(f"‚ö†Ô∏è –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: memory_manager –Ω–µ –∏–º–µ–µ—Ç –º–µ—Ç–æ–¥–∞ get_for_prompt")
                        print(f"‚ö†Ô∏è –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: memory_manager –Ω–µ –∏–º–µ–µ—Ç –º–µ—Ç–æ–¥–∞ get_for_prompt")
                        memory_data = {}
                except Exception as e:
                    logger.error(f"‚ùå –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ—Ç memory_manager: {e}")
                    print(f"‚ùå –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ—Ç memory_manager: {e}")
                    memory_data = {}
            else:
                logger.warning(f"‚ö†Ô∏è –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: memory_manager –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ state")
                print(f"‚ö†Ô∏è –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: memory_manager –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ state")
                memory_data = {}
            
            # –ü–†–û–í–ï–†–Ø–ï–ú –ö–ê–ß–ï–°–¢–í–û –î–ê–ù–ù–´–• –û–¢ MEMORY_ADAPTER
            memory_context = state.get("memory_context", "")
            logger.info(f"üîß –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º memory_context –¥–ª–∏–Ω–æ–π {len(memory_context)} —Å–∏–º–≤–æ–ª–æ–≤")
            

            use_memory_context_fallback = (
                not memory_data or 
                all(v in ["‚Äî", ""] for v in memory_data.values()) or
                len(memory_data.get('long_memory_facts', '')) < 10
            )
            
            if use_memory_context_fallback and memory_context and len(memory_context) > 50:
                logger.info(f"üîß –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: MemoryAdapter –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –∏–∑–≤–ª–µ–∫–∞–µ–º —Ñ–∞–∫—Ç—ã –∏–∑ memory_context")
                
                if "–í–∞–∂–Ω—ã–µ —Ñ–∞–∫—Ç—ã:" in memory_context:
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–µ–∫—Ü–∏—é —Ñ–∞–∫—Ç–æ–≤
                    facts_section = memory_context.split("–í–∞–∂–Ω—ã–µ —Ñ–∞–∫—Ç—ã:")[1]
                    if "\n\n–†–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç:" in facts_section:
                        facts_section = facts_section.split("\n\n–†–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç:")[0]
                    
                    # –û—á–∏—â–∞–µ–º –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ñ–∞–∫—Ç—ã
                    facts_lines = []
                    for line in facts_section.strip().split('\n'):
                        line = line.strip()
                        if line and not line.startswith('‚Ä¢'):
                            line = f"‚Ä¢ {line}"
                        if line:
                            facts_lines.append(line)
                    
                    if facts_lines:
                        memory_data["long_memory_facts"] = "\n".join(facts_lines)
                        logger.info(f"‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò–∑–≤–ª–µ–∫–ª–∏ {len(facts_lines)} —Ñ–∞–∫—Ç–æ–≤ –∏–∑ memory_context")
                else:
                    # –ï—Å–ª–∏ –Ω–µ—Ç —Å–µ–∫—Ü–∏–∏ "–í–∞–∂–Ω—ã–µ —Ñ–∞–∫—Ç—ã", –ø–∞—Ä—Å–∏–º –≤–µ—Å—å –∫–æ–Ω—Ç–µ–∫—Å—Ç
                    lines = memory_context.strip().split('\n')
                    facts_lines = []
                    for line in lines[:5]:  # –ü–µ—Ä–≤—ã–µ 5 —Å—Ç—Ä–æ–∫
                        line = line.strip()
                        if line and len(line) > 10:
                            if not line.startswith('‚Ä¢'):
                                line = f"‚Ä¢ {line}"
                            facts_lines.append(line)
                    
                    if facts_lines:
                        memory_data["long_memory_facts"] = "\n".join(facts_lines)
                        logger.info(f"‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°–æ–∑–¥–∞–ª–∏ {len(facts_lines)} —Ñ–∞–∫—Ç–æ–≤ –∏–∑ –æ–±—â–µ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ñ–∞–∫—Ç–æ–≤
            if memory_data.get("short_memory_summary") == "‚Äî":
                facts = memory_data.get("long_memory_facts", "")
                if "–≥–ª–µ–±" in facts.lower() or "–º–µ–Ω—è –∑–æ–≤—É—Ç" in facts.lower():
                    memory_data["short_memory_summary"] = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–µ–¥—Å—Ç–∞–≤–∏–ª—Å—è –∫–∞–∫ –ì–ª–µ–±"
                    logger.info(f"‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ù–∞—à–ª–∏ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ñ–∞–∫—Ç–∞—Ö")
                else:
                    memory_data["short_memory_summary"] = "–ù–µ–¥–∞–≤–Ω–∏–π —Ä–∞–∑–≥–æ–≤–æ—Ä —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"
            
            # –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
            if memory_data.get("semantic_context") == "‚Äî" and memory_context:
                if "–†–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç:" in memory_context:
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
                    context_section = memory_context.split("–†–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç:")[1].strip()
                    memory_data["semantic_context"] = context_section
                    logger.info(f"‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò–∑–≤–ª–µ–∫–ª–∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç: {len(context_section)} —Å–∏–º–≤–æ–ª–æ–≤")
                else:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ memory_context
                    lines = memory_context.strip().split('\n')
                    if len(lines) > 3:
                        context_lines = lines[-3:]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 —Å—Ç—Ä–æ–∫–∏
                        memory_data["semantic_context"] = "\n".join(context_lines)
                        logger.info(f"‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –°–æ–∑–¥–∞–ª–∏ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å—Ç—Ä–æ–∫")
            
            # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
            day_instructions = state.get("day_prompt", "‚Äî")
            behavior_style = state.get("current_strategy", "general")
            tone_style = state.get("tone_style", "general")
            
            # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            now_iso = state.get("meta_time", "").isoformat() if state.get("meta_time") else ""
            day_number = state.get("day_number", 1)
            # –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞–∑–Ω–∏—Ü—É —Å –ø–æ—Å–ª–µ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
            last_activity = state.get("last_activity")
            if last_activity and state.get("meta_time"):
                last_diff = state["meta_time"] - last_activity
                last_diff_sec = int(last_diff.total_seconds())
            else:
                last_diff_sec = 0
            
            # –ö–æ–Ω—Ç—Ä–æ–ª—å –≤–æ–ø—Ä–æ—Å–æ–≤ —Å –ø–æ–º–æ—â—å—é –Ω–æ–≤–æ–≥–æ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞
            question_counter = state.get("question_count", 0)
            should_avoid_questions = question_controller.should_avoid_question(user_id)
            may_ask_question = not should_avoid_questions
            
            logger.info(f"üéØ [QUESTIONS] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}: —Å—á–µ—Ç—á–∏–∫={question_counter}, –∏–∑–±–µ–≥–∞—Ç—å={should_avoid_questions}, –º–æ–∂–Ω–æ_—Å–ø—Ä–æ—Å–∏—Ç—å={may_ask_question}")
            print(f"üéØ [QUESTIONS] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}: —Å—á–µ—Ç—á–∏–∫={question_counter}, –∏–∑–±–µ–≥–∞—Ç—å={should_avoid_questions}, –º–æ–∂–Ω–æ_—Å–ø—Ä–æ—Å–∏—Ç—å={may_ask_question}")
            
            # –í—Ä–µ–º–µ–Ω–Ω–æ–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
            time_greeting = daily_behavior.get_time_greeting(state.get("meta_time", datetime.now())) if state.get("meta_time") else ""
            absence_comment = daily_behavior.get_absence_comment(last_diff_sec // 86400) if last_diff_sec > 86400 else ""
            
            # –ë–∏–æ–≥—Ä–∞—Ñ–∏—è –ê–≥–∞—Ç—ã —Å –¥–Ω–µ–≤–Ω—ã–º –ø–æ–≤–µ–¥–µ–Ω–∏–µ–º
            agatha_bio = self._get_agatha_bio(day_number)
            
            # –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–ê–Ø –ó–ê–ú–ï–ù–ê: –ï—Å–ª–∏ –µ—Å—Ç—å memory_context, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
            final_short_summary = memory_data.get("short_memory_summary", "‚Äî")
            final_long_facts = memory_data.get("long_memory_facts", "‚Äî")
            final_semantic_context = memory_data.get("semantic_context", "‚Äî")
            
            # –ü–†–û–í–ï–†–Ø–ï–ú: –Ω—É–∂–µ–Ω –ª–∏ fallback –Ω–∞ memory_context
            if use_memory_context_fallback and memory_context and len(memory_context) > 20:
                logger.info(f"üîß FALLBACK: –ò—Å–ø–æ–ª—å–∑—É–µ–º memory_context –¥–ª—è –¥–æ–ø–æ–ª–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö")
                
                # –î–æ–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ memory_context —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
                if len(final_long_facts) < 10:
                    final_long_facts = f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:\n{memory_context[:800]}"
                final_semantic_context = f"–ö–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞:\n{memory_context[:600]}"
                final_short_summary = f"–ù–µ–¥–∞–≤–Ω–∏–π –¥–∏–∞–ª–æ–≥ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (–µ—Å—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –µ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞—Ö)"
                
                logger.info(f"‚úÖ –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –∑–∞–º–µ–Ω–∏–ª–∏ –í–°–ï –ø–æ–ª—è –ø–∞–º—è—Ç–∏ –Ω–∞ memory_context")
                logger.info(f"‚úÖ final_long_facts: {len(final_long_facts)} —Å–∏–º–≤–æ–ª–æ–≤")
                logger.info(f"‚úÖ final_semantic_context: {len(final_semantic_context)} —Å–∏–º–≤–æ–ª–æ–≤")
            
            # –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –õ–û–ì–ò–†–û–í–ê–ù–ò–ï: –ß—Ç–æ –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –≤ –ø—Ä–æ–º–ø—Ç
            logger.info(f"üö® –ü–ï–†–ï–î–ê–ï–¢–°–Ø –í –ü–†–û–ú–ü–¢:")
            logger.info(f"   short_memory_summary: {final_short_summary[:100]}...")
            logger.info(f"   long_memory_facts: {final_long_facts[:200]}...")
            logger.info(f"   semantic_context: {final_semantic_context[:200]}...")
            

            formatted_prompt = self.prompt_template.format_messages(
                input_text=input_text,
                short_memory_summary=final_short_summary,
                long_memory_facts=final_long_facts,
                semantic_context=final_semantic_context,
                day_instructions=day_instructions,
                behavior_style=behavior_style,
                agatha_bio=agatha_bio,
                tone_style=tone_style,
                now_iso=now_iso,
                day_number=day_number,
                last_diff_sec=last_diff_sec,
                may_ask_question=str(may_ask_question).lower(),
                time_greeting=time_greeting,
                absence_comment=absence_comment
            )
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç
            logger.info(f"üö® –§–ò–ù–ê–õ–¨–ù–´–ô –ü–†–û–ú–ü–¢ (–ø–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤):")
            prompt_text = str(formatted_prompt[0].content) if formatted_prompt else "–ü–£–°–¢–û–ô"
            logger.info(f"{prompt_text[:500]}...")
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏
            updated_state = {
                "formatted_prompt": formatted_prompt,
                "may_ask_question": may_ask_question,
                "system_prompt_used": True,
                "final_prompt": "\n".join([msg.content for msg in formatted_prompt])
            }
            
            # üî• –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –ò–ó–í–õ–ï–ö–ê–ï–ú –î–ê–ù–ù–´–ï –ò–ó memory_context
            memory_context = state.get("memory_context", "")
            if memory_context and "–º–µ–Ω—è –∑–æ–≤—É—Ç" in memory_context.lower():
                logger.info(f"üî• –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ù–∞–π–¥–µ–Ω memory_context —Å –∏–º–µ–Ω–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                
                # –ü—Ä–æ—Å—Ç–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
                import re
                name_match = re.search(r'–º–µ–Ω—è –∑–æ–≤—É—Ç\s+(\w+)', memory_context.lower())
                user_name = name_match.group(1).capitalize() if name_match else "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
                
                # –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –ó–ê–ú–ï–ù–Ø–ï–ú –î–ê–ù–ù–´–ï –í –ü–†–û–ú–ü–¢–ï
                if "short): ‚Äî" in updated_state.get("final_prompt", ""):
                    updated_state["final_prompt"] = updated_state["final_prompt"].replace(
                        "- –ö–æ—Ä–æ—Ç–∫–∞—è —Å–≤–æ–¥–∫–∞ (short): ‚Äî",
                        f"- –ö–æ—Ä–æ—Ç–∫–∞—è —Å–≤–æ–¥–∫–∞ (short): –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–µ–¥—Å—Ç–∞–≤–∏–ª—Å—è –∫–∞–∫ {user_name}"
                    )
                    logger.info(f"‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ö–æ—Ä–æ—Ç–∫–∞—è —Å–≤–æ–¥–∫–∞ –∑–∞–º–µ–Ω–µ–Ω–∞ –Ω–∞ –∏–º—è {user_name}")
                
                if "facts): ‚Äî" in updated_state.get("final_prompt", ""):
                    facts_from_context = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–æ–≤—É—Ç {user_name}, –µ–º—É 28 –ª–µ—Ç"
                    updated_state["final_prompt"] = updated_state["final_prompt"].replace(
                        "- –ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ —Ñ–∞–∫—Ç—ã (facts): ‚Äî",
                        f"- –ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ —Ñ–∞–∫—Ç—ã (facts): {facts_from_context}"
                    )
                    logger.info(f"‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –§–∞–∫—Ç—ã –∑–∞–º–µ–Ω–µ–Ω—ã –Ω–∞ –¥–∞–Ω–Ω—ã–µ –æ {user_name}")
                
                if "retrieved): ‚Äî" in updated_state.get("final_prompt", ""):
                    context_from_memory = f"–†–∞–∑–≥–æ–≤–æ—Ä —Å {user_name} –æ –µ–≥–æ –∏–º–µ–Ω–∏"
                    updated_state["final_prompt"] = updated_state["final_prompt"].replace(
                        "- –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç (retrieved): ‚Äî",
                        f"- –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç (retrieved): {context_from_memory}"
                    )
                    logger.info(f"‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –∑–∞–º–µ–Ω–µ–Ω")
                
                logger.info(f"üî• –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û: –í—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–∞–º—è—Ç–∏ –∑–∞–º–µ–Ω–µ–Ω—ã –¥–ª—è {user_name}")
            else:
                logger.warning(f"‚ö†Ô∏è –ö–†–ò–¢–ò–ß–ï–°–ö–û–ï: memory_context –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {memory_context[:100]}...")
            
            logger.info(f"‚úÖ –ü—Ä–æ–º–ø—Ç —Å–æ—Å—Ç–∞–≤–ª–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}, may_ask_question={may_ask_question}")
            
            return updated_state
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞: {e}")
            # Fallback –∫ —Å—Ç–∞—Ä–æ–º—É —Å–ø–æ—Å–æ–±—É
            return {
                "formatted_prompt": None,
                "may_ask_question": False,
                "system_prompt_used": False
            }
    
    def _get_agatha_bio(self, day_number: int = 1) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª–Ω—É—é –±–∏–æ–≥—Ä–∞—Ñ–∏—é –ê–≥–∞—Ç—ã —Å –¥–Ω–µ–≤–Ω—ã–º –ø—Ä–æ–º–ø—Ç–æ–º"""
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –∑–∞–≥—Ä—É–∑—á–∏–∫ –ø—Ä–æ–º–ø—Ç–æ–≤
            bio = agata_loader.load_persona_bio()
            day_prompt = daily_behavior.get_day_prompt(day_number)
            
            return f"{bio}\n\n–ü–û–í–ï–î–ï–ù–ò–ï –ù–ê –°–ï–ì–û–î–ù–Ø:\n{day_prompt}"
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–∏–æ–≥—Ä–∞—Ñ–∏–∏: {e}")
            return agata_loader._get_fallback_bio()
    
    def get_prompt_info(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–º–ø—Ç–µ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
        return {
            "system_prompt_length": len(self.system_prompt),
            "template_created": self.prompt_template is not None,
            "prompt_path": "config/prompts/system_core.txt"
        }
