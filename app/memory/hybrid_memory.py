"""
Hybrid Memory Adapter - –æ–±—ä–µ–¥–∏–Ω—è–µ—Ç –∫—Ä–∞—Ç–∫–æ–≤—Ä–µ–º–µ–Ω–Ω—É—é –∏ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—É—é –ø–∞–º—è—Ç—å
"""
import asyncio
from datetime import datetime, timedelta
from typing import List, Dict, Any, Optional
from .base import MemoryAdapter, Message, MemoryContext
from .buffer_memory import BufferMemory
from .vector_memory import VectorMemory

class HybridMemory(MemoryAdapter):
    """
    –ì–∏–±—Ä–∏–¥–Ω–∞—è –ø–∞–º—è—Ç—å, –æ–±—ä–µ–¥–∏–Ω—è—é—â–∞—è:
    - BufferMemory: –¥–ª—è –∫—Ä–∞—Ç–∫–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–∞–º—è—Ç–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10-20 —Å–æ–æ–±—â–µ–Ω–∏–π)
    - VectorMemory: –¥–ª—è –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–π –ø–∞–º—è—Ç–∏ —Å —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–º –ø–æ–∏—Å–∫–æ–º
    """
    
    def __init__(self, user_id: str, short_memory_size: int = 15, long_memory_size: int = 1000):
        self.user_id = user_id
        self.short_memory = BufferMemory(user_id, max_messages=short_memory_size)
        self.long_memory = VectorMemory(user_id, max_memories=long_memory_size)
        
        # –°—á–µ—Ç—á–∏–∫–∏ –¥–ª—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
        self.total_messages = 0
        self.conversation_start = datetime.utcnow()
        
    async def add_message(self, message: Message, context: MemoryContext) -> None:
        """–î–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ–±–µ —Å–∏—Å—Ç–µ–º—ã –ø–∞–º—è—Ç–∏"""
        self.total_messages += 1
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫—Ä–∞—Ç–∫–æ–≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–º—è—Ç—å (–≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è)
        await self.short_memory.add_message(message, context)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—É—é –ø–∞–º—è—Ç—å (—Ç–æ–ª—å–∫–æ –≤–∞–∂–Ω—ã–µ)
        await self.long_memory.add_message(message, context)
    
    async def get_context(self, context: MemoryContext, query: str = "") -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –æ–±–µ–∏—Ö —Å–∏—Å—Ç–µ–º –ø–∞–º—è—Ç–∏"""
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –∫—Ä–∞—Ç–∫–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–∞–º—è—Ç–∏
        short_context = await self.short_memory.get_context(context)
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–π –ø–∞–º—è—Ç–∏
        long_context = await self.long_memory.get_context(context, query)
        
        # –°–æ–∑–¥–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ–±—â–µ–Ω–∏—è
        days_communicating = (datetime.utcnow() - self.conversation_start).days + 1
        communication_stats = f"–î–µ–Ω—å –æ–±—â–µ–Ω–∏—è: {context.day_number} | –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {self.total_messages}"
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç—ã
        context_parts = [communication_stats]
        
        if long_context and long_context != "–≠—Ç–æ –Ω–∞—à–µ –ø–µ—Ä–≤–æ–µ –æ–±—â–µ–Ω–∏–µ.":
            context_parts.append(f"–î–æ–ª–≥–æ—Å—Ä–æ—á–Ω–∞—è –ø–∞–º—è—Ç—å: {long_context}")
        
        if short_context:
            context_parts.append(f"–ù–µ–¥–∞–≤–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {short_context}")
        
        return " | ".join(context_parts)
    
    async def get_user_profile(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å –∏–∑ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–π –ø–∞–º—è—Ç–∏
        profile = await self.long_memory.get_user_profile()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—Ä–∞—Ç–∫–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–∞–º—è—Ç–∏
        recent_messages = self.short_memory.messages
        
        if recent_messages:
            # –ê–Ω–∞–ª–∏–∑ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            recent_content = [msg.content for msg in recent_messages[-5:] if msg.role == 'user']
            recent_text = ' '.join(recent_content).lower()
            
            # –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –≤ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
            current_mood = await self._analyze_recent_mood(recent_text)
            
            # –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –æ–±—â–µ–Ω–∏—è
            activity_level = await self._calculate_activity_level()
            
            profile.update({
                'recent_mood': current_mood,
                'activity_level': activity_level,
                'last_message_time': recent_messages[-1].timestamp.isoformat() if recent_messages else None,
                'session_length': len(recent_messages),
                'days_since_start': (datetime.utcnow() - self.conversation_start).days + 1
            })
        
        return profile
    
    async def _analyze_recent_mood(self, recent_text: str) -> str:
        """–ê–Ω–∞–ª–∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è –ø–æ –ø–æ—Å–ª–µ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏—è–º"""
        mood_indicators = {
            'positive': ['—Ö–æ—Ä–æ—à–æ', '–æ—Ç–ª–∏—á–Ω–æ', '–ø—Ä–µ–∫—Ä–∞—Å–Ω–æ', '—Ä–∞–¥–æ—Å—Ç—å', '—Å—á–∞—Å—Ç–ª–∏–≤', '–≤–µ—Å–µ–ª–æ', ':)', 'üòä'],
            'negative': ['–ø–ª–æ—Ö–æ', '—É–∂–∞—Å–Ω–æ', '–≥—Ä—É—Å—Ç–Ω–æ', '—Ä–∞—Å—Å—Ç—Ä–æ–µ–Ω', '–ø—Ä–æ–±–ª–µ–º–∞', ':(', 'üò¢'],
            'neutral': ['–Ω–æ—Ä–º–∞–ª—å–Ω–æ', '–æ–±—ã—á–Ω–æ', '—Ç–∞–∫ —Å–µ–±–µ', '–Ω–µ –∑–Ω–∞—é'],
            'excited': ['—Å—É–ø–µ—Ä', '–∫–ª–∞—Å—Å–Ω–æ', '–ø–æ—Ç—Ä—è—Å–∞—é—â–µ', '–æ–≥–æ', '–≤–∞—É', '!!!!'],
            'tired': ['—É—Å—Ç–∞–ª', '—É—Ç–æ–º–ª–µ–Ω', '–Ω–µ—Ç —Å–∏–ª', '—Å–æ–Ω–Ω—ã–π'],
            'stressed': ['—Å—Ç—Ä–µ—Å—Å', '–ø–µ—Ä–µ–∂–∏–≤–∞—é', '–≤–æ–ª–Ω—É—é—Å—å', '–±–µ—Å–ø–æ–∫–æ—é—Å—å', '–Ω–µ—Ä–≤–Ω–∏—á–∞—é']
        }
        
        mood_scores = {}
        for mood, indicators in mood_indicators.items():
            score = sum(1 for indicator in indicators if indicator in recent_text)
            if score > 0:
                mood_scores[mood] = score
        
        if not mood_scores:
            return 'neutral'
        
        return max(mood_scores, key=mood_scores.get)
    
    async def _calculate_activity_level(self) -> str:
        """–í—ã—á–∏—Å–ª–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if self.total_messages < 5:
            return 'new'
        elif self.total_messages < 20:
            return 'moderate'
        elif self.total_messages < 50:
            return 'active'
        else:
            return 'very_active'
    
    async def get_conversation_insights(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Å–∞–π—Ç—ã –æ —Ä–∞–∑–≤–∏—Ç–∏–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞"""
        profile = await self.get_user_profile()
        
        insights = {
            'relationship_stage': await self._determine_relationship_stage(),
            'communication_patterns': await self._analyze_communication_patterns(),
            'suggested_topics': await self._suggest_topics(),
            'emotional_journey': await self._track_emotional_journey(),
            'personalization_level': await self._calculate_personalization_level()
        }
        
        return insights
    
    async def _determine_relationship_stage(self) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å—Ç–∞–¥–∏—é –æ—Ç–Ω–æ—à–µ–Ω–∏–π —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"""
        profile = await self.long_memory.get_user_profile()
        
        if not profile:
            return 'introduction'
        
        personal_info = profile.get('personal_info', {})
        total_messages = profile.get('total_messages', 0)
        communication_days = profile.get('communication_days', 1)
        
        if total_messages < 5:
            return 'introduction'
        elif not personal_info.get('has_name', False) and total_messages < 10:
            return 'getting_acquainted'
        elif personal_info.get('has_name', False) and total_messages < 30:
            return 'building_trust'
        elif personal_info.get('has_profession', False) and communication_days > 3:
            return 'close_friend'
        else:
            return 'confidant'
    
    async def _analyze_communication_patterns(self) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –æ–±—â–µ–Ω–∏—è"""
        recent_messages = self.short_memory.messages
        
        if len(recent_messages) < 3:
            return {'pattern': 'insufficient_data'}
        
        # –ê–Ω–∞–ª–∏–∑ –¥–ª–∏–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏–π
        user_messages = [msg for msg in recent_messages if msg.role == 'user']
        avg_length = sum(len(msg.content) for msg in user_messages) / len(user_messages) if user_messages else 0
        
        # –ê–Ω–∞–ª–∏–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤
        questions_count = sum(1 for msg in user_messages if '?' in msg.content)
        question_ratio = questions_count / len(user_messages) if user_messages else 0
        
        # –ê–Ω–∞–ª–∏–∑ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
        emotional_indicators = ['!', 'üòä', 'üò¢', 'üò°', '–æ—á–µ–Ω—å', '—Å–∏–ª—å–Ω–æ']
        emotional_messages = sum(1 for msg in user_messages 
                               if any(indicator in msg.content for indicator in emotional_indicators))
        emotional_ratio = emotional_messages / len(user_messages) if user_messages else 0
        
        return {
            'message_length': 'long' if avg_length > 100 else 'short' if avg_length < 30 else 'medium',
            'question_frequency': 'high' if question_ratio > 0.5 else 'low' if question_ratio < 0.2 else 'medium',
            'emotional_expression': 'high' if emotional_ratio > 0.6 else 'low' if emotional_ratio < 0.3 else 'medium',
            'communication_style': await self._determine_communication_style(avg_length, question_ratio, emotional_ratio)
        }
    
    async def _determine_communication_style(self, avg_length: float, question_ratio: float, emotional_ratio: float) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if avg_length > 100 and emotional_ratio > 0.5:
            return 'expressive_storyteller'
        elif question_ratio > 0.6:
            return 'curious_questioner'
        elif avg_length < 30 and question_ratio < 0.2:
            return 'laconic_responder'
        elif emotional_ratio > 0.7:
            return 'emotional_sharer'
        else:
            return 'balanced_conversationalist'
    
    async def _suggest_topics(self) -> List[str]:
        """–ü—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Ç–µ–º—ã –¥–ª—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        profile = await self.long_memory.get_user_profile()
        
        if not profile or not profile.get('favorite_topics'):
            return ['—Ö–æ–±–±–∏', '–ø–ª–∞–Ω—ã', '–Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ']
        
        favorite_topics = [topic[0] for topic in profile['favorite_topics']]
        
        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–º–µ–∂–Ω—ã–µ —Ç–µ–º—ã
        related_topics = {
            '—Ä–∞–±–æ—Ç–∞': ['–∫–∞—Ä—å–µ—Ä–∞', '–∫–æ–ª–ª–µ–≥–∏', '–ø—Ä–æ–µ–∫—Ç—ã'],
            '—Å–µ–º—å—è': ['–¥–µ—Ç—Å—Ç–≤–æ', '—Ç—Ä–∞–¥–∏—Ü–∏–∏', '–ø—Ä–∞–∑–¥–Ω–∏–∫–∏'],
            '–æ—Ç–Ω–æ—à–µ–Ω–∏—è': ['–¥—Ä—É–∂–±–∞', '–ª—é–±–æ–≤—å', '–æ–±—â–µ–Ω–∏–µ'],
            '—Ö–æ–±–±–∏': ['—Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ', '—Å–ø–æ—Ä—Ç', '–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è'],
            '–∑–¥–æ—Ä–æ–≤—å–µ': ['—Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ', '—Å–ø–æ—Ä—Ç', '–ø–∏—Ç–∞–Ω–∏–µ'],
            '–ø–ª–∞–Ω—ã': ['–º–µ—á—Ç—ã', '—Ü–µ–ª–∏', '–±—É–¥—É—â–µ–µ']
        }
        
        suggestions = []
        for topic in favorite_topics:
            suggestions.extend(related_topics.get(topic, []))
        
        return list(set(suggestions))[:5]
    
    async def _track_emotional_journey(self) -> List[Dict[str, Any]]:
        """–û—Ç—Å–ª–µ–¥–∏—Ç—å —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        long_term_memories = self.long_memory.memories
        
        if not long_term_memories:
            return []
        
        emotional_timeline = []
        for memory in sorted(long_term_memories, key=lambda x: x['timestamp']):
            emotions = memory.get('emotions', [])
            if emotions and emotions[0] != '–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ':
                emotional_timeline.append({
                    'day': memory['day_number'],
                    'emotion': emotions[0],
                    'context': memory['content'][:50] + '...',
                    'importance': memory['importance_score']
                })
        
        return emotional_timeline[-10:]  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤
    
    async def _calculate_personalization_level(self) -> float:
        """–í—ã—á–∏—Å–ª–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ (0.0 - 1.0)"""
        profile = await self.long_memory.get_user_profile()
        
        if not profile:
            return 0.0
        
        score = 0.0
        
        # –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        personal_info = profile.get('personal_info', {})
        if personal_info.get('has_name'):
            score += 0.3
        if personal_info.get('has_profession'):
            score += 0.2
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—â–µ–Ω–∏—è
        total_messages = profile.get('total_messages', 0)
        if total_messages > 10:
            score += 0.2
        if total_messages > 50:
            score += 0.1
        
        # –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è —Å–≤—è–∑—å
        emotional_profile = profile.get('emotional_profile', {})
        if len(emotional_profile) > 3:
            score += 0.1
        
        # –õ—é–±–∏–º—ã–µ —Ç–µ–º—ã
        favorite_topics = profile.get('favorite_topics', [])
        if len(favorite_topics) > 2:
            score += 0.1
        
        return min(score, 1.0)
    
    async def search_memory(self, query: str, limit: int = 5) -> List[Dict[str, Any]]:
        """–ü–æ–∏—Å–∫ –≤ –ø–∞–º—è—Ç–∏ - –¥–µ–ª–µ–≥–∏—Ä—É–µ–º –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–π –ø–∞–º—è—Ç–∏"""
        return await self.long_memory.search_memory(query, limit)
    
    async def summarize_conversation(self, messages: List[Message]) -> str:
        """–°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ - –¥–µ–ª–µ–≥–∏—Ä—É–µ–º –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–π –ø–∞–º—è—Ç–∏"""
        return await self.long_memory.summarize_conversation(messages)
    
    async def clear_memory(self) -> None:
        """–û—á–∏—Å—Ç–∏—Ç—å –≤—Å—é –ø–∞–º—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        await self.short_memory.clear_memory()
        await self.long_memory.clear_memory()
        self.total_messages = 0
        self.conversation_start = datetime.utcnow() 