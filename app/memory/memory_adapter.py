"""
Memory Adapter - –∞–¥–∞–ø—Ç–µ—Ä –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–∞–º—è—Ç–∏ –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞
"""
from typing import Dict, Optional, List
from datetime import datetime
import logging

logger = logging.getLogger(__name__)


class MemoryAdapter:
    """–ê–¥–∞–ø—Ç–µ—Ä –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ø–∞–º—è—Ç–∏ –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞"""
    
    def __init__(self, memory_manager):
        self.memory_manager = memory_manager
    
    def get_for_prompt(self, user_id: str, query: str) -> Dict[str, str]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–∞–º—è—Ç–∏ –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            query: —Ç–µ–∫—É—â–∏–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞
        """
        try:
            logger.info(f"üöÄ [ADAPTER] –°–¢–ê–†–¢ get_for_prompt –¥–ª—è {user_id}, –∑–∞–ø—Ä–æ—Å: {query[:50]}...")
            print(f"üöÄ [ADAPTER] –°–¢–ê–†–¢ get_for_prompt –¥–ª—è {user_id}, –∑–∞–ø—Ä–æ—Å: {query[:50]}...")
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ—Ä–æ—Ç–∫—É—é —Å–≤–æ–¥–∫—É
            short_summary = self._get_short_memory_summary(user_id)
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–µ —Ñ–∞–∫—Ç—ã
            long_facts = self._get_long_memory_facts(user_id)
            
            # –ü–æ–ª—É—á–∞–µ–º —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
            semantic_context = self._get_semantic_context(user_id, query)
            
            result = {
                "short_memory_summary": short_summary or "‚Äî",
                "long_memory_facts": long_facts or "‚Äî", 
                "semantic_context": semantic_context or "‚Äî",
            }
            
            logger.info(f"‚úÖ [ADAPTER] –†–ï–ó–£–õ–¨–¢–ê–¢ get_for_prompt: short={len(result['short_memory_summary'])}, facts={len(result['long_memory_facts'])}, semantic={len(result['semantic_context'])}")
            print(f"‚úÖ [ADAPTER] –†–ï–ó–£–õ–¨–¢–ê–¢ get_for_prompt: short={len(result['short_memory_summary'])}, facts={len(result['long_memory_facts'])}, semantic={len(result['semantic_context'])}")
            
            return result
            
        except Exception as e:
            logger.error(f"‚ùå [ADAPTER] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–∞–º—è—Ç–∏ –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞: {e}")
            print(f"‚ùå [ADAPTER] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–∞–º—è—Ç–∏ –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞: {e}")
            import traceback
            logger.error(f"‚ùå [ADAPTER] Traceback: {traceback.format_exc()}")
            print(f"‚ùå [ADAPTER] Traceback: {traceback.format_exc()}")
            return {
                "short_memory_summary": "‚Äî",
                "long_memory_facts": "‚Äî",
                "semantic_context": "‚Äî",
            }
    
    def _get_short_memory_summary(self, user_id: str) -> Optional[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç –∫–æ—Ä–æ—Ç–∫—É—é —Å–≤–æ–¥–∫—É –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            logger.info(f"üîç [ADAPTER] –ü–æ–ª—É—á–∞–µ–º –∫–æ—Ä–æ—Ç–∫—É—é —Å–≤–æ–¥–∫—É –¥–ª—è {user_id}")
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã memory_manager
            
            # –í–∞—Ä–∏–∞–Ω—Ç 1: MemoryLevelsManager
            if hasattr(self.memory_manager, 'short_term') and self.memory_manager.short_term:
                short_term = self.memory_manager.short_term
                logger.info(f"üîç [ADAPTER] short_term –Ω–∞–π–¥–µ–Ω: {type(short_term)}")
                
                # –ú–µ—Ç–æ–¥ 1: get_context_string (–æ—Å–Ω–æ–≤–Ω–æ–π –¥–ª—è ShortMemory)
                if hasattr(short_term, 'get_context_string'):
                    try:
                        context_string = short_term.get_context_string()
                        if context_string and context_string != "–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –ø–∞–º—è—Ç–∏":
                            logger.info(f"‚úÖ [ADAPTER] get_context_string –≤–µ—Ä–Ω—É–ª {len(context_string)} —Å–∏–º–≤–æ–ª–æ–≤")
                            return context_string
                    except Exception as e:
                        logger.warning(f"‚ö†Ô∏è [ADAPTER] get_context_string failed: {e}")
                
                # –ú–µ—Ç–æ–¥ 2: get_context (–≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π)
                if hasattr(short_term, 'get_context'):
                    try:
                        messages = short_term.get_context()
                        if messages:
                            logger.info(f"‚úÖ [ADAPTER] get_context –≤–µ—Ä–Ω—É–ª {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π")
                            
                            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥
                            summary_parts = []
                            for msg in messages[-10:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10
                                if isinstance(msg, dict):
                                    role = msg.get('role', 'unknown')
                                    content = msg.get('content', '')[:100]  # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                                else:
                                    # –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
                                    role = getattr(msg, 'role', 'unknown')
                                    content = getattr(msg, 'content', str(msg))[:100]
                                
                                if content:
                                    summary_parts.append(f"[{role.upper()}]: {content}")
                            
                            if summary_parts:
                                result = "\n".join(summary_parts)
                                logger.info(f"‚úÖ [ADAPTER] –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∞ —Å–≤–æ–¥–∫–∞ –∏–∑ get_context: {len(result)} —Å–∏–º–≤–æ–ª–æ–≤")
                                return result
                    except Exception as e:
                        logger.warning(f"‚ö†Ô∏è [ADAPTER] get_context failed: {e}")
            
            # –í–∞—Ä–∏–∞–Ω—Ç 2: HybridMemory —Å short_memory
            if hasattr(self.memory_manager, 'short_memory') and self.memory_manager.short_memory:
                try:
                    buffer = self.memory_manager.short_memory
                    logger.info(f"üîç [ADAPTER] HybridMemory.short_memory –Ω–∞–π–¥–µ–Ω: {type(buffer)}")
                    
                    if hasattr(buffer, 'messages') and buffer.messages:
                        recent_messages = buffer.messages[-10:]
                        logger.info(f"‚úÖ [ADAPTER] short_memory.messages: {len(recent_messages)} —Å–æ–æ–±—â–µ–Ω–∏–π")
                        
                        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥
                        summary_parts = []
                        for msg in recent_messages:
                            if isinstance(msg, dict):
                                role = msg.get('role', 'unknown')
                                content = msg.get('content', '')[:100]
                            else:
                                role = getattr(msg, 'role', 'unknown')
                                content = getattr(msg, 'content', str(msg))[:100]
                            
                            if content:
                                summary_parts.append(f"[{role.upper()}]: {content}")
                        
                        if summary_parts:
                            result = "\n".join(summary_parts)
                            logger.info(f"‚úÖ [ADAPTER] –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∞ —Å–≤–æ–¥–∫–∞ –∏–∑ HybridMemory: {len(result)} —Å–∏–º–≤–æ–ª–æ–≤")
                            return result
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è [ADAPTER] HybridMemory short_memory failed: {e}")
            
            # –í–∞—Ä–∏–∞–Ω—Ç 3: –ü—Ä–æ—Å—Ç–æ–π MemoryAdapter —Å messages
            if hasattr(self.memory_manager, 'messages') and self.memory_manager.messages:
                try:
                    recent_messages = self.memory_manager.messages[-10:]
                    logger.info(f"‚úÖ [ADAPTER] direct messages: {len(recent_messages)} —Å–æ–æ–±—â–µ–Ω–∏–π")
                    
                    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥
                    summary_parts = []
                    for msg in recent_messages:
                        if isinstance(msg, dict):
                            role = msg.get('role', 'unknown')
                            content = msg.get('content', '')[:100]
                        else:
                            role = getattr(msg, 'role', 'unknown')
                            content = getattr(msg, 'content', str(msg))[:100]
                        
                        if content:
                            summary_parts.append(f"[{role.upper()}]: {content}")
                    
                    if summary_parts:
                        result = "\n".join(summary_parts)
                        logger.info(f"‚úÖ [ADAPTER] –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∞ —Å–≤–æ–¥–∫–∞ –∏–∑ direct messages: {len(result)} —Å–∏–º–≤–æ–ª–æ–≤")
                        return result
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è [ADAPTER] direct messages failed: {e}")
            
            logger.warning(f"‚ùå [ADAPTER] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ—Ä–æ—Ç–∫—É—é —Å–≤–æ–¥–∫—É –¥–ª—è {user_id}")
            logger.info(f"‚ùå [ADAPTER] –î–æ—Å—Ç—É–ø–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã memory_manager: {dir(self.memory_manager)}")
            return None
            
        except Exception as e:
            logger.warning(f"‚ùå [ADAPTER] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ—Ä–æ—Ç–∫–æ–π —Å–≤–æ–¥–∫–∏: {e}")
            return None
    
    def _get_long_memory_facts(self, user_id: str) -> Optional[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–µ —Ñ–∞–∫—Ç—ã –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
        try:
            logger.info(f"üîç [ADAPTER] –ü–æ–ª—É—á–∞–µ–º –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–µ —Ñ–∞–∫—Ç—ã –¥–ª—è {user_id}")
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã memory_manager
            
            # –í–∞—Ä–∏–∞–Ω—Ç 1: MemoryLevelsManager —Å long_term
            if hasattr(self.memory_manager, 'long_term') and self.memory_manager.long_term:
                logger.info(f"üîç [ADAPTER] long_term –Ω–∞–π–¥–µ–Ω: {type(self.memory_manager.long_term)}")
                
                try:
                    # –ò—â–µ–º —Ñ–∞–∫—Ç—ã –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ (–±–æ–ª–µ–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã)
                    user_facts = self.memory_manager.long_term.search_memories(
                        query=f"–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–º—è –∑–æ–≤—É—Ç –≤–æ–∑—Ä–∞—Å—Ç —Ä–∞–±–æ—Ç–∞ —Å–µ–º—å—è –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è —Ü–µ–ª–∏",
                        limit=5
                    )
                    
                    logger.info(f"üîç [ADAPTER] –ü–æ–∏—Å–∫ —Ñ–∞–∫—Ç–æ–≤ –≤–µ—Ä–Ω—É–ª {len(user_facts) if user_facts else 0} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
                    
                    if user_facts:
                        facts_parts = []
                        for fact in user_facts:
                            content = fact.get('content', '')
                            logger.info(f"üîç [ADAPTER] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ñ–∞–∫—Ç: {content[:50]}...")
                            
                            # –§–∏–ª—å—Ç—Ä—É–µ–º —Ñ–∞–∫—Ç—ã, —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ –ª–∏—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                            if content and len(content) > 10:
                                # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Ñ–∞–∫—Ç–∞–º —Å –∏–º–µ–Ω–∞–º–∏ –∏ –ª–∏—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
                                important_keywords = ['–∑–æ–≤—É—Ç', '–∏–º—è', '–º–µ–Ω—è', '–ª–µ—Ç', '–≤–æ–∑—Ä–∞—Å—Ç', '—Ä–∞–±–æ—Ç–∞', '–ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç', '–∞–Ω–¥—Ä–µ–π', '–≥–ª–µ–±', '–ø–∏—Ü—Ü–∞', '–µ–¥–∞', '–º–æ—Å–∫–≤–µ', '–º–æ—Å–∫–≤–∞', '–∂–∏–≤—É']
                                if any(word in content.lower() for word in important_keywords):
                                    facts_parts.insert(0, f"‚Ä¢ {content}")  # –í –Ω–∞—á–∞–ª–æ —Å–ø–∏—Å–∫–∞
                                    logger.info(f"‚úÖ [ADAPTER] –í–∞–∂–Ω—ã–π —Ñ–∞–∫—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –Ω–∞—á–∞–ª–æ: {content[:30]}...")
                                else:
                                    facts_parts.append(f"‚Ä¢ {content}")
                                    logger.info(f"‚úÖ [ADAPTER] –û–±—ã—á–Ω—ã–π —Ñ–∞–∫—Ç –¥–æ–±–∞–≤–ª–µ–Ω: {content[:30]}...")
                        
                        if facts_parts:
                            result = "\n".join(facts_parts[:5])  # –ú–∞–∫—Å–∏–º—É–º 5 —Ñ–∞–∫—Ç–æ–≤
                            logger.info(f"‚úÖ [ADAPTER] –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω—ã –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–µ —Ñ–∞–∫—Ç—ã: {len(facts_parts)} —Ñ–∞–∫—Ç–æ–≤, {len(result)} —Å–∏–º–≤–æ–ª–æ–≤")
                            return result
                        else:
                            logger.warning(f"‚ö†Ô∏è [ADAPTER] –§–∞–∫—Ç—ã –Ω–∞–π–¥–µ–Ω—ã, –Ω–æ –≤—Å–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω—ã")
                    else:
                        logger.warning(f"‚ö†Ô∏è [ADAPTER] –î–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–µ —Ñ–∞–∫—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è [ADAPTER] long_term.search_memories failed: {e}")
            
            # –í–∞—Ä–∏–∞–Ω—Ç 2: HybridMemory —Å long_memory
            if hasattr(self.memory_manager, 'long_memory') and self.memory_manager.long_memory:
                try:
                    long_memory = self.memory_manager.long_memory
                    logger.info(f"üîç [ADAPTER] HybridMemory.long_memory –Ω–∞–π–¥–µ–Ω: {type(long_memory)}")
                    
                    # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                    if hasattr(long_memory, 'get_user_profile'):
                        profile = long_memory.get_user_profile()
                        if profile:
                            logger.info(f"‚úÖ [ADAPTER] –ü–æ–ª—É—á–µ–Ω –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {profile}")
                            
                            facts_parts = []
                            if profile.get('name'):
                                facts_parts.append(f"‚Ä¢ –ò–º—è: {profile['name']}")
                            if profile.get('age'):
                                facts_parts.append(f"‚Ä¢ –í–æ–∑—Ä–∞—Å—Ç: {profile['age']} –ª–µ—Ç")
                            if profile.get('interests'):
                                facts_parts.append(f"‚Ä¢ –ò–Ω—Ç–µ—Ä–µ—Å—ã: {', '.join(profile['interests'])}")
                            if profile.get('favorite_topics'):
                                facts_parts.append(f"‚Ä¢ –õ—é–±–∏–º—ã–µ —Ç–µ–º—ã: {', '.join([t[0] if isinstance(t, tuple) else str(t) for t in profile['favorite_topics'][:3]])}")
                            
                            if facts_parts:
                                result = "\n".join(facts_parts)
                                logger.info(f"‚úÖ [ADAPTER] –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω—ã —Ñ–∞–∫—Ç—ã –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è HybridMemory: {len(result)} —Å–∏–º–≤–æ–ª–æ–≤")
                                return result
                    
                    # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ: –ø–æ–∏—Å–∫ –≤ –ø–∞–º—è—Ç–∏
                    if hasattr(long_memory, 'search_memory'):
                        search_results = long_memory.search_memory("–∏–º—è –∑–æ–≤—É—Ç –≤–æ–∑—Ä–∞—Å—Ç", limit=5)
                        if search_results:
                            facts_parts = []
                            for result in search_results:
                                content = result.get('content', '')
                                if content and len(content) > 10:
                                    facts_parts.append(f"‚Ä¢ {content}")
                            
                            if facts_parts:
                                result = "\n".join(facts_parts[:5])
                                logger.info(f"‚úÖ [ADAPTER] –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω—ã —Ñ–∞–∫—Ç—ã –∏–∑ –ø–æ–∏—Å–∫–∞ HybridMemory: {len(result)} —Å–∏–º–≤–æ–ª–æ–≤")
                                return result
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è [ADAPTER] HybridMemory long_memory failed: {e}")
            
            # –í–∞—Ä–∏–∞–Ω—Ç 3: –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –Ω–∞–ø—Ä—è–º—É—é
            if hasattr(self.memory_manager, 'get_user_profile'):
                try:
                    profile = self.memory_manager.get_user_profile()
                    if profile:
                        facts_parts = []
                        if profile.get('name'):
                            facts_parts.append(f"‚Ä¢ –ò–º—è: {profile['name']}")
                        if profile.get('age'):
                            facts_parts.append(f"‚Ä¢ –í–æ–∑—Ä–∞—Å—Ç: {profile['age']} –ª–µ—Ç")
                        if profile.get('interests'):
                            facts_parts.append(f"‚Ä¢ –ò–Ω—Ç–µ—Ä–µ—Å—ã: {', '.join(profile['interests'])}")
                        
                        if facts_parts:
                            result = "\n".join(facts_parts)
                            logger.info(f"‚úÖ [ADAPTER] –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω—ã —Ñ–∞–∫—Ç—ã –∏–∑ direct profile: {len(result)} —Å–∏–º–≤–æ–ª–æ–≤")
                            return result
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è [ADAPTER] direct get_user_profile failed: {e}")
            
            logger.warning(f"‚ùå [ADAPTER] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–µ —Ñ–∞–∫—Ç—ã –¥–ª—è {user_id}")
            logger.info(f"‚ùå [ADAPTER] –î–æ—Å—Ç—É–ø–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã memory_manager: {[attr for attr in dir(self.memory_manager) if not attr.startswith('_')]}")
            return None
            
        except Exception as e:
            logger.warning(f"‚ùå [ADAPTER] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã—Ö —Ñ–∞–∫—Ç–æ–≤: {e}")
            return None
    
    def _get_semantic_context(self, user_id: str, query: str) -> Optional[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ –∑–∞–ø—Ä–æ—Å—É"""
        try:
            logger.info(f"üîç [ADAPTER] –ü–æ–ª—É—á–∞–µ–º —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è {user_id}, –∑–∞–ø—Ä–æ—Å: {query[:50]}...")
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã memory_manager
            
            # –í–∞—Ä–∏–∞–Ω—Ç 1: MemoryLevelsManager —Å long_term
            if hasattr(self.memory_manager, 'long_term') and self.memory_manager.long_term:
                logger.info(f"üîç [ADAPTER] long_term –Ω–∞–π–¥–µ–Ω –¥–ª—è —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞")
                
                try:
                    # –ò—â–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É
                    relevant_docs = self.memory_manager.long_term.search_memories(
                        query=query,
                        limit=3
                    )
                    
                    logger.info(f"üîç [ADAPTER] –°–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –≤–µ—Ä–Ω—É–ª {len(relevant_docs) if relevant_docs else 0} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
                    
                    if relevant_docs:
                        context_parts = []
                        for doc in relevant_docs:
                            content = doc.get('content', '')
                            logger.info(f"üîç [ADAPTER] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç: {content[:50]}...")
                            
                            if content and len(content) > 20:  # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–µ
                                context_parts.append(f"üìù {content}")
                                logger.info(f"‚úÖ [ADAPTER] –î–æ–∫—É–º–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç")
                            else:
                                logger.info(f"‚ö†Ô∏è [ADAPTER] –î–æ–∫—É–º–µ–Ω—Ç –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω (—Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π): {len(content)} —Å–∏–º–≤–æ–ª–æ–≤")
                        
                        if context_parts:
                            result = "\n".join(context_parts)
                            logger.info(f"‚úÖ [ADAPTER] –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç: {len(context_parts)} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤, {len(result)} —Å–∏–º–≤–æ–ª–æ–≤")
                            return result
                        else:
                            logger.warning(f"‚ö†Ô∏è [ADAPTER] –î–æ–∫—É–º–µ–Ω—Ç—ã –Ω–∞–π–¥–µ–Ω—ã, –Ω–æ –≤—Å–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω—ã")
                    else:
                        logger.warning(f"‚ö†Ô∏è [ADAPTER] –†–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è [ADAPTER] long_term.search_memories failed: {e}")
            
            # –í–∞—Ä–∏–∞–Ω—Ç 2: HybridMemory —Å long_memory
            if hasattr(self.memory_manager, 'long_memory') and self.memory_manager.long_memory:
                try:
                    long_memory = self.memory_manager.long_memory
                    logger.info(f"üîç [ADAPTER] HybridMemory.long_memory –Ω–∞–π–¥–µ–Ω –¥–ª—è —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–∏—Å–∫–∞")
                    
                    if hasattr(long_memory, 'search_memory'):
                        search_results = long_memory.search_memory(query, limit=3)
                        if search_results:
                            context_parts = []
                            for result in search_results:
                                content = result.get('content', '')
                                if content and len(content) > 20:
                                    context_parts.append(f"üìù {content}")
                            
                            if context_parts:
                                result = "\n".join(context_parts)
                                logger.info(f"‚úÖ [ADAPTER] –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ HybridMemory: {len(result)} —Å–∏–º–≤–æ–ª–æ–≤")
                                return result
                except Exception as e:
                    logger.warning(f"‚ö†Ô∏è [ADAPTER] HybridMemory semantic search failed: {e}")
            
            # –í–∞—Ä–∏–∞–Ω—Ç 3: –ü—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫ –ø–æ –≤—Å–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–º –º–µ—Ç–æ–¥–∞–º
            search_methods = ['search_memory', 'search_memories', 'get_relevant_context']
            for method_name in search_methods:
                if hasattr(self.memory_manager, method_name):
                    try:
                        method = getattr(self.memory_manager, method_name)
                        if callable(method):
                            logger.info(f"üîç [ADAPTER] –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–µ—Ç–æ–¥ {method_name}")
                            
                            # –†–∞–∑–Ω—ã–µ —Å–∏–≥–Ω–∞—Ç—É—Ä—ã –º–µ—Ç–æ–¥–æ–≤
                            if method_name == 'get_relevant_context':
                                results = method(query)
                            else:
                                results = method(query, limit=3)
                            
                            if results:
                                context_parts = []
                                for item in results:
                                    if isinstance(item, dict):
                                        content = item.get('content', '')
                                    elif isinstance(item, str):
                                        content = item
                                    else:
                                        content = str(item)
                                    
                                    if content and len(content) > 20:
                                        context_parts.append(f"üìù {content}")
                                
                                if context_parts:
                                    result = "\n".join(context_parts)
                                    logger.info(f"‚úÖ [ADAPTER] –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç —á–µ—Ä–µ–∑ {method_name}: {len(result)} —Å–∏–º–≤–æ–ª–æ–≤")
                                    return result
                    except Exception as e:
                        logger.warning(f"‚ö†Ô∏è [ADAPTER] {method_name} failed: {e}")
            
            logger.warning(f"‚ùå [ADAPTER] –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è {user_id}")
            logger.info(f"‚ùå [ADAPTER] –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Ç–æ–¥—ã memory_manager: {[method for method in dir(self.memory_manager) if 'search' in method.lower() or 'context' in method.lower()]}")
            return None
            
        except Exception as e:
            logger.warning(f"‚ùå [ADAPTER] –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞: {e}")
            return None
    
    def get_question_counter(self, user_id: str) -> int:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è —á–∞—Å—Ç–æ—Ç—ã"""
        try:
            # –ú–æ–∂–Ω–æ —Ö—Ä–∞–Ω–∏—Ç—å –≤ Redis –∏–ª–∏ –ë–î, –ø–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç–æ–π —Å—á–µ—Ç—á–∏–∫
            # –í —Ä–µ–∞–ª—å–Ω–æ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å
            # –†–µ–∞–ª–∏–∑—É–µ–º –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω—ã–π —Å—á–µ—Ç—á–∏–∫ —á–µ—Ä–µ–∑ memory_manager
            if hasattr(self.memory_manager, 'get_user_stats'):
                stats = self.memory_manager.get_user_stats()
                return stats.get('question_count', 0)
            return 0
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤: {e}")
            return 0
    
    def can_ask_question(self, user_id: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–Ω–æ –ª–∏ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å"""
        counter = self.get_question_counter(user_id)
        return (counter % 3 == 2)  # –í–æ–ø—Ä–æ—Å –∫–∞–∂–¥—ã–π 3-–π —Ä–∞–∑
