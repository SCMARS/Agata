"""
–£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –ø–∞–º—è—Ç–∏ - —Ä–µ—à–µ–Ω–∏–µ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º
–û–±—ä–µ–¥–∏–Ω—è–µ—Ç –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω—É—é –∏ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—É—é –ø–∞–º—è—Ç—å –≤ –µ–¥–∏–Ω—É—é –ª–æ–≥–∏—á–Ω—É—é —Å–∏—Å—Ç–µ–º—É
"""

import logging
from datetime import datetime
from typing import List, Dict, Any, Optional
from .intelligent_vector_memory import IntelligentVectorMemory

logger = logging.getLogger(__name__)

class UnifiedMemoryManager:
    """
    –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –ø–∞–º—è—Ç–∏
    
    –õ–û–ì–ò–ö–ê:
    - –°–æ–æ–±—â–µ–Ω–∏—è 1-10: —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ short_term_window
    - –°–æ–æ–±—â–µ–Ω–∏—è 11+: —Å—Ç–∞—Ä—ã–µ –ø–µ—Ä–µ–Ω–æ—Å—è—Ç—Å—è –≤ vector_db, –Ω–æ–≤—ã–µ –≤ window
    - –ü–æ–∏—Å–∫: —Å–Ω–∞—á–∞–ª–∞ window, –ø–æ—Ç–æ–º vector_db
    """
    
    def __init__(self, user_id: str, window_size: int = 10):
        self.user_id = user_id
        self.window_size = window_size
        self.short_term_window = []  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ N —Å–æ–æ–±—â–µ–Ω–∏–π
        self.message_count = 0
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–µ–∫—Ç–æ—Ä–Ω—É—é –ë–î
        try:
            self.vector_db = IntelligentVectorMemory(user_id)
            self.vector_available = True
            logger.info(f"üß† [UNIFIED-{user_id}] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –≤–µ–∫—Ç–æ—Ä–Ω–∞—è –ë–î")
        except Exception as e:
            logger.error(f"‚ùå [UNIFIED-{user_id}] –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –ë–î: {e}")
            self.vector_db = None
            self.vector_available = False
    
    def add_message(self, role: str, content: str, metadata: Dict[str, Any] = None) -> Dict[str, bool]:
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É –ø–∞–º—è—Ç–∏
        
        Args:
            role: 'user' –∏–ª–∏ 'assistant'
            content: —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            metadata: –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            
        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        """
        self.message_count += 1
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        message = {
            'role': role,
            'content': content,
            'metadata': metadata or {},
            'timestamp': datetime.utcnow().isoformat(),
            'message_id': self.message_count
        }
        
        logger.info(f"üìù [UNIFIED-{self.user_id}] –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ #{self.message_count}: {content[:50]}...")
        
        results = {'short_term': False, 'long_term': False}
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ–∫–Ω–æ –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–æ–π –ø–∞–º—è—Ç–∏
        self.short_term_window.append(message)
        results['short_term'] = True
        
        # –ï—Å–ª–∏ –æ–∫–Ω–æ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–æ - –ø–µ—Ä–µ–Ω–æ—Å–∏–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≤–µ–∫—Ç–æ—Ä–Ω—É—é –ë–î
        if len(self.short_term_window) > self.window_size:
            oldest_message = self.short_term_window.pop(0)
            
            if self.vector_available:
                try:
                    # –ü–µ—Ä–µ–Ω–æ—Å–∏–º –≤ –≤–µ–∫—Ç–æ—Ä–Ω—É—é –ë–î
                    self.vector_db.add_document(
                        content=oldest_message['content'],
                        metadata={
                            **oldest_message['metadata'],
                            'role': oldest_message['role'],
                            'timestamp': oldest_message['timestamp'],
                            'transferred_from_short_term': True
                        }
                    )
                    results['long_term'] = True
                    logger.info(f"üóÑÔ∏è [UNIFIED-{self.user_id}] –ü–µ—Ä–µ–Ω–µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ #{oldest_message['message_id']} –≤ –≤–µ–∫—Ç–æ—Ä–Ω—É—é –ë–î")
                except Exception as e:
                    logger.error(f"‚ùå [UNIFIED-{self.user_id}] –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–Ω–æ—Å–∞ –≤ –≤–µ–∫—Ç–æ—Ä–Ω—É—é –ë–î: {e}")
            else:
                logger.warning(f"‚ö†Ô∏è [UNIFIED-{self.user_id}] –í–µ–∫—Ç–æ—Ä–Ω–∞—è –ë–î –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Ç–µ—Ä—è–Ω–æ")
        
        logger.info(f"‚úÖ [UNIFIED-{self.user_id}] –°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ. –û–∫–Ω–æ: {len(self.short_term_window)}, –í—Å–µ–≥–æ: {self.message_count}")
        return results
    
    def get_context_for_prompt(self, query: str = "") -> Dict[str, str]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞ —Å —É–º–Ω—ã–º –≤—ã–±–æ—Ä–æ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∞
        
        Args:
            query: —Ç–µ–∫—É—â–∏–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞
        """
        logger.info(f"üîç [UNIFIED-{self.user_id}] –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç. –°–æ–æ–±—â–µ–Ω–∏–π: {self.message_count}, –í –æ–∫–Ω–µ: {len(self.short_term_window)}")
        
        context = {
            "short_memory_summary": "‚Äî",
            "long_memory_facts": "‚Äî", 
            "semantic_context": "‚Äî"
        }
        
        # 1. –ö—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–∞—è –ø–∞–º—è—Ç—å (–≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞)
        if self.short_term_window:
            recent_messages = []
            for msg in self.short_term_window[-5:]:  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–æ–æ–±—â–µ–Ω–∏–π
                role_label = "üë§" if msg['role'] == 'user' else "ü§ñ"
                recent_messages.append(f"{role_label} {msg['content']}")
            
            context["short_memory_summary"] = "–ù–µ–¥–∞–≤–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è:\n" + "\n".join(recent_messages)
            logger.info(f"‚úÖ [UNIFIED-{self.user_id}] –ö—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–∞—è –ø–∞–º—è—Ç—å: {len(recent_messages)} —Å–æ–æ–±—â–µ–Ω–∏–π")
        
        # 2. –î–æ–ª–≥–æ—Å—Ä–æ—á–Ω–∞—è –ø–∞–º—è—Ç—å - –í–°–ï–ì–î–ê –ø—ã—Ç–∞–µ–º—Å—è –∏—Å–∫–∞—Ç—å –≤ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –ë–î –µ—Å–ª–∏ –µ—Å—Ç—å –∑–∞–ø—Ä–æ—Å
        if self.vector_available and query:
            try:
                # –ò—â–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —Ñ–∞–∫—Ç—ã –≤ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –ë–î
                search_results = self.vector_db.search_similar(query, similarity_threshold=0.0, max_results=8)
                
                if search_results:
                    facts = []
                    for result in search_results:
                        content = result.get('content', '') or result.get('document', '')
                        if content and len(content) > 10:
                            # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ñ–∞–∫—Ç–∞–º–∏
                            if not content.startswith(("–î–æ–±—Ä—ã–π", "–ü—Ä–∏–≤–µ—Ç", "–ö–∞–∫ –¥–µ–ª–∞")):
                                facts.append(f"‚Ä¢ {content}")
                    
                    if facts:
                        context["long_memory_facts"] = "–í–∞–∂–Ω—ã–µ —Ñ–∞–∫—Ç—ã –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ –æ–±—â–µ–Ω–∏—è:\n" + "\n".join(facts[:5])
                        context["semantic_context"] = "–ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–∏—Å–∫–∞:\n" + "\n".join(facts[:3])
                        logger.info(f"‚úÖ [UNIFIED-{self.user_id}] –î–æ–ª–≥–æ—Å—Ä–æ—á–Ω–∞—è –ø–∞–º—è—Ç—å: {len(facts)} —Ñ–∞–∫—Ç–æ–≤")
                    else:
                        logger.info(f"‚ö†Ô∏è [UNIFIED-{self.user_id}] –í–µ–∫—Ç–æ—Ä–Ω–∞—è –ë–î –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Ñ–∞–∫—Ç–æ–≤")
                else:
                    logger.info(f"‚ö†Ô∏è [UNIFIED-{self.user_id}] –ü–æ–∏—Å–∫ –≤ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –ë–î –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
                    
            except Exception as e:
                logger.error(f"‚ùå [UNIFIED-{self.user_id}] –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –ë–î: {e}")
        
        # 3. –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–û: –ï—Å–ª–∏ –≤ –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–æ–π –ø–∞–º—è—Ç–∏ –µ—Å—Ç—å —Ñ–∞–∫—Ç—ã, –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö —Ç–æ–∂–µ
        if len(context["long_memory_facts"]) <= 5 and self.short_term_window:  # –ï—Å–ª–∏ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã—Ö —Ñ–∞–∫—Ç–æ–≤ –º–∞–ª–æ
            user_messages = [msg for msg in self.short_term_window if msg['role'] == 'user']
            if user_messages:
                recent_facts = []
                for msg in user_messages:
                    content = msg['content']
                    # –ò—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ñ–∞–∫—Ç–∞–º–∏ (–∏–º—è, –≤–æ–∑—Ä–∞—Å—Ç, —Ä–∞–±–æ—Ç–∞, —Ö–æ–±–±–∏)
                    if any(keyword in content.lower() for keyword in ['–∑–æ–≤—É—Ç', '–ª–µ—Ç', '—Ä–∞–±–æ—Ç–∞—é', '—Ö–æ–±–±–∏', '—É–≤–ª–µ–∫–∞—é—Å—å', 'senior', 'python']):
                        if not content.startswith("–ü—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ"):
                            recent_facts.append(f"‚Ä¢ {content}")
                
                if recent_facts:
                    if context["long_memory_facts"] == "‚Äî":
                        context["long_memory_facts"] = "–§–∞–∫—Ç—ã –∏–∑ –Ω–µ–¥–∞–≤–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π:\n" + "\n".join(recent_facts)
                    else:
                        context["long_memory_facts"] += "\n\n–ò–∑ –Ω–µ–¥–∞–≤–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π:\n" + "\n".join(recent_facts)
                    logger.info(f"‚úÖ [UNIFIED-{self.user_id}] –î–æ–±–∞–≤–ª–µ–Ω—ã —Ñ–∞–∫—Ç—ã –∏–∑ –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–æ–π –ø–∞–º—è—Ç–∏: {len(recent_facts)}")
        
        # 4. –õ–æ–≥–∏—Ä—É–µ–º —á—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º
        logger.info(f"üìä [UNIFIED-{self.user_id}] –í–û–ó–í–†–ê–©–ê–ï–ú:")
        logger.info(f"   Short: {len(context['short_memory_summary'])} —Å–∏–º–≤–æ–ª–æ–≤")
        logger.info(f"   Facts: {len(context['long_memory_facts'])} —Å–∏–º–≤–æ–ª–æ–≤") 
        logger.info(f"   Semantic: {len(context['semantic_context'])} —Å–∏–º–≤–æ–ª–æ–≤")
        
        return context
    
    def get_memory_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–∞–º—è—Ç–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏"""
        return {
            "user_id": self.user_id,
            "total_messages": self.message_count,
            "short_term_count": len(self.short_term_window),
            "window_size": self.window_size,
            "vector_available": self.vector_available,
            "should_use_vector": self.message_count > self.window_size,
            "messages_in_vector": max(0, self.message_count - self.window_size)
        }
    
    def clear_memory(self) -> bool:
        """–û—á–∏—â–∞–µ—Ç –≤—Å—é –ø–∞–º—è—Ç—å"""
        try:
            self.short_term_window.clear()
            self.message_count = 0
            
            if self.vector_available:
                # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—á–∏—Å—Ç–∫—É –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –ë–î –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                pass
            
            logger.info(f"üßπ [UNIFIED-{self.user_id}] –ü–∞–º—è—Ç—å –æ—á–∏—â–µ–Ω–∞")
            return True
        except Exception as e:
            logger.error(f"‚ùå [UNIFIED-{self.user_id}] –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ø–∞–º—è—Ç–∏: {e}")
            return False
