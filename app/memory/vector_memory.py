"""
Vector Memory Adapter with semantic search for long-term memory
"""
import json
import asyncio
from datetime import datetime, timedelta
from typing import List, Dict, Any, Optional
from .base import MemoryAdapter, Message, MemoryContext

class VectorMemory(MemoryAdapter):
    """
    –í–µ–∫—Ç–æ—Ä–Ω–∞—è –ø–∞–º—è—Ç—å –¥–ª—è –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–º –ø–æ–∏—Å–∫–æ–º
    """
    
    def __init__(self, user_id: str, max_memories: int = 1000):
        self.user_id = user_id
        self.max_memories = max_memories
        self.memories: List[Dict[str, Any]] = []
        self.embeddings_cache = {}
        
    async def add_message(self, message: Message, context: MemoryContext) -> None:
        """–î–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—É—é –ø–∞–º—è—Ç—å"""
        # –°–æ–∑–¥–∞–µ–º –ø–∞–º—è—Ç—å —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–∞–∂–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        is_important = await self._is_important_message(message, context)
        print(f"üß† VectorMemory: –°–æ–æ–±—â–µ–Ω–∏–µ '{message.content[:50]}...' –≤–∞–∂–Ω–æ–µ: {is_important}")
        
        if is_important:
            importance_score = await self._calculate_importance(message, context)
            memory_entry = {
                'id': f"{self.user_id}_{datetime.utcnow().isoformat()}",
                'content': message.content,
                'role': message.role,
                'timestamp': message.timestamp.isoformat(),
                'day_number': context.day_number,
                'importance_score': importance_score,
                'topics': await self._extract_topics(message.content),
                'emotions': await self._detect_emotions(message.content),
                'metadata': {
                    'user_id': self.user_id,
                    'message_length': len(message.content),
                    'has_question': '?' in message.content,
                    'day_context': context.day_number
                }
            }
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –ø–∞–º—è—Ç—å
            self.memories.append(memory_entry)
            print(f"üß† VectorMemory: –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –ø–∞–º—è—Ç—å (–≤–∞–∂–Ω–æ—Å—Ç—å: {importance_score:.2f}). –í—Å–µ–≥–æ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π: {len(self.memories)}")
            
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –ø–∞–º—è—Ç–∏
            if len(self.memories) > self.max_memories:
                # –£–¥–∞–ª—è–µ–º –Ω–∞–∏–º–µ–Ω–µ–µ –≤–∞–∂–Ω—ã–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è
                self.memories.sort(key=lambda x: x['importance_score'], reverse=True)
                self.memories = self.memories[:self.max_memories]
        else:
            print(f"üß† VectorMemory: –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –≤–∞–∂–Ω–æ–µ, –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º")
    
    async def get_context(self, context: MemoryContext, query: str = "") -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–π –ø–∞–º—è—Ç–∏"""
        print(f"üß† VectorMemory: –ó–∞–ø—Ä–æ—Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞. –í—Å–µ–≥–æ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π: {len(self.memories)}")
        
        if not self.memories:
            print(f"üß† VectorMemory: –ù–µ—Ç –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—ã–π –æ—Ç–≤–µ—Ç")
            return "–≠—Ç–æ –Ω–∞—à–µ –ø–µ—Ä–≤–æ–µ –æ–±—â–µ–Ω–∏–µ."
        
        # –ü–æ–∏—Å–∫ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π
        relevant_memories = await self._search_memories(query, context, limit=5)
        
        # –ï—Å–ª–∏ –Ω–µ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –ø–æ –∑–∞–ø—Ä–æ—Å—É, –±–µ—Ä–µ–º —Å–∞–º—ã–µ –≤–∞–∂–Ω—ã–µ
        if not relevant_memories and self.memories:
            relevant_memories = sorted(self.memories, key=lambda x: x['importance_score'], reverse=True)[:3]
            print(f"üß† VectorMemory: –ù–µ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö, –≤–∑—è–ª–∏ {len(relevant_memories)} —Å–∞–º—ã—Ö –≤–∞–∂–Ω—ã—Ö")
        
        if not relevant_memories:
            return "–£ –Ω–∞—Å —É–∂–µ –±—ã–ª–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤."
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —É–º–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
        context_parts = []
        
        # –ü—Ä–æ—Å—Ç–æ–µ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ (–≤—Ä–µ–º–µ–Ω–Ω–æ —É–ø—Ä–æ—â–µ–Ω–æ)
        context_parts.append(f"–ú—ã –æ–±—â–∞–µ–º—Å—è —É–∂–µ {len(self.memories)} —Å–æ–æ–±—â–µ–Ω–∏–π.")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤–∞–∂–Ω—ã–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è
        for memory in relevant_memories[:3]:
            if memory['importance_score'] > 0.5:
                content_preview = memory['content'][:80] + "..." if len(memory['content']) > 80 else memory['content']
                context_parts.append(f"–ü–æ–º–Ω—é: {content_preview}")
        
        print(f"üß† –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç: {' | '.join(context_parts)}")
        
        return " | ".join(context_parts)
    
    async def _extract_user_profile(self, memories: List[Dict]) -> str:
        """–ò–∑–≤–ª–µ—á—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
        try:
            profile_parts = []
            
            for memory in memories:
                content = memory.get('content', '').lower()
                
                # –ò–º—è
                if '–º–µ–Ω—è –∑–æ–≤—É—Ç' in content or '–º–æ–µ –∏–º—è' in content:
                    # –ü—Ä–æ—Å—Ç–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏
                    words = memory.get('content', '').split()
                    for i, word in enumerate(words):
                        if word.lower() in ['–∑–æ–≤—É—Ç', '–∏–º—è'] and i + 1 < len(words):
                            name = words[i + 1].strip('.,!?').title()
                            if name and len(name) > 1:
                                profile_parts.append(f"–∏–º—è {name}")
                                break
            
            # –í–æ–∑—Ä–∞—Å—Ç
            if '–º–Ω–µ ' in content and '–ª–µ—Ç' in content:
                words = content.split()
                for i, word in enumerate(words):
                    if word == '–º–Ω–µ' and i + 1 < len(words):
                        next_word = words[i + 1]
                        if next_word.isdigit():
                            profile_parts.append(f"{next_word} –ª–µ—Ç")
                            break
            
            # –ü—Ä–æ—Ñ–µ—Å—Å–∏—è
            if '—Ä–∞–±–æ—Ç–∞—é' in content or '–ø—Ä–æ—Ñ–µ—Å—Å–∏—è' in content:
                if '—É—á–∏—Ç–µ–ª–µ–º' in content: profile_parts.append("—É—á–∏—Ç–µ–ª—å")
                elif '–≤—Ä–∞—á–æ–º' in content: profile_parts.append("–≤—Ä–∞—á")
                elif '–ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–æ–º' in content: profile_parts.append("–ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç")
                elif '–¥–∏–∑–∞–π–Ω–µ—Ä–æ–º' in content: profile_parts.append("–¥–∏–∑–∞–π–Ω–µ—Ä")
                elif '–∏–Ω–∂–µ–Ω–µ—Ä–æ–º' in content: profile_parts.append("–∏–Ω–∂–µ–Ω–µ—Ä")
            
            # –ü–∏—Ç–æ–º—Ü—ã
            if '–∫–æ—Ç' in content or '—Å–æ–±–∞–∫–∞' in content:
                words = memory['content'].split()
                for i, word in enumerate(words):
                    if word.lower() in ['–∫–æ—Ç', '—Å–æ–±–∞–∫–∞'] and '–∏–º–µ–Ω–∏' in content:
                        # –ò—â–µ–º –∏–º—è –ø–∏—Ç–æ–º—Ü–∞
                        for j in range(max(0, i-5), min(len(words), i+5)):
                            if words[j].lower() in ['–∏–º–µ–Ω–∏', '–∑–æ–≤—É—Ç']:
                                if j + 1 < len(words):
                                    pet_name = words[j + 1].strip('.,!?').title()
                                    pet_type = "–∫–æ—Ç" if "–∫–æ—Ç" in content else "—Å–æ–±–∞–∫–∞"
                                    profile_parts.append(f"{pet_type} {pet_name}")
                                    break
        
            return ", ".join(list(set(profile_parts))[:3])  # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏, –±–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 3
        except Exception as e:
            print(f"üß† –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è: {e}")
            return ""
    
    async def _extract_conversation_themes(self, memories: List[Dict]) -> str:
        """–ò–∑–≤–ª–µ—á—å —Ç–µ–º—ã —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤"""
        try:
            themes = set()
            
            for memory in memories:
                topics = memory.get('topics', [])
                themes.update(topics[:2])  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ 2 —Ç–µ–º—ã –∏–∑ –∫–∞–∂–¥–æ–≥–æ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è
            
            return ", ".join(list(themes)[:3])
        except Exception as e:
            print(f"üß† –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Ç–µ–º: {e}")
            return ""
    
    async def _extract_emotional_context(self, memories: List[Dict]) -> str:
        """–ò–∑–≤–ª–µ—á—å —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç"""
        try:
            emotions = []
            
            for memory in memories:
                memory_emotions = memory.get('emotions', [])
                emotions.extend(memory_emotions)
            
            if emotions:
                # –ù–∞—Ö–æ–¥–∏–º –¥–æ–º–∏–Ω–∏—Ä—É—é—â—É—é —ç–º–æ—Ü–∏—é
                emotion_counts = {}
                for emotion in emotions:
                    emotion_counts[emotion] = emotion_counts.get(emotion, 0) + 1
                
                dominant_emotion = max(emotion_counts, key=emotion_counts.get)
                return dominant_emotion
            
            return ""
        except Exception as e:
            print(f"üß† –û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —ç–º–æ—Ü–∏–π: {e}")
            return ""
    
    async def _is_important_message(self, message: Message, context: MemoryContext) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞–∂–Ω–æ—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–π –ø–∞–º—è—Ç–∏"""
        content = message.content.lower()
        
        # 1. –ü–ï–†–°–û–ù–ê–õ–¨–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø (–≤—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
        personal_markers = [
            '–º–µ–Ω—è –∑–æ–≤—É—Ç', '–º–æ–µ –∏–º—è', '—è —Ä–∞–±–æ—Ç–∞—é', '–º–æ—è –ø—Ä–æ—Ñ–µ—Å—Å–∏—è', '—è —É—á—É—Å—å',
            '–º–Ω–µ ', '–ª–µ—Ç', '–∂–∏–≤—É –≤', '–∏–∑ ', '—Ä–æ–¥–æ–º', '—Ä–æ–¥–∏–ª—Å—è', '—Ä–æ–¥–∏–ª–∞—Å—å',
            '—Å–µ–º—å—è', '—Ä–æ–¥–∏—Ç–µ–ª–∏', '–º–∞–º–∞', '–ø–∞–ø–∞', '–±—Ä–∞—Ç', '—Å–µ—Å—Ç—Ä–∞', '–¥–µ—Ç–∏',
            '–∂–µ–Ω–∞—Ç', '–∑–∞–º—É–∂–µ–º', '—Ö–æ–ª–æ—Å—Ç', '–Ω–µ –∑–∞–º—É–∂–µ–º', '—Ä–∞–∑–≤–æ–¥',
            '–∂–µ–Ω–∞', '–º—É–∂', '—Å—ã–Ω', '–¥–æ—á—å', '—Ä–µ–±–µ–Ω–æ–∫', '–¥–æ—á–∫–∞', '—Å—ã–Ω–æ–∫'
        ]
        
        # 2. –ò–ù–¢–ï–†–ï–°–´ –ò –•–û–ë–ë–ò
        interests_markers = [
            '–º–Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è', '—è –ª—é–±–ª—é', '—É–≤–ª–µ–∫–∞—é—Å—å', '—Ö–æ–±–±–∏', '–∏–Ω—Ç–µ—Ä–µ—Å—É—é—Å—å',
            '–∑–∞–Ω–∏–º–∞—é—Å—å', '–∏–≥—Ä–∞—é –≤', '—á–∏—Ç–∞—é', '—Å–º–æ—Ç—Ä—é', '—Å–ª—É—à–∞—é',
            '–∫–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–∏—Ä—É—é', '–ø—É—Ç–µ—à–µ—Å—Ç–≤—É—é', '–≥–æ—Ç–æ–≤–ª—é'
        ]
        
        # 3. –≠–ú–û–¶–ò–ò –ò –ü–ï–†–ï–ñ–ò–í–ê–ù–ò–Ø
        emotional_markers = [
            '–ø–µ—Ä–µ–∂–∏–≤–∞—é', '–≤–æ–ª–Ω—É—é—Å—å', '–±–æ—é—Å—å', '—Ä–∞–¥—É—é—Å—å', '–≥—Ä—É—â—É',
            '–∑–ª—é—Å—å', '—Ä–∞—Å—Å—Ç—Ä–∞–∏–≤–∞—é—Å—å', '—Å—á–∞—Å—Ç–ª–∏–≤', '–Ω–µ—Å—á–∞—Å—Ç–ª–∏–≤',
            '–ø—Ä–æ–±–ª–µ–º–∞', '–±–µ—Å–ø–æ–∫–æ–∏—Ç', '—Ç—Ä–µ–≤–æ–∂–∏—Ç', '–º–µ—á—Ç–∞—é'
        ]
        
        # 4. –ü–õ–ê–ù–´ –ò –¶–ï–õ–ò
        goals_markers = [
            '–ø–ª–∞–Ω–∏—Ä—É—é', '—Ö–æ—á—É', '—Å–æ–±–∏—Ä–∞—é—Å—å', '–º–µ—á—Ç–∞—é', '—Ü–µ–ª—å',
            '–Ω–∞–¥–µ—é—Å—å', '—Å—Ç—Ä–µ–º–ª—é—Å—å', '–ø—ã—Ç–∞—é—Å—å', '—É—á—É—Å—å', '–∏–∑—É—á–∞—é'
        ]
        
        # 5. –û–¢–ù–û–®–ï–ù–ò–Ø –ò –°–û–¶–ò–ê–õ–¨–ù–´–ï –°–í–Ø–ó–ò
        social_markers = [
            '–¥—Ä—É–∑—å—è', '–ø–æ–¥—Ä—É–≥–∞', '–¥—Ä—É–≥', '–∫–æ–ª–ª–µ–≥–∏', '–∑–Ω–∞–∫–æ–º—ã–µ',
            '–æ—Ç–Ω–æ—à–µ–Ω–∏—è', '–≤—Å—Ç—Ä–µ—á–∞—é—Å—å', '—Ä–∞—Å—Å—Ç–∞–ª–∏—Å—å', '–ø–æ–∑–Ω–∞–∫–æ–º–∏–ª—Å—è',
            '–æ–±—â–∞—é—Å—å', '–¥—Ä—É–∂—É', '—Å—Å–æ—Ä—é—Å—å'
        ]
        
        # 6. –í–ê–ñ–ù–´–ï –°–û–ë–´–¢–ò–Ø
        events_markers = [
            '—Å–ª—É—á–∏–ª–æ—Å—å', '–ø—Ä–æ–∏–∑–æ—à–ª–æ', '—Å–æ–±—ã—Ç–∏–µ', '–Ω–æ–≤–æ—Å—Ç—å',
            '–≤—á–µ—Ä–∞', '—Å–µ–≥–æ–¥–Ω—è', '–Ω–µ–¥–∞–≤–Ω–æ', '–¥–∞–≤–Ω–æ', '–ø–æ–º–Ω—é',
            '–∑–∞–±—ã–ª', '–Ω–∞–ø–æ–º–Ω–∏', '—Ä–∞—Å—Å–∫–∞–∂—É', '–∏—Å—Ç–æ—Ä–∏—è'
        ]
        
        # 7. –í–û–ü–†–û–°–´ –û –ü–ê–ú–Ø–¢–ò
        memory_markers = [
            '–ø–æ–º–Ω–∏—à—å', '–ø–æ–º–Ω–∏', '–∑–∞–ø–æ–º–Ω–∏', '–∑–∞–±—ã–ª', '–Ω–∞–ø–æ–º–Ω–∏',
            '—Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞–ª', '–≥–æ–≤–æ—Ä–∏–ª', '—É–ø–æ–º–∏–Ω–∞–ª'
        ]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        categories = [
            personal_markers, interests_markers, emotional_markers,
            goals_markers, social_markers, events_markers, memory_markers
        ]
        
        importance_score = 0
        for category in categories:
            if any(marker in content for marker in category):
                importance_score += 1
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã
        is_detailed = len(message.content) > 80  # –î–µ—Ç–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        has_questions = '?' in message.content  # –í–æ–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        is_first_person = any(word in content for word in ['—è ', '–º–Ω–µ ', '–º–æ–π ', '–º–æ—è ', '–º–æ–∏ '])
        
        # –ö–æ–Ω—Ç–µ–∫—Å—Ç—É–∞–ª—å–Ω–∞—è –≤–∞–∂–Ω–æ—Å—Ç—å
        is_response_to_question = any(word in content for word in ['–¥–∞', '–Ω–µ—Ç', '–∫–æ–Ω–µ—á–Ω–æ', '–≤–æ–∑–º–æ–∂–Ω–æ'])
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
        final_score = importance_score
        if is_detailed: final_score += 0.5
        if has_questions: final_score += 0.3
        if is_first_person: final_score += 0.4
        if is_response_to_question: final_score += 0.2
        
        print(f"üß† –ê–Ω–∞–ª–∏–∑ –≤–∞–∂–Ω–æ—Å—Ç–∏: '{content[:30]}...' = {final_score:.1f} –±–∞–ª–ª–æ–≤")
        
        return final_score >= 0.8  # –ü–æ–Ω–∏–∂–µ–Ω –ø–æ—Ä–æ–≥ –≤–∞–∂–Ω–æ—Å—Ç–∏
    
    async def _calculate_importance(self, message: Message, context: MemoryContext) -> float:
        """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –≤–∞–∂–Ω–æ—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è (0.0 - 1.0)"""
        score = 0.0
        content = message.content.lower()
        
        # –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (+0.4)
        personal_markers = ['–º–µ–Ω—è –∑–æ–≤—É—Ç', '–º–æ–µ –∏–º—è', '—è —Ä–∞–±–æ—Ç–∞—é', '–∂–∏–≤—É –≤']
        if any(marker in content for marker in personal_markers):
            score += 0.4
        
        # –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ (+0.3)
        emotional_markers = ['–ª—é–±–ª—é', '–Ω–µ–Ω–∞–≤–∏–∂—É', '–±–æ—é—Å—å', '–º–µ—á—Ç–∞—é', '—Ä–∞—Å—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç', '—Ä–∞–¥—É–µ—Ç']
        if any(marker in content for marker in emotional_markers):
            score += 0.3
        
        # –î–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è (+0.2)
        if len(message.content) > 100:
            score += 0.2
        
        # –ü–µ—Ä–≤—ã–µ –¥–Ω–∏ –æ–±—â–µ–Ω–∏—è –≤–∞–∂–Ω–µ–µ (+0.2)
        if context.day_number <= 3:
            score += 0.2
        
        # –í–æ–ø—Ä–æ—Å—ã (+0.1)
        if '?' in message.content:
            score += 0.1
        
        return min(score, 1.0)
    
    async def _extract_topics(self, content: str) -> List[str]:
        """–ò–∑–≤–ª–µ—á—å —Ç–µ–º—ã –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        content_lower = content.lower()
        topics = []
        
        topic_keywords = {
            '—Ä–∞–±–æ—Ç–∞': ['—Ä–∞–±–æ—Ç–∞', '—Ä–∞–±–æ—Ç–∞—é', '–ø—Ä–æ—Ñ–µ—Å—Å–∏—è', '–∫–∞—Ä—å–µ—Ä–∞', '–∫–æ–ª–ª–µ–≥–∏', '–Ω–∞—á–∞–ª—å–Ω–∏–∫'],
            '—Å–µ–º—å—è': ['—Å–µ–º—å—è', '—Ä–æ–¥–∏—Ç–µ–ª–∏', '–º–∞–º–∞', '–ø–∞–ø–∞', '–±—Ä–∞—Ç', '—Å–µ—Å—Ç—Ä–∞', '–¥–µ—Ç–∏'],
            '–æ—Ç–Ω–æ—à–µ–Ω–∏—è': ['–æ—Ç–Ω–æ—à–µ–Ω–∏—è', '–ª—é–±–æ–≤—å', '–ø–∞—Ä–µ–Ω—å', '–¥–µ–≤—É—à–∫–∞', '—Å–≤–∏–¥–∞–Ω–∏–µ', '–¥—Ä—É–∑—å—è'],
            '—Ö–æ–±–±–∏': ['—Ö–æ–±–±–∏', '—É–≤–ª–µ—á–µ–Ω–∏–µ', '—Å–ø–æ—Ä—Ç', '–º—É–∑—ã–∫–∞', '—Ñ–∏–ª—å–º—ã', '–∏–≥—Ä—ã', '—á—Ç–µ–Ω–∏–µ'],
            '–∑–¥–æ—Ä–æ–≤—å–µ': ['–∑–¥–æ—Ä–æ–≤—å–µ', '–±–æ–ª–µ—é', '–≤—Ä–∞—á', '–ª–µ—á–µ–Ω–∏–µ', '—Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ'],
            '–ø–ª–∞–Ω—ã': ['–ø–ª–∞–Ω—ã', '–º–µ—á—Ç—ã', '—Ü–µ–ª–∏', '—Ö–æ—á—É', '–ø–ª–∞–Ω–∏—Ä—É—é', '–Ω–∞–¥–µ—é—Å—å'],
            '–ø—Ä–æ–±–ª–µ–º—ã': ['–ø—Ä–æ–±–ª–µ–º–∞', '–±–µ—Å–ø–æ–∫–æ–∏—Ç', '—Å—Ç—Ä–µ—Å—Å', '–ø–µ—Ä–µ–∂–∏–≤–∞—é', '—Ç—Ä—É–¥–Ω–æ—Å—Ç–∏']
        }
        
        for topic, keywords in topic_keywords.items():
            if any(keyword in content_lower for keyword in keywords):
                topics.append(topic)
        
        return topics
    
    async def _detect_emotions(self, content: str) -> List[str]:
        """–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —ç–º–æ—Ü–∏–∏ –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏"""
        content_lower = content.lower()
        emotions = []
        
        emotion_keywords = {
            '—Ä–∞–¥–æ—Å—Ç—å': ['—Ä–∞–¥–æ—Å—Ç—å', '—Å—á–∞—Å—Ç—å–µ', '–≤–µ—Å–µ–ª–æ', '–æ—Ç–ª–∏—á–Ω–æ', '–ø—Ä–µ–∫—Ä–∞—Å–Ω–æ', ':)', 'üòä', 'üòÑ'],
            '–≥—Ä—É—Å—Ç—å': ['–≥—Ä—É—Å—Ç—å', '–ø–µ—á–∞–ª—å', '—Ä–∞—Å—Å—Ç—Ä–æ–µ–Ω', '–ø–ª–æ—Ö–æ', '—É–∂–∞—Å–Ω–æ', ':(', 'üò¢', 'üò≠'],
            '–∑–ª–æ—Å—Ç—å': ['–∑–ª–æ—Å—Ç—å', '—Å–µ—Ä–¥–∏—Ç', '—Ä–∞–∑–¥—Ä–∞–∂–∞–µ—Ç', '–±–µ—Å–∏—Ç', '–Ω–µ–Ω–∞–≤–∏–∂—É', 'üò†', 'üò°'],
            '—Å—Ç—Ä–∞—Ö': ['—Å—Ç—Ä–∞—Ö', '–±–æ—é—Å—å', '–ø–µ—Ä–µ–∂–∏–≤–∞—é', '–≤–æ–ª–Ω—É—é—Å—å', '—Ç—Ä–µ–≤–æ–∂–Ω–æ', 'üò∞', 'üò±'],
            '—É–¥–∏–≤–ª–µ–Ω–∏–µ': ['—É–¥–∏–≤–ª–µ–Ω–∏–µ', '—É–¥–∏–≤–ª–µ–Ω', '–Ω–µ–≤–µ—Ä–æ—è—Ç–Ω–æ', '–≤–∞—É', '–æ–≥–æ', 'üòÆ', 'üò≤'],
            '—É—Å—Ç–∞–ª–æ—Å—Ç—å': ['—É—Å—Ç–∞–ª', '—É—Ç–æ–º–ª–µ–Ω', '–∏–∑–º—É—á–µ–Ω', '–Ω–µ—Ç —Å–∏–ª', '–≤—ã–º–æ—Ç–∞–Ω']
        }
        
        for emotion, keywords in emotion_keywords.items():
            if any(keyword in content_lower for keyword in keywords):
                emotions.append(emotion)
        
        return emotions if emotions else ['–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ']
    
    async def _search_memories(self, query: str, context: MemoryContext, limit: int = 5) -> List[Dict[str, Any]]:
        """–ü–æ–∏—Å–∫ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
        if not query:
            # –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å–∞ –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –≤–∞–∂–Ω—ã–µ
            recent_memories = [m for m in self.memories if m['importance_score'] > 0.5]
            return sorted(recent_memories, key=lambda x: x['timestamp'], reverse=True)[:limit]
        
        # –ü—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º (–≤ –±—É–¥—É—â–µ–º –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –≤–µ–∫—Ç–æ—Ä–Ω—ã–π)
        query_words = query.lower().split()
        scored_memories = []
        
        for memory in self.memories:
            score = 0
            content_lower = memory['content'].lower()
            
            # –ü–æ–∏—Å–∫ –ø–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—é
            for word in query_words:
                if word in content_lower:
                    score += 1
            
            # –ü–æ–∏—Å–∫ –ø–æ —Ç–µ–º–∞–º
            for topic in memory.get('topics', []):
                if any(word in topic for word in query_words):
                    score += 2
            
            # –ë–æ–Ω—É—Å –∑–∞ –≤–∞–∂–Ω–æ—Å—Ç—å
            score += memory['importance_score']
            
            if score > 0:
                memory_with_score = memory.copy()
                memory_with_score['search_score'] = score
                scored_memories.append(memory_with_score)
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
        scored_memories.sort(key=lambda x: x['search_score'], reverse=True)
        return scored_memories[:limit]
    
    async def get_user_profile(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–∞–º—è—Ç–∏"""
        if not self.memories:
            return {}
        
        profile = {
            'user_id': self.user_id,
            'total_messages': len(self.memories),
            'communication_days': len(set(m['day_number'] for m in self.memories)),
            'favorite_topics': [],
            'emotional_profile': {},
            'personal_info': {},
            'preferences': {}
        }
        
        # –ê–Ω–∞–ª–∏–∑ —Ç–µ–º
        all_topics = []
        for memory in self.memories:
            all_topics.extend(memory.get('topics', []))
        
        if all_topics:
            topic_counts = {}
            for topic in all_topics:
                topic_counts[topic] = topic_counts.get(topic, 0) + 1
            
            profile['favorite_topics'] = sorted(topic_counts.items(), 
                                              key=lambda x: x[1], reverse=True)[:3]
        
        # –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å
        all_emotions = []
        for memory in self.memories:
            all_emotions.extend(memory.get('emotions', []))
        
        if all_emotions:
            emotion_counts = {}
            for emotion in all_emotions:
                emotion_counts[emotion] = emotion_counts.get(emotion, 0) + 1
            
            profile['emotional_profile'] = emotion_counts
        
        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        personal_memories = [m for m in self.memories if '–º–µ–Ω—è –∑–æ–≤—É—Ç' in m['content'].lower() 
                           or '—è —Ä–∞–±–æ—Ç–∞—é' in m['content'].lower()]
        
        if personal_memories:
            profile['personal_info'] = {
                'has_name': any('–º–µ–Ω—è –∑–æ–≤—É—Ç' in m['content'].lower() for m in personal_memories),
                'has_profession': any('—è —Ä–∞–±–æ—Ç–∞—é' in m['content'].lower() for m in personal_memories),
                'details_shared': len(personal_memories)
            }
        
        return profile
    
    async def search_memory(self, query: str, limit: int = 5) -> List[Dict[str, Any]]:
        """–ü–æ–∏—Å–∫ –≤ –ø–∞–º—è—Ç–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É"""
        context = MemoryContext(user_id=self.user_id)
        return await self._search_memories(query, context, limit)
    
    async def summarize_conversation(self, messages: List[Message]) -> str:
        """–°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞"""
        if not messages:
            return "–†–∞–∑–≥–æ–≤–æ—Ä –ø—É—Å—Ç."
        
        # –ü—Ä–æ—Å—Ç–∞—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è - –±–µ—Ä–µ–º –∫–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã
        user_messages = [msg for msg in messages if msg.role == 'user']
        
        if len(user_messages) <= 3:
            return f"–ö—Ä–∞—Ç–∫–∏–π —Ä–∞–∑–≥–æ–≤–æ—Ä –∏–∑ {len(user_messages)} —Å–æ–æ–±—â–µ–Ω–∏–π."
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ–º—ã –∏ —ç–º–æ—Ü–∏–∏
        all_content = ' '.join([msg.content for msg in user_messages])
        topics = await self._extract_topics(all_content)
        emotions = await self._detect_emotions(all_content)
        
        summary_parts = [f"–†–∞–∑–≥–æ–≤–æ—Ä –∏–∑ {len(user_messages)} —Å–æ–æ–±—â–µ–Ω–∏–π"]
        
        if topics:
            summary_parts.append(f"–û—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ–º—ã: {', '.join(topics[:3])}")
        
        if emotions and emotions[0] != '–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ':
            summary_parts.append(f"–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç–æ–Ω: {emotions[0]}")
        
        return ". ".join(summary_parts) + "."
    
    async def clear_memory(self) -> None:
        """–û—á–∏—Å—Ç–∏—Ç—å –ø–∞–º—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        self.memories.clear()
        self.embeddings_cache.clear() 