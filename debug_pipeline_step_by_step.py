#!/usr/bin/env python3

import os
import sys
import asyncio
import traceback
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
PROJECT_ROOT = os.path.dirname(os.path.abspath(__file__))
sys.path.insert(0, PROJECT_ROOT)

async def test_pipeline_step_by_step():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞–π–ø–ª–∞–π–Ω –ø–æ—à–∞–≥–æ–≤–æ –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã"""
    
    print("üîç –ü–û–®–ê–ì–û–í–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê PIPELINE")
    print("=" * 50)
    
    try:
        print("üì¶ –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º pipeline...")
        from app.graph.pipeline import AgathaPipeline
        print("‚úÖ Pipeline –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
        
        print("\nüèóÔ∏è –°–æ–∑–¥–∞–µ–º pipeline...")
        pipeline = AgathaPipeline()
        print("‚úÖ Pipeline —Å–æ–∑–¥–∞–Ω")
        print(f"   –ì—Ä–∞—Ñ: {type(pipeline.graph)}")
        
        print("\nüìù –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ...")
        user_id = "debug_user"
        messages = [{"role": "user", "content": "–ø—Ä–∏–≤–µ—Ç"}]
        meta_time = "2025-09-02T14:07:00Z"
        
        print(f"   User ID: {user_id}")
        print(f"   Messages: {messages}")
        print(f"   Meta time: {meta_time}")
        
        print("\nüöÄ –ó–∞–ø—É—Å–∫–∞–µ–º process_chat...")
        
        try:
            result = await pipeline.process_chat(user_id, messages, meta_time)
            print("‚úÖ Pipeline –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
            print(f"üìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ process_chat: {e}")
            print(f"   –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e)}")
            traceback.print_exc()
            
            # –ü–æ–ø—Ä–æ–±—É–µ–º –≤—ã–ø–æ–ª–Ω–∏—Ç—å –≥—Ä–∞—Ñ –Ω–∞–ø—Ä—è–º—É—é
            print("\nüîß –ü–æ–ø—Ä–æ–±—É–µ–º –≤—ã–ø–æ–ª–Ω–∏—Ç—å –≥—Ä–∞—Ñ –Ω–∞–ø—Ä—è–º—É—é...")
            
            try:
                # –°–æ–∑–¥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–∞–∫ –≤ process_chat
                state = {
                    "user_id": user_id,
                    "messages": messages,
                    "meta_time": datetime.fromisoformat(meta_time.replace('Z', '+00:00')),
                    "normalized_input": "",
                    "memory_context": "",
                    "day_prompt": "",
                    "stage_prompt": "",
                    "behavior_prompt": "",
                    "final_prompt": "",
                    "llm_response": "",
                    "processed_response": {},
                    "current_strategy": "caring",
                    "behavioral_analysis": {},
                    "strategy_confidence": 0.0,
                    "day_number": 1,
                    "stage_number": 1,
                    "question_count": 0,
                    "processing_start": datetime.utcnow()
                }
                
                print(f"üìä –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {state}")
                
                # –í—ã–ø–æ–ª–Ω—è–µ–º –≥—Ä–∞—Ñ
                result = await pipeline.graph.ainvoke(state)
                print("‚úÖ –ì—Ä–∞—Ñ –≤—ã–ø–æ–ª–Ω–µ–Ω –Ω–∞–ø—Ä—è–º—É—é!")
                print(f"üìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
                
            except Exception as e2:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø—Ä—è–º–æ–º –≤—ã–∑–æ–≤–µ –≥—Ä–∞—Ñ–∞: {e2}")
                print(f"   –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e2)}")
                traceback.print_exc()
                
                # –ü–æ–ø—Ä–æ–±—É–µ–º –≤—ã–ø–æ–ª–Ω–∏—Ç—å —É–∑–ª—ã –ø–æ –æ–¥–Ω–æ–º—É
                print("\nüîß –ü–æ–ø—Ä–æ–±—É–µ–º –≤—ã–ø–æ–ª–Ω–∏—Ç—å —É–∑–ª—ã –ø–æ –æ–¥–Ω–æ–º—É...")
                
                try:
                    # –£–∑–µ–ª 1: ingest_input
                    print("   üöÄ –£–∑–µ–ª 1: ingest_input")
                    state = await pipeline._ingest_input(state)
                    print(f"      ‚úÖ normalized_input: {state['normalized_input']}")
                    
                    # –£–∑–µ–ª 2: short_memory
                    print("   üß† –£–∑–µ–ª 2: short_memory")
                    state = await pipeline._short_memory(state)
                    print(f"      ‚úÖ memory_context: {len(state.get('memory_context', ''))} —Å–∏–º–≤–æ–ª–æ–≤")
                    
                    # –£–∑–µ–ª 3: day_policy
                    print("   üìÖ –£–∑–µ–ª 3: day_policy")
                    state = await pipeline._day_policy(state)
                    print(f"      ‚úÖ day_prompt: {len(state.get('day_prompt', ''))} —Å–∏–º–≤–æ–ª–æ–≤")
                    
                    # –£–∑–µ–ª 4: behavior_policy
                    print("   üé≠ –£–∑–µ–ª 4: behavior_policy")
                    state = await pipeline._behavior_policy(state)
                    print(f"      ‚úÖ behavior_prompt: {len(state.get('behavior_prompt', ''))} —Å–∏–º–≤–æ–ª–æ–≤")
                    
                    # –£–∑–µ–ª 5: compose_prompt
                    print("   ‚úçÔ∏è –£–∑–µ–ª 5: compose_prompt")
                    state = await pipeline._compose_prompt(state)
                    print(f"      ‚úÖ final_prompt: {len(state.get('final_prompt', ''))} —Å–∏–º–≤–æ–ª–æ–≤")
                    
                    # –£–∑–µ–ª 6: llm_call
                    print("   ü§ñ –£–∑–µ–ª 6: llm_call")
                    state = await pipeline._llm_call(state)
                    print(f"      ‚úÖ llm_response: {len(state.get('llm_response', ''))} —Å–∏–º–≤–æ–ª–æ–≤")
                    
                    # –£–∑–µ–ª 7: postprocess
                    print("   üîß –£–∑–µ–ª 7: postprocess")
                    state = await pipeline._postprocess(state)
                    print(f"      ‚úÖ processed_response: {state.get('processed_response', {})}")
                    
                    # –£–∑–µ–ª 8: persist
                    print("   üíæ –£–∑–µ–ª 8: persist")
                    state = await pipeline._persist(state)
                    print(f"      ‚úÖ –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ")
                    
                    print("\nüéâ –í—Å–µ —É–∑–ª—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
                    
                except Exception as e3:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —É–∑–ª–µ: {e3}")
                    print(f"   –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e3)}")
                    traceback.print_exc()
    
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        print(f"   –¢–∏–ø –æ—à–∏–±–∫–∏: {type(e)}")
        traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(test_pipeline_step_by_step())
