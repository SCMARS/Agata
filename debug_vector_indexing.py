#!/usr/bin/env python3

import requests
import time

def debug_vector_indexing():
    """–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏ –≤ –≤–µ–∫—Ç–æ—Ä–Ω—É—é –ë–î"""
    
    print("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –í–ï–ö–¢–û–†–ù–û–ô –ò–ù–î–ï–ö–°–ê–¶–ò–ò")
    print("=" * 50)
    
    user_id = "1132821710"
    
    # –®–∞–≥ 1: –û—á–∏—Å—Ç–∫–∞
    print("üßπ –®–∞–≥ 1: –û—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏")
    try:
        response = requests.post(f"http://localhost:8000/api/memory/{user_id}/clear", timeout=10)
        print(f"   –û—á–∏—Å—Ç–∫–∞: {response.status_code}")
    except Exception as e:
        print(f"   –û—à–∏–±–∫–∞: {e}")
    
    # –®–∞–≥ 2: –î–æ–±–∞–≤–ª—è–µ–º –û–î–ò–ù –≤–∞–∂–Ω—ã–π —Ñ–∞–∫—Ç
    print("\nüìù –®–∞–≥ 2: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –û–î–ù–û–ì–û –≤–∞–∂–Ω–æ–≥–æ —Ñ–∞–∫—Ç–∞")
    
    test_fact = "–ú–µ–Ω—è –∑–æ–≤—É—Ç –ì–ª–µ–± –£—Ö–æ–≤—Å–∫–∏–π, —è Senior Python Developer, —É–≤–ª–µ–∫–∞—é—Å—å –ø–∞—É—ç—Ä–ª–∏—Ñ—Ç–∏–Ω–≥–æ–º –∏ –∏–≥—Ä–∞—é –≤ —à–∞—Ö–º–∞—Ç—ã"
    
    try:
        memory_data = {
            'role': 'user',
            'content': test_fact,
            'metadata': {
                'source': 'debug_test',
                'user_id': user_id,
                'timestamp': '2025-09-03T20:00:00Z',
                'importance': 'high',
                'category': 'personal_info'
            },
            'conversation_id': f'debug_test_{user_id}',
            'day_number': 1
        }
        
        response = requests.post(
            f"http://localhost:8000/api/memory/{user_id}/add",
            json=memory_data,
            timeout=15
        )
        
        if response.status_code == 200:
            print(f"   ‚úÖ –§–∞–∫—Ç –¥–æ–±–∞–≤–ª–µ–Ω: {test_fact}")
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: {response.status_code}")
            print(f"   –û—Ç–≤–µ—Ç: {response.text}")
            
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
    
    # –®–∞–≥ 3: –ñ–¥–µ–º –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏
    print(f"\n‚è≥ –®–∞–≥ 3: –ñ–¥–µ–º –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏ (10 —Å–µ–∫—É–Ω–¥)")
    time.sleep(10)
    
    # –®–∞–≥ 4: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –ø–æ–∏—Å–∫–∞
    print(f"\nüîç –®–∞–≥ 4: –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–∞–∑–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –ø–æ–∏—Å–∫–∞")
    
    search_queries = [
        "–£—Ö–æ–≤—Å–∫–∏–π",
        "Senior Python Developer", 
        "–ø–∞—É—ç—Ä–ª–∏—Ñ—Ç–∏–Ω–≥",
        "—à–∞—Ö–º–∞—Ç—ã",
        "–ì–ª–µ–± –£—Ö–æ–≤—Å–∫–∏–π Senior",
        "Python Developer –ø–∞—É—ç—Ä–ª–∏—Ñ—Ç–∏–Ω–≥",
        "–ª–∏—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    ]
    
    for i, query in enumerate(search_queries):
        try:
            search_data = {
                'query': query,
                'max_results': 5,
                'levels': ['long_term']
            }
            
            response = requests.post(
                f"http://localhost:8000/api/memory/{user_id}/search",
                json=search_data,
                timeout=15
            )
            
            if response.status_code == 200:
                result = response.json()
                found_count = result.get('total_found', 0)
                
                if found_count > 0:
                    results = result.get('results', [])
                    best_result = results[0]
                    content = best_result.get('content', '')
                    score = best_result.get('relevance_score', 0)
                    print(f"   ‚úÖ '{query}' ‚Üí {found_count} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –ª—É—á—à–∏–π: {content[:60]}... (score: {score:.3f})")
                else:
                    print(f"   ‚ùå '{query}' ‚Üí –ù–ï –ù–ê–ô–î–ï–ù–û")
            else:
                print(f"   ‚ùå '{query}' ‚Üí –û—à–∏–±–∫–∞: {response.status_code}")
                
        except Exception as e:
            print(f"   ‚ùå '{query}' ‚Üí –û—à–∏–±–∫–∞: {e}")
    
    # –®–∞–≥ 5: –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ –ò–ò
    print(f"\nü§ñ –®–∞–≥ 5: –¢–µ—Å—Ç —á–µ—Ä–µ–∑ –ò–ò")
    try:
        chat_data = {
            'user_id': user_id,
            'messages': [{'role': 'user', 'content': '–ö–∞–∫ –º–µ–Ω—è –∑–æ–≤—É—Ç –∏ –∫–µ–º —è —Ä–∞–±–æ—Ç–∞—é?'}],
            'metaTime': "2025-09-03T20:30:00Z"
        }
        
        response = requests.post(
            "http://localhost:8000/api/chat",
            json=chat_data,
            timeout=30
        )
        
        if response.status_code == 200:
            result = response.json()
            parts = result.get('parts', [])
            
            if parts:
                ai_response = ' '.join(parts)
                print(f"   ü§ñ –û–¢–í–ï–¢: {ai_response}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—à–µ–ª –ª–∏ –ò–ò –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                found_keywords = []
                if "—É—Ö–æ–≤—Å–∫–∏–π" in ai_response.lower():
                    found_keywords.append("—Ñ–∞–º–∏–ª–∏—è")
                if "senior" in ai_response.lower():
                    found_keywords.append("–¥–æ–ª–∂–Ω–æ—Å—Ç—å")
                if "python" in ai_response.lower():
                    found_keywords.append("—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è")
                if "–ø–∞—É—ç—Ä–ª–∏—Ñ—Ç–∏–Ω–≥" in ai_response.lower():
                    found_keywords.append("—Å–ø–æ—Ä—Ç")
                if "—à–∞—Ö–º–∞—Ç" in ai_response.lower():
                    found_keywords.append("—Ö–æ–±–±–∏")
                
                if found_keywords:
                    print(f"   ‚úÖ –ò–ò –Ω–∞—à–µ–ª: {', '.join(found_keywords)}")
                else:
                    print(f"   ‚ùå –ò–ò –ù–ï –Ω–∞—à–µ–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –ë–î")
            else:
                print("   ‚ùå –ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç –ò–ò")
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ API: {response.status_code}")
            
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
    
    print(f"\n" + "=" * 50)
    print("–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê")
    
    if found_keywords and len(found_keywords) >= 3:
        print("‚úÖ –í–µ–∫—Ç–æ—Ä–Ω–∞—è –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç")
    else:
        print("‚ùå –ü–†–û–ë–õ–ï–ú–ê: –í–µ–∫—Ç–æ—Ä–Ω–∞—è –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è –ù–ï —Ä–∞–±–æ—Ç–∞–µ—Ç")
        print("üîß –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
        print("   - –î–∞–Ω–Ω—ã–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ –≤–µ–∫—Ç–æ—Ä–Ω—É—é –ë–î")
        print("   - –ü–æ–∏—Å–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ") 
        print("   - MemoryAdapter –Ω–µ –ø–µ—Ä–µ–¥–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ –ø—Ä–æ–º–ø—Ç")

if __name__ == "__main__":
    debug_vector_indexing()
