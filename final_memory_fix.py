#!/usr/bin/env python3

import requests
import time

def final_memory_fix():
    """–§–∏–Ω–∞–ª—å–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏"""
    
    print("üîß –§–ò–ù–ê–õ–¨–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï –ü–ê–ú–Ø–¢–ò")
    print("=" * 50)
    
    user_id = "1132821710"
    
    # –®–∞–≥ 1: –û—á–∏—Å—Ç–∫–∞
    print("üßπ –®–∞–≥ 1: –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏")
    try:
        response = requests.post(f"http://localhost:8000/api/memory/{user_id}/clear", timeout=10)
        print(f"   –û—á–∏—Å—Ç–∫–∞: {response.status_code}")
    except Exception as e:
        print(f"   –û—à–∏–±–∫–∞: {e}")
    
    # –®–∞–≥ 2: –î–æ–±–∞–≤–ª—è–µ–º –û–ß–ï–ù–¨ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    print("\nüìù –®–∞–≥ 2: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ö–û–ù–ö–†–ï–¢–ù–û–ô –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")
    
    specific_info = [
        "–ì–ª–µ–± –ª—é–±–∏—Ç –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ Python",
        "–ì–ª–µ–± —É–≤–ª–µ–∫–∞–µ—Ç—Å—è –º–∞—à–∏–Ω–Ω—ã–º –æ–±—É—á–µ–Ω–∏–µ–º –∏ –ò–ò", 
        "–ì–ª–µ–± –∑–∞–Ω–∏–º–∞–µ—Ç—Å—è —Å–ø–æ—Ä—Ç–æ–º –≤ —Å–ø–æ—Ä—Ç–∑–∞–ª–µ",
        "–ì–ª–µ–± —á–∏—Ç–∞–µ—Ç –∫–Ω–∏–≥–∏ –ø–æ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º",
        "–ì–ª–µ–± —Ä–∞–±–æ—Ç–∞–µ—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º"
    ]
    
    for info in specific_info:
        try:
            memory_data = {
                'role': 'user',
                'content': info,
                'metadata': {
                    'source': 'final_fix',
                    'user_id': user_id,
                    'timestamp': '2025-09-02T14:07:00Z',
                    'importance': 'high',
                    'category': 'personal_info'
                },
                'conversation_id': f'final_fix_{user_id}',
                'day_number': 1
            }
            
            response = requests.post(
                f"http://localhost:8000/api/memory/{user_id}/add",
                json=memory_data,
                timeout=15
            )
            
            if response.status_code == 200:
                print(f"   ‚úÖ {info}")
            else:
                print(f"   ‚ùå {info}: {response.status_code}")
                
        except Exception as e:
            print(f"   ‚ùå {info}: {e}")
    
    # –®–∞–≥ 3: –ñ–¥–µ–º –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏
    print("\n‚è≥ –®–∞–≥ 3: –ñ–¥–µ–º –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏ (5 —Å–µ–∫—É–Ω–¥)")
    time.sleep(5)
    
    # –®–∞–≥ 4: –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–∏—Å–∫
    print("\nüîç –®–∞–≥ 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ –ø–∞–º—è—Ç–∏")
    try:
        search_data = {
            'query': '—á—Ç–æ –ª—é–±–∏—Ç –ì–ª–µ–± –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–æ—Ä—Ç',
            'max_results': 10,
            'levels': ['short_term', 'long_term']
        }
        
        response = requests.post(
            f"http://localhost:8000/api/memory/{user_id}/search",
            json=search_data,
            timeout=15
        )
        
        if response.status_code == 200:
            result = response.json()
            found_count = result.get('total_found', 0)
            print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–æ: {found_count} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
            
            if found_count > 0:
                results = result.get('results', [])
                for i, item in enumerate(results[:5]):
                    content = item.get('content', '')
                    score = item.get('relevance_score', 0)
                    print(f"      {i+1}. {content} (score: {score:.2f})")
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {response.status_code}")
            
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
    
    # –®–∞–≥ 5: –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å –ü–†–Ø–ú–´–ú –≤–æ–ø—Ä–æ—Å–æ–º
    print("\nü§ñ –®–∞–≥ 5: –¢–µ—Å—Ç —Å –ø—Ä—è–º—ã–º –≤–æ–ø—Ä–æ—Å–æ–º")
    try:
        chat_data = {
            'user_id': user_id,
            'messages': [{'role': 'user', 'content': '–ß—Ç–æ —Ç—ã –∑–Ω–∞–µ—à—å –æ –º–æ–∏—Ö —É–≤–ª–µ—á–µ–Ω–∏—è—Ö? –ß–µ–º —è –ª—é–±–ª—é –∑–∞–Ω–∏–º–∞—Ç—å—Å—è?'}],
            'metaTime': "2025-09-02T14:07:00Z"
        }
        
        print("   ‚ùì –í–æ–ø—Ä–æ—Å: '–ß—Ç–æ —Ç—ã –∑–Ω–∞–µ—à—å –æ –º–æ–∏—Ö —É–≤–ª–µ—á–µ–Ω–∏—è—Ö? –ß–µ–º —è –ª—é–±–ª—é –∑–∞–Ω–∏–º–∞—Ç—å—Å—è?'")
        
        response = requests.post(
            "http://localhost:8000/api/chat",
            json=chat_data,
            timeout=45
        )
        
        if response.status_code == 200:
            result = response.json()
            parts = result.get('parts', [])
            
            if parts:
                ai_response = ' '.join(parts)
                print(f"\n   ü§ñ –ü–û–õ–ù–´–ô –û–¢–í–ï–¢:")
                print(f"   {ai_response}")
                
                # –î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
                keywords_found = []
                keywords_check = {
                    "–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä": "–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ",
                    "python": "Python", 
                    "–º–∞—à–∏–Ω–Ω": "–º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ",
                    "–ò–ò": "–ò–ò",
                    "—Å–ø–æ—Ä—Ç": "—Å–ø–æ—Ä—Ç",
                    "—Ç–µ—Ö–Ω–æ–ª–æ–≥": "—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏",
                    "—Ä–∞–∑—Ä–∞–±–æ—Ç": "—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞"
                }
                
                for key, name in keywords_check.items():
                    if key.lower() in ai_response.lower():
                        keywords_found.append(name)
                
                print(f"\n   üìä –ê–ù–ê–õ–ò–ó:")
                if keywords_found:
                    print(f"   ‚úÖ –ù–ê–ô–î–ï–ù–ù–´–ï –£–í–õ–ï–ß–ï–ù–ò–Ø: {', '.join(keywords_found)}")
                else:
                    print(f"   ‚ùå –ù–ï –ù–ê–ô–î–ï–ù–û –£–í–õ–ï–ß–ï–ù–ò–ô")
                    
                if "–Ω–µ –∑–Ω–∞—é" in ai_response.lower() or "–Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏" in ai_response.lower():
                    print(f"   ‚ùå –ò–ò –í–°–ï –ï–©–ï –ì–û–í–û–†–ò–¢ '–ù–ï –ó–ù–ê–Æ'")
                else:
                    print(f"   ‚úÖ –ò–ò –ù–ï –ì–û–í–û–†–ò–¢ '–ù–ï –ó–ù–ê–Æ'")
                    
                if len(keywords_found) >= 3:
                    print(f"   üéâ –£–°–ü–ï–•! –ò–ò –ò–°–ü–û–õ–¨–ó–£–ï–¢ –°–û–•–†–ê–ù–ï–ù–ù–£–Æ –ò–ù–§–û–†–ú–ê–¶–ò–Æ")
                else:
                    print(f"   ‚ùå –ü–†–û–ë–õ–ï–ú–ê: –ò–ò –ù–ï –ò–°–ü–û–õ–¨–ó–£–ï–¢ –ü–ê–ú–Ø–¢–¨ –ü–û–õ–ù–û–°–¢–¨–Æ")
            else:
                print("   ‚ùå –ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç –ò–ò")
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ API: {response.status_code}")
            print(f"   –û—Ç–≤–µ—Ç: {response.text}")
            
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
    
    print("\n" + "=" * 50)
    if keywords_found and len(keywords_found) >= 3:
        print("üéâ –ü–ê–ú–Ø–¢–¨ –†–ê–ë–û–¢–ê–ï–¢ –ü–†–ê–í–ò–õ–¨–ù–û!")
        print("‚úÖ Telegram –±–æ—Ç —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é")
    else:
        print("‚ùå –ü–ê–ú–Ø–¢–¨ –í–°–ï –ï–©–ï –ù–ï –†–ê–ë–û–¢–ê–ï–¢")
        print("üîß –ù—É–∂–Ω—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è")

if __name__ == "__main__":
    final_memory_fix()
