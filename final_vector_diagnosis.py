#!/usr/bin/env python3

import requests
import time

def final_vector_diagnosis():
    """–§–∏–Ω–∞–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –≤—Å–µ–π —Ü–µ–ø–æ—á–∫–∏ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –ø–∞–º—è—Ç–∏"""
    
    print("üîç –§–ò–ù–ê–õ–¨–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –í–ï–ö–¢–û–†–ù–û–ô –ü–ê–ú–Ø–¢–ò")
    print("=" * 60)
    
    user_id = "1132821710"
    
    # –®–∞–≥ 1: –û—á–∏—Å—Ç–∫–∞
    print("üßπ –®–∞–≥ 1: –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞")
    try:
        response = requests.post(f"http://localhost:8000/api/memory/{user_id}/clear", timeout=10)
        print(f"   –û—á–∏—Å—Ç–∫–∞: {response.status_code}")
    except Exception as e:
        print(f"   –û—à–∏–±–∫–∞: {e}")
    
    # –®–∞–≥ 2: –î–æ–±–∞–≤–ª—è–µ–º –û–î–ò–ù –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ñ–∞–∫—Ç
    print("\nüìù –®–∞–≥ 2: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –û–î–ù–û–ì–û –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ñ–∞–∫—Ç–∞")
    
    test_fact = "–ú–µ–Ω—è –∑–æ–≤—É—Ç –ì–ª–µ–± –£—Ö–æ–≤—Å–∫–∏–π, —è Senior Python Developer –≤ –∫–æ–º–ø–∞–Ω–∏–∏ TechCorp, —É–≤–ª–µ–∫–∞—é—Å—å –ø–∞—É—ç—Ä–ª–∏—Ñ—Ç–∏–Ω–≥–æ–º"
    
    try:
        memory_data = {
            'role': 'user',
            'content': test_fact,
            'metadata': {
                'source': 'final_diagnosis',
                'user_id': user_id,
                'timestamp': '2025-09-03T21:10:00Z',
                'importance': 'high',
                'category': 'personal_info'
            },
            'conversation_id': f'final_diagnosis_{user_id}',
            'day_number': 1
        }
        
        response = requests.post(
            f"http://localhost:8000/api/memory/{user_id}/add",
            json=memory_data,
            timeout=15
        )
        
        if response.status_code == 200:
            print(f"   ‚úÖ –§–∞–∫—Ç –¥–æ–±–∞–≤–ª–µ–Ω: {test_fact}")
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {response.status_code}")
            
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
    
    # –®–∞–≥ 3: –ñ–¥–µ–º
    print(f"\n‚è≥ –®–∞–≥ 3: –ñ–¥–µ–º –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏ (5 —Å–µ–∫—É–Ω–¥)")
    time.sleep(5)
    
    # –®–∞–≥ 4: –ü—Ä—è–º–æ–π –ø–æ–∏—Å–∫ –≤ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –ë–î
    print(f"\nüîç –®–∞–≥ 4: –ü—Ä—è–º–æ–π –ø–æ–∏—Å–∫ –≤ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –ë–î")
    try:
        search_data = {
            'query': '–ì–ª–µ–± –£—Ö–æ–≤—Å–∫–∏–π Senior Python Developer TechCorp –ø–∞—É—ç—Ä–ª–∏—Ñ—Ç–∏–Ω–≥',
            'max_results': 5,
            'levels': ['long_term']
        }
        
        response = requests.post(
            f"http://localhost:8000/api/memory/{user_id}/search",
            json=search_data,
            timeout=15
        )
        
        if response.status_code == 200:
            result = response.json()
            found_count = result.get('total_found', 0)
            print(f"   ‚úÖ –í–µ–∫—Ç–æ—Ä–Ω–∞—è –ë–î –Ω–∞—à–ª–∞: {found_count} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
            
            if found_count > 0:
                results = result.get('results', [])
                for i, item in enumerate(results):
                    content = item.get('content', '')
                    score = item.get('relevance_score', 0)
                    print(f"      {i+1}. {content} (score: {score:.3f})")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
                    if "—É—Ö–æ–≤—Å–∫–∏–π" in content.lower() and "senior" in content.lower():
                        print(f"         ‚úÖ –°–û–î–ï–†–ñ–ò–¢: –ø–æ–ª–Ω–æ–µ –∏–º—è –∏ –¥–æ–ª–∂–Ω–æ—Å—Ç—å")
                    elif "—É—Ö–æ–≤—Å–∫–∏–π" in content.lower():
                        print(f"         ‚ö†Ô∏è –°–û–î–ï–†–ñ–ò–¢: —Ç–æ–ª—å–∫–æ –ø–æ–ª–Ω–æ–µ –∏–º—è")
                    elif "senior" in content.lower():
                        print(f"         ‚ö†Ô∏è –°–û–î–ï–†–ñ–ò–¢: —Ç–æ–ª—å–∫–æ –¥–æ–ª–∂–Ω–æ—Å—Ç—å")
                    else:
                        print(f"         ‚ùå –ù–ï –°–û–î–ï–†–ñ–ò–¢: –Ω–∏ –ø–æ–ª–Ω–æ–µ –∏–º—è, –Ω–∏ –¥–æ–ª–∂–Ω–æ—Å—Ç—å")
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {response.status_code}")
            
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
    
    # –®–∞–≥ 5: –¢–µ—Å—Ç —á–µ—Ä–µ–∑ –ò–ò —Å –ü–†–Ø–ú–´–ú –≤–æ–ø—Ä–æ—Å–æ–º
    print(f"\nü§ñ –®–∞–≥ 5: –¢–µ—Å—Ç —á–µ—Ä–µ–∑ –ò–ò —Å –ü–†–Ø–ú–´–ú –≤–æ–ø—Ä–æ—Å–æ–º")
    try:
        chat_data = {
            'user_id': user_id,
            'messages': [{'role': 'user', 'content': '–ù–∞–∑–æ–≤–∏ –º–æ–µ –ø–æ–ª–Ω–æ–µ –∏–º—è –∏ —Ç–æ—á–Ω—É—é –¥–æ–ª–∂–Ω–æ—Å—Ç—å'}],
            'metaTime': "2025-09-03T21:15:00Z"
        }
        
        print("   ‚ùì –í–û–ü–†–û–°: '–ù–∞–∑–æ–≤–∏ –º–æ–µ –ø–æ–ª–Ω–æ–µ –∏–º—è –∏ —Ç–æ—á–Ω—É—é –¥–æ–ª–∂–Ω–æ—Å—Ç—å'")
        
        response = requests.post(
            "http://localhost:8000/api/chat",
            json=chat_data,
            timeout=30
        )
        
        if response.status_code == 200:
            result = response.json()
            parts = result.get('parts', [])
            
            if parts:
                ai_response = ' '.join(parts)
                print(f"\n   ü§ñ –û–¢–í–ï–¢ –ò–ò:")
                print(f"   {ai_response}")
                
                # –¢–û–ß–ù–ê–Ø –ø—Ä–æ–≤–µ—Ä–∫–∞
                has_full_name = "—É—Ö–æ–≤—Å–∫–∏–π" in ai_response.lower()
                has_senior_title = "senior" in ai_response.lower()
                has_company = "techcorp" in ai_response.lower()
                has_sport = "–ø–∞—É—ç—Ä–ª–∏—Ñ—Ç–∏–Ω–≥" in ai_response.lower()
                
                print(f"\n   üìä –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó:")
                print(f"   {'‚úÖ' if has_full_name else '‚ùå'} –ü–æ–ª–Ω–æ–µ –∏–º—è (–£—Ö–æ–≤—Å–∫–∏–π): {has_full_name}")
                print(f"   {'‚úÖ' if has_senior_title else '‚ùå'} –î–æ–ª–∂–Ω–æ—Å—Ç—å (Senior): {has_senior_title}")
                print(f"   {'‚úÖ' if has_company else '‚ùå'} –ö–æ–º–ø–∞–Ω–∏—è (TechCorp): {has_company}")
                print(f"   {'‚úÖ' if has_sport else '‚ùå'} –•–æ–±–±–∏ (–ø–∞—É—ç—Ä–ª–∏—Ñ—Ç–∏–Ω–≥): {has_sport}")
                
                success_count = sum([has_full_name, has_senior_title, has_company, has_sport])
                
                if success_count >= 3:
                    print(f"   üéâ –£–°–ü–ï–•: –ò–ò –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –≤–µ–∫—Ç–æ—Ä–Ω—É—é –ø–∞–º—è—Ç—å ({success_count}/4)")
                elif success_count >= 1:
                    print(f"   ‚ö†Ô∏è –ß–ê–°–¢–ò–ß–ù–´–ô –£–°–ü–ï–•: ({success_count}/4)")
                else:
                    print(f"   ‚ùå –ü–†–û–í–ê–õ: –ò–ò –ù–ï –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –≤–µ–∫—Ç–æ—Ä–Ω—É—é –ø–∞–º—è—Ç—å (0/4)")
                    
            else:
                print("   ‚ùå –ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç –ò–ò")
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ API: {response.status_code}")
            
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
    
    # –®–∞–≥ 6: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è –≤ MemoryAdapter
    print(f"\nüîß –®–∞–≥ 6: –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ MemoryAdapter")
    print("   –°–º–æ—Ç—Ä–∏–º –ª–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏...")
    
    print(f"\n" + "=" * 60)
    
    if success_count >= 3:
        print("üéâ –í–ï–ö–¢–û–†–ù–ê–Ø –ü–ê–ú–Ø–¢–¨ –†–ê–ë–û–¢–ê–ï–¢ –ü–û–õ–ù–û–°–¢–¨–Æ!")
        print("‚úÖ –ò–ò –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–π –ø–∞–º—è—Ç–∏")
    elif success_count >= 1:
        print("‚ö†Ô∏è –í–ï–ö–¢–û–†–ù–ê–Ø –ü–ê–ú–Ø–¢–¨ –†–ê–ë–û–¢–ê–ï–¢ –ß–ê–°–¢–ò–ß–ù–û")
        print("üîß –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç–µ—Ä—è—é—Ç—Å—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –ø–µ—Ä–µ–¥–∞—á–∏")
    else:
        print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê –° –í–ï–ö–¢–û–†–ù–û–ô –ü–ê–ú–Ø–¢–¨–Æ")
        print("üîß –ò–ò –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—É—é –ø–∞–º—è—Ç—å")
        print("üîß –ü—Ä–æ–±–ª–µ–º–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤:")
        print("   - MemoryAdapter –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç –¥–∞–Ω–Ω—ã–µ")
        print("   - –î–∞–Ω–Ω—ã–µ –Ω–µ –ø–µ—Ä–µ–¥–∞—é—Ç—Å—è –≤ –ø—Ä–æ–º–ø—Ç")
        print("   - –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç –ø–∞–º—è—Ç—å")

if __name__ == "__main__":
    final_vector_diagnosis()
