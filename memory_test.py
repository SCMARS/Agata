#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –ø–∞–º—è—Ç–∏ - –ø—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
"""
import sys
import os
import asyncio
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append('/Users/glebuhovskij/Agata')

from app.graph.pipeline import AgathaPipeline

class MemoryTester:
    def __init__(self):
        self.pipeline = AgathaPipeline()
        self.user_id = "test_user_memory"
        self.conversation_history = []
    
    async def send_message(self, message: str) -> str:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç"""
        print(f"\nüë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é
        user_message = {
            "role": "user",
            "content": message,
            "timestamp": datetime.utcnow().isoformat()
        }
        self.conversation_history.append(user_message)
        
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –ø–∞–π–ø–ª–∞–π–Ω
            response = await self.pipeline.process_chat(
                user_id=self.user_id,
                messages=self.conversation_history,
                meta_time=datetime.utcnow().isoformat()
            )
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
            if isinstance(response, dict):
                if "parts" in response:
                    response_text = " ".join(response["parts"])
                elif "text" in response:
                    response_text = response["text"]
                elif "content" in response:
                    response_text = response["content"]
                else:
                    response_text = str(response)
            else:
                response_text = str(response)
            
            print(f"ü§ñ –ê–≥–∞—Ç–∞: {response_text}")
            
            # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é
            assistant_message = {
                "role": "assistant", 
                "content": response_text,
                "timestamp": datetime.utcnow().isoformat()
            }
            self.conversation_history.append(assistant_message)
            
            return response_text
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            import traceback
            print(f"Traceback: {traceback.format_exc()}")
            return f"–û—à–∏–±–∫–∞: {e}"
    
    async def test_memory_sequence(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è"""
        print("üß† –¢–ï–°–¢ –°–ò–°–¢–ï–ú–´ –ü–ê–ú–Ø–¢–ò")
        print("=" * 50)
        
        # –≠—Ç–∞–ø 1: –ó–Ω–∞–∫–æ–º—Å—Ç–≤–æ –∏ —Å–±–æ—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        print("\nüìù –≠–¢–ê–ü 1: –°–±–æ—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")
        await self.send_message("–ü—Ä–∏–≤–µ—Ç! –ú–µ–Ω—è –∑–æ–≤—É—Ç –ê–Ω–¥—Ä–µ–π")
        await asyncio.sleep(1)
        
        await self.send_message("–ú–Ω–µ 28 –ª–µ—Ç")
        await asyncio.sleep(1)
        
        await self.send_message("–Ø –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç")
        await asyncio.sleep(1)
        
        await self.send_message("–ú–æ—è –ª—é–±–∏–º–∞—è –µ–¥–∞ - –ø–∏—Ü—Ü–∞")
        await asyncio.sleep(1)
        
        # –≠—Ç–∞–ø 2: –û—Ç–≤–ª–µ–∫–∞—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã (3-4 –≤–æ–ø—Ä–æ—Å–∞)
        print("\nüé≤ –≠–¢–ê–ü 2: –û—Ç–≤–ª–µ–∫–∞—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã")
        await self.send_message("–ö–∞–∫–∞—è —Å–µ–≥–æ–¥–Ω—è –ø–æ–≥–æ–¥–∞?")
        await asyncio.sleep(1)
        
        await self.send_message("–†–∞—Å—Å–∫–∞–∂–∏ –º–Ω–µ —à—É—Ç–∫—É")
        await asyncio.sleep(1)
        
        await self.send_message("–ß—Ç–æ —Ç—ã –¥—É–º–∞–µ—à—å –æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–∏?")
        await asyncio.sleep(1)
        
        await self.send_message("–ö–∞–∫–∏–µ —É —Ç–µ–±—è –ø–ª–∞–Ω—ã –Ω–∞ –±—É–¥—É—â–µ–µ?")
        await asyncio.sleep(1)
        
        # –≠—Ç–∞–ø 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–º—è—Ç–∏
        print("\nüîç –≠–¢–ê–ü 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–º—è—Ç–∏")
        memory_questions = [
            "–ö–∞–∫ –º–µ–Ω—è –∑–æ–≤—É—Ç?",
            "–°–∫–æ–ª—å–∫–æ –º–Ω–µ –ª–µ—Ç?", 
            "–ö–µ–º —è —Ä–∞–±–æ—Ç–∞—é?",
            "–ö–∞–∫–∞—è –º–æ—è –ª—é–±–∏–º–∞—è –µ–¥–∞?"
        ]
        
        for question in memory_questions:
            print(f"\nüß† –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞–º—è—Ç—å: {question}")
            response = await self.send_message(question)
            await asyncio.sleep(1)
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            self.analyze_memory_response(question, response)
        
        # –≠—Ç–∞–ø 4: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        print("\nüìù –≠–¢–ê–ü 4: –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é")
        await self.send_message("–ö—Å—Ç–∞—Ç–∏, —è –∂–∏–≤—É –≤ –ú–æ—Å–∫–≤–µ")
        await asyncio.sleep(1)
        
        await self.send_message("–£ –º–µ–Ω—è –µ—Å—Ç—å –∫–æ—Ç –ø–æ –∏–º–µ–Ω–∏ –ë–∞—Ä—Å–∏–∫")
        await asyncio.sleep(1)
        
        # –ï—â–µ –æ—Ç–≤–ª–µ–∫–∞—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã
        await self.send_message("–ß—Ç–æ —Ç–∞–∫–æ–µ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç?")
        await asyncio.sleep(1)
        
        await self.send_message("–ü–æ—Å–æ–≤–µ—Ç—É–π —Ñ–∏–ª—å–º")
        await asyncio.sleep(1)
        
        await self.send_message("–ö–∞–∫ –¥–µ–ª–∞ —Å –ø–æ–≥–æ–¥–æ–π?")
        await asyncio.sleep(1)
        
        # –≠—Ç–∞–ø 5: –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–º—è—Ç–∏
        print("\nüéØ –≠–¢–ê–ü 5: –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–º—è—Ç–∏")
        final_questions = [
            "–ù–∞–ø–æ–º–Ω–∏ –º–Ω–µ, –∫–∞–∫ –º–µ–Ω—è –∑–æ–≤—É—Ç?",
            "–ì–¥–µ —è –∂–∏–≤—É?",
            "–ö–∞–∫ –∑–æ–≤—É—Ç –º–æ–µ–≥–æ –∫–æ—Ç–∞?",
            "–ß—Ç–æ —è –ª—é–±–ª—é –µ—Å—Ç—å?",
            "–ö–µ–º —è —Ä–∞–±–æ—Ç–∞—é?"
        ]
        
        for question in final_questions:
            print(f"\nüéØ –§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ—Å—Ç: {question}")
            response = await self.send_message(question)
            await asyncio.sleep(1)
            
            self.analyze_memory_response(question, response)
    
    def analyze_memory_response(self, question: str, response: str):
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
        response_lower = response.lower()
        
        if "–∫–∞–∫" in question.lower() and "–∑–æ–≤—É—Ç" in question.lower():
            if "–∞–Ω–¥—Ä–µ–π" in response_lower:
                print("‚úÖ –ò–º—è –∑–∞–ø–æ–º–Ω–µ–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ!")
            else:
                print("‚ùå –ò–º—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –æ—Ç–≤–µ—Ç–µ")
        
        elif "—Å–∫–æ–ª—å–∫–æ" in question.lower() and "–ª–µ—Ç" in question.lower():
            if "28" in response_lower:
                print("‚úÖ –í–æ–∑—Ä–∞—Å—Ç –∑–∞–ø–æ–º–Ω–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ!")
            else:
                print("‚ùå –í–æ–∑—Ä–∞—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ")
        
        elif "—Ä–∞–±–æ—Ç–∞" in question.lower() or "–∫–µ–º" in question.lower():
            if "–ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç" in response_lower:
                print("‚úÖ –ü—Ä–æ—Ñ–µ—Å—Å–∏—è –∑–∞–ø–æ–º–Ω–µ–Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ!")
            else:
                print("‚ùå –ü—Ä–æ—Ñ–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –æ—Ç–≤–µ—Ç–µ")
        
        elif "–µ–¥–∞" in question.lower() or "–ª—é–±–ª—é –µ—Å—Ç—å" in question.lower():
            if "–ø–∏—Ü—Ü–∞" in response_lower:
                print("‚úÖ –õ—é–±–∏–º–∞—è –µ–¥–∞ –∑–∞–ø–æ–º–Ω–µ–Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ!")
            else:
                print("‚ùå –õ—é–±–∏–º–∞—è –µ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –æ—Ç–≤–µ—Ç–µ")
        
        elif "–∂–∏–≤—É" in question.lower() or "–≥–¥–µ" in question.lower():
            if "–º–æ—Å–∫–≤–∞" in response_lower or "–º–æ—Å–∫–≤–µ" in response_lower:
                print("‚úÖ –ì–æ—Ä–æ–¥ –∑–∞–ø–æ–º–Ω–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ!")
            else:
                print("‚ùå –ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ")
        
        elif "–∫–æ—Ç" in question.lower():
            if "–±–∞—Ä—Å–∏–∫" in response_lower:
                print("‚úÖ –ò–º—è –∫–æ—Ç–∞ –∑–∞–ø–æ–º–Ω–µ–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ!")
            else:
                print("‚ùå –ò–º—è –∫–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –æ—Ç–≤–µ—Ç–µ")
    
    async def debug_memory_state(self):
        """–û—Ç–ª–∞–¥–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–∞–º—è—Ç–∏"""
        print("\nüîß –û–¢–õ–ê–î–ö–ê –°–û–°–¢–û–Ø–ù–ò–Ø –ü–ê–ú–Ø–¢–ò")
        print("=" * 50)
        
        try:
            memory = self.pipeline._get_memory(self.user_id)
            print(f"–¢–∏–ø –ø–∞–º—è—Ç–∏: {type(memory)}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º HybridMemory
            if hasattr(memory, 'short_memory'):
                short_memory = memory.short_memory
                print(f"–ö–æ—Ä–æ—Ç–∫–∞—è –ø–∞–º—è—Ç—å: {type(short_memory)}")
                if hasattr(short_memory, 'messages'):
                    print(f"–°–æ–æ–±—â–µ–Ω–∏–π –≤ –∫–æ—Ä–æ—Ç–∫–æ–π –ø–∞–º—è—Ç–∏: {len(short_memory.messages)}")
                    for i, msg in enumerate(short_memory.messages[-3:]):
                        print(f"  {i}: {msg.role}: {msg.content[:50]}...")
            
            if hasattr(memory, 'long_memory'):
                long_memory = memory.long_memory
                print(f"–î–æ–ª–≥–∞—è –ø–∞–º—è—Ç—å: {type(long_memory)}")
                
                # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å
                if hasattr(long_memory, 'get_user_profile'):
                    profile = long_memory.get_user_profile()
                    print(f"–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {profile}")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º MemoryAdapter
            from app.memory.memory_adapter import MemoryAdapter
            adapter = MemoryAdapter(memory)
            memory_data = adapter.get_for_prompt(self.user_id, "—Ç–µ—Å—Ç")
            print(f"–î–∞–Ω–Ω—ã–µ –æ—Ç MemoryAdapter:")
            for key, value in memory_data.items():
                print(f"  {key}: {value[:100] if len(str(value)) > 100 else value}")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ª–∞–¥–∫–∏: {e}")
            import traceback
            print(traceback.format_exc())

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∞"""
    tester = MemoryTester()
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ—Å—Ç
        await tester.test_memory_sequence()
        
        # –û—Ç–ª–∞–¥–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–∞–º—è—Ç–∏
        await tester.debug_memory_state()
        
        print("\nüéâ –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù!")
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞: {e}")
        import traceback
        print(traceback.format_exc())

if __name__ == "__main__":
    asyncio.run(main())
