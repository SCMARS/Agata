#!/usr/bin/env python3
"""
–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –ø–∞–º—è—Ç–∏ - –ø—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
"""
import sys
import os
import asyncio
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append('/Users/glebuhovskij/Agata')

from app.graph.pipeline import AgathaPipeline

async def quick_test():
    """–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –ø–∞–º—è—Ç–∏"""
    print("üöÄ –ë–´–°–¢–†–´–ô –¢–ï–°–¢ –ü–ê–ú–Ø–¢–ò")
    print("=" * 30)
    
    pipeline = AgathaPipeline()
    user_id = "quick_test_user"
    conversation = []
    
    async def ask_question(question: str) -> str:
        """–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏ –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç"""
        print(f"\nüë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {question}")
        
        conversation.append({
            "role": "user",
            "content": question,
            "timestamp": datetime.utcnow().isoformat()
        })
        
        try:
            response = await pipeline.process_chat(
                user_id=user_id,
                messages=conversation,
                meta_time=datetime.utcnow().isoformat()
            )
            
            response_text = " ".join(response["parts"]) if isinstance(response, dict) and "parts" in response else str(response)
            print(f"ü§ñ –ê–≥–∞—Ç–∞: {response_text}")
            
            conversation.append({
                "role": "assistant", 
                "content": response_text,
                "timestamp": datetime.utcnow().isoformat()
            })
            
            return response_text
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            return ""
    
    # –≠—Ç–∞–ø 1: –ó–Ω–∞–∫–æ–º—Å—Ç–≤–æ
    print("\nüìù –≠–¢–ê–ü 1: –ó–Ω–∞–∫–æ–º—Å—Ç–≤–æ")
    await ask_question("–ü—Ä–∏–≤–µ—Ç! –ú–µ–Ω—è –∑–æ–≤—É—Ç –ê–Ω–¥—Ä–µ–π")
    await ask_question("–ú–Ω–µ 28 –ª–µ—Ç")
    await ask_question("–Ø –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç")
    await ask_question("–ú–æ—è –ª—é–±–∏–º–∞—è –µ–¥–∞ - –ø–∏—Ü—Ü–∞")
    
    # –û—Ç–≤–ª–µ–∫–∞—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã
    print("\nüé≤ –û–¢–í–õ–ï–ö–ê–Æ–©–ò–ï –í–û–ü–†–û–°–´")
    await ask_question("–ö–∞–∫–∞—è –ø–æ–≥–æ–¥–∞?")
    await ask_question("–†–∞—Å—Å–∫–∞–∂–∏ —à—É—Ç–∫—É")
    await ask_question("–ß—Ç–æ –¥—É–º–∞–µ—à—å –æ —Ä–∞–±–æ—Ç–µ?")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–º—è—Ç–∏
    print("\nüß† –ü–†–û–í–ï–†–ö–ê –ü–ê–ú–Ø–¢–ò")
    
    print("\nüîç –¢–µ—Å—Ç 1: –ò–º—è")
    response = await ask_question("–ö–∞–∫ –º–µ–Ω—è –∑–æ–≤—É—Ç?")
    if "–∞–Ω–¥—Ä–µ–π" in response.lower():
        print("‚úÖ –ò–º—è –∑–∞–ø–æ–º–Ω–µ–Ω–æ!")
    else:
        print("‚ùå –ò–º—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –æ—Ç–≤–µ—Ç–µ")
    
    print("\nüîç –¢–µ—Å—Ç 2: –í–æ–∑—Ä–∞—Å—Ç")
    response = await ask_question("–°–∫–æ–ª—å–∫–æ –º–Ω–µ –ª–µ—Ç?")
    if "28" in response:
        print("‚úÖ –í–æ–∑—Ä–∞—Å—Ç –∑–∞–ø–æ–º–Ω–µ–Ω!")
    else:
        print("‚ùå –í–æ–∑—Ä–∞—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ—Ç–≤–µ—Ç–µ")
    
    print("\nüîç –¢–µ—Å—Ç 3: –ü—Ä–æ—Ñ–µ—Å—Å–∏—è")
    response = await ask_question("–ö–µ–º —è —Ä–∞–±–æ—Ç–∞—é?")
    if "–ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç" in response.lower():
        print("‚úÖ –ü—Ä–æ—Ñ–µ—Å—Å–∏—è –∑–∞–ø–æ–º–Ω–µ–Ω–∞!")
    else:
        print("‚ùå –ü—Ä–æ—Ñ–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –æ—Ç–≤–µ—Ç–µ")
    
    print("\nüîç –¢–µ—Å—Ç 4: –ï–¥–∞")
    response = await ask_question("–ö–∞–∫–∞—è –º–æ—è –ª—é–±–∏–º–∞—è –µ–¥–∞?")
    if "–ø–∏—Ü—Ü–∞" in response.lower():
        print("‚úÖ –õ—é–±–∏–º–∞—è –µ–¥–∞ –∑–∞–ø–æ–º–Ω–µ–Ω–∞!")
    else:
        print("‚ùå –õ—é–±–∏–º–∞—è –µ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –æ—Ç–≤–µ—Ç–µ")
    
    print("\nüéâ –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù!")

if __name__ == "__main__":
    asyncio.run(quick_test())
