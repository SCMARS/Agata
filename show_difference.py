#!/usr/bin/env python3
"""
–ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞–∑–Ω–∏—Ü—É –º–µ–∂–¥—É –æ–±—ã—á–Ω—ã–º –∏ —Ç–∏—Ö–∏–º —Ä–µ–∂–∏–º–∞–º–∏
"""

import os
import subprocess
import time

def run_test(env_var, mode_name):
    """–ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç"""
    print(f"\nüéØ {mode_name}")
    print("=" * 50)

    env = os.environ.copy()
    if env_var:
        env['AGATHA_QUIET'] = 'true'

    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
        server_process = subprocess.Popen([
            'python', 'run_server.py'
        ], env=env, cwd=os.path.dirname(os.path.abspath(__file__)),
        stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)

        time.sleep(5)

        # –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å
        result = subprocess.run([
            'curl', '-s', '-X', 'POST', 'http://localhost:8000/api/chat',
            '-H', 'Content-Type: application/json',
            '-d', '{"user_id": "demo", "messages": [{"role": "user", "content": "–ü—Ä–∏–≤–µ—Ç"}], "metaTime": "2024-01-15T14:30:00Z"}'
        ], capture_output=True, text=True, cwd=os.path.dirname(os.path.abspath(__file__)))

        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–µ—Ä
        server_process.terminate()
        server_process.wait(timeout=3)

        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—ã–≤–æ–¥ (stdout + stderr)
        all_output = result.stdout + result.stderr
        lines = all_output.split('\n')

        # –°—á–∏—Ç–∞–µ–º –ª–æ–≥–∏ (—Å—Ç—Ä–æ–∫–∏ —Å —ç–º–æ–¥–∑–∏ –∏–ª–∏ –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏)
        log_indicators = ['üß†', 'üé≠', 'üìù', 'ü§ñ', '‚úÖ', '‚ùå', 'üîç', 'üöÄ', 'Pipeline', 'START', 'COMPLETED', 'Behavioral', 'VectorMemory']
        log_lines = [line for line in lines if any(indicator in line for indicator in log_indicators)]

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 8 —Å—Ç—Ä–æ–∫ –ª–æ–≥–æ–≤ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if log_lines:
            print("üìã –õ–û–ì–ò (–ø–µ—Ä–≤—ã–µ 8 —Å—Ç—Ä–æ–∫):")
            for i, line in enumerate(log_lines[:8], 1):
                # –û–±—Ä–µ–∑–∞–µ–º —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
                short_line = line[:80] + "..." if len(line) > 80 else line
                print(f"  {i}. {short_line}")
            if len(log_lines) > 8:
                print(f"  ... –∏ –µ—â—ë {len(log_lines) - 8} —Å—Ç—Ä–æ–∫")
        else:
            print("üìã –õ–û–ì–ò: –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")

        print(f"üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"  –í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫ –≤—ã–≤–æ–¥–∞: {len(lines)}")
        print(f"  –°—Ç—Ä–æ–∫ —Å –ª–æ–≥–∞–º–∏: {len(log_lines)}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º JSON –æ—Ç–≤–µ—Ç
        json_found = any('"delays_ms"' in line and '"has_question"' in line for line in lines)
        print(f"  JSON –æ—Ç–≤–µ—Ç: {'‚úÖ –ù–∞–π–¥–µ–Ω' if json_found else '‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

def main():
    print("üé≠ –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –†–ï–ñ–ò–ú–û–í AGATHA AI")
    print("–ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞–∑–Ω–∏—Ü—É –º–µ–∂–¥—É –æ–±—ã—á–Ω—ã–º –∏ —Ç–∏—Ö–∏–º —Ä–µ–∂–∏–º–∞–º–∏")
    print("–í –æ–±—ã—á–Ω–æ–º —Ä–µ–∂–∏–º–µ - –º–Ω–æ–≥–æ –æ—Ç–ª–∞–¥–æ—á–Ω—ã—Ö –ª–æ–≥–æ–≤")
    print("–í —Ç–∏—Ö–æ–º —Ä–µ–∂–∏–º–µ - —Ç–æ–ª—å–∫–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç")

    # –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º
    run_test(None, "–û–ë–´–ß–ù–´–ô –†–ï–ñ–ò–ú (–ø–æ–ª–Ω—ã–µ –ª–æ–≥–∏)")

    # –¢–∏—Ö–∏–π —Ä–µ–∂–∏–º
    run_test('true', "–¢–ò–•–ò–ô –†–ï–ñ–ò–ú (—Ç–æ–ª—å–∫–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç)")

    print(f"\n{'='*50}")
    print("üéØ –í–´–í–û–î:")
    print("‚Ä¢ –¢–∏—Ö–∏–π —Ä–µ–∂–∏–º —É–±–∏—Ä–∞–µ—Ç –≤—Å–µ –æ—Ç–ª–∞–¥–æ—á–Ω—ã–µ –ª–æ–≥–∏")
    print("‚Ä¢ –û—Å—Ç–∞–≤–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ HTTP –æ—Ç–≤–µ—Ç —Å JSON")
    print("‚Ä¢ –ò–¥–µ–∞–ª—å–Ω–æ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞")
    print()
    print("üöÄ –î–õ–Ø –ü–†–û–î–ê–ö–®–ï–ù–ê:")
    print("  export AGATHA_QUIET=true")
    print("  python run_server.py")

if __name__ == "__main__":
    main()
