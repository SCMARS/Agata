#!/usr/bin/env python3
"""
üöÄ –ü–û–õ–ù–´–ô –ó–ê–ü–£–°–ö –°–ò–°–¢–ï–ú–´ AGATHA
===============================
–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã:
- API —Å–µ—Ä–≤–µ—Ä —Å –ø–∞–º—è—Ç—å—é
- Telegram bot
- –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã
"""

import os
import sys
import time
import signal
import subprocess
import requests
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ PATH
PROJECT_ROOT = Path(__file__).parent.absolute()
sys.path.insert(0, str(PROJECT_ROOT))

class AgathaLauncher:
    def __init__(self):
        self.processes = []
        self.project_root = PROJECT_ROOT
        self.config_loaded = False
        
    def load_environment(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ config.env"""
        config_file = self.project_root / "config.env"
        if not config_file.exists():
            print("‚ùå –§–∞–π–ª config.env –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return False
            
        print("üìÅ –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
        with open(config_file, 'r') as f:
            for line in f:
                line = line.strip()
                if line and not line.startswith('#'):
                    if '=' in line:
                        key, value = line.split('=', 1)
                        os.environ[key] = value
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        required_vars = ['OPENAI_API_KEY', 'TELEGRAM_BOT_TOKEN']
        missing_vars = []
        for var in required_vars:
            if not os.environ.get(var):
                missing_vars.append(var)
        
        if missing_vars:
            print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {', '.join(missing_vars)}")
            return False
            
        print("‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
        self.config_loaded = True
        return True
    
    def activate_venv(self):
        """–ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ"""
        venv_path = self.project_root / "venv"
        if venv_path.exists():
            if sys.platform == "win32":
                activate_script = venv_path / "Scripts" / "activate.bat"
                python_exe = venv_path / "Scripts" / "python.exe"
            else:
                activate_script = venv_path / "bin" / "activate"
                python_exe = venv_path / "bin" / "python"
            
            if python_exe.exists():
                print("üêç –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ")
                return str(python_exe)
        
        print("‚ö†Ô∏è –í–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π Python")
        return sys.executable
    
    def check_dependencies(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏"""
        try:
            import flask, openai, chromadb, langchain, telegram
            print("‚úÖ –í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
            return True
        except ImportError as e:
            print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: {e}")
            print("üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: pip install -r requirements.txt")
            return False
    
    def start_api_server(self, python_exe):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç API —Å–µ—Ä–≤–µ—Ä"""
        print("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º API —Å–µ—Ä–≤–µ—Ä...")
        
        env = os.environ.copy()
        env['PYTHONPATH'] = str(self.project_root)
        
        process = subprocess.Popen(
            [python_exe, "run_server.py"],
            cwd=str(self.project_root),
            env=env,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            universal_newlines=True,
            bufsize=1
        )
        
        print(f"   PID: {process.pid}")
        print(f"   –ö–æ–º–∞–Ω–¥–∞: {python_exe} run_server.py")
        
        self.processes.append(('API Server', process))
        
        # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ API
        print("‚è≥ –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ API —Å–µ—Ä–≤–µ—Ä–∞...")
        for i in range(30):
            try:
                response = requests.get("http://localhost:8000/healthz", timeout=1)
                if response.status_code == 200:
                    print("‚úÖ API —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω!")
                    return True
            except:
                time.sleep(1)
        
        print("‚ùå API —Å–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è")
        return False
    
    def start_telegram_bot(self, python_exe):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç Telegram bot"""
        print("ü§ñ –ó–∞–ø—É—Å–∫–∞–µ–º Telegram bot...")
        
        env = os.environ.copy()
        env['PYTHONPATH'] = str(self.project_root)
        
        process = subprocess.Popen(
            [python_exe, "telegram_bot.py"],
            cwd=str(self.project_root),
            env=env,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            universal_newlines=True,
            bufsize=1
        )
        
        print(f"   PID: {process.pid}")
        print(f"   –ö–æ–º–∞–Ω–¥–∞: {python_exe} telegram_bot.py")
        
        self.processes.append(('Telegram Bot', process))
        
        # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
        print("‚è≥ –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ Telegram bot...")
        time.sleep(3)
        
        if process.poll() is None:
            print("‚úÖ Telegram bot –∑–∞–ø—É—â–µ–Ω!")
            return True
        else:
            print("‚ùå Telegram bot –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è")
            return False
    
    def test_system(self):
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É —Å–∏—Å—Ç–µ–º—ã"""
        print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É...")
        
        # –¢–µ—Å—Ç API
        try:
            print("   –ü—Ä–æ–≤–µ—Ä—è–µ–º /api/info...")
            response = requests.get("http://localhost:8000/api/info", timeout=5)
            if response.status_code == 200:
                data = response.json()
                print("‚úÖ API —Ä–∞–±–æ—Ç–∞–µ—Ç")
                print(f"   Endpoints: {len(data.get('endpoints', {}))}")
                print(f"   –í–µ—Ä—Å–∏—è: {data.get('version')}")
            else:
                print(f"‚ö†Ô∏è API –æ—Ç–≤–µ—á–∞–µ—Ç —Å –∫–æ–¥–æ–º {response.status_code}")
                print(f"   –û—Ç–≤–µ—Ç: {response.text[:200]}")
        except Exception as e:
            print(f"‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}")
            # –ü—Ä–æ–≤–µ—Ä–∏–º –ø—Ä–æ—Ü–µ—Å—Å—ã
            for name, process in self.processes:
                if 'API' in name:
                    if process.poll() is not None:
                        print(f"   üí• –ü—Ä–æ—Ü–µ—Å—Å {name} —É–∂–µ –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –∫–æ–¥–æ–º {process.returncode}")
                    else:
                        print(f"   ‚úÖ –ü—Ä–æ—Ü–µ—Å—Å {name} –µ—â–µ —Ä–∞–±–æ—Ç–∞–µ—Ç (PID: {process.pid})")
            return False
        
        # –¢–µ—Å—Ç –ø–∞–º—è—Ç–∏
        try:
            test_data = {
                "content": "–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞–º—è—Ç–∏",
                "role": "user",
                "conversation_id": "system_test",
                "day_number": 1
            }
            response = requests.post(
                "http://localhost:8000/api/memory/system_test/add",
                json=test_data,
                timeout=5
            )
            if response.status_code == 200:
                print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –ø–∞–º—è—Ç–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            else:
                print("‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–∞–º—è—Ç—å—é")
        except Exception as e:
            print(f"‚ö†Ô∏è –ü–∞–º—è—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {e}")
        
        # –¢–µ—Å—Ç —á–∞—Ç–∞
        try:
            chat_data = {
                "user_id": "system_test",
                "messages": [{"role": "user", "content": "–ü—Ä–∏–≤–µ—Ç, —ç—Ç–æ —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã"}],
                "metaTime": "2025-09-01T18:30:00Z"
            }
            response = requests.post(
                "http://localhost:8000/api/chat",
                json=chat_data,
                timeout=10
            )
            if response.status_code == 200:
                print("‚úÖ –ù–µ–π—Ä–æ—Å–µ—Ç—å –æ—Ç–≤–µ—á–∞–µ—Ç")
            else:
                print("‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã —Å –Ω–µ–π—Ä–æ—Å–µ—Ç—å—é")
        except Exception as e:
            print(f"‚ö†Ô∏è –ù–µ–π—Ä–æ—Å–µ—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {e}")
        
        return True
    
    def print_status(self):
        """–í—ã–≤–æ–¥–∏—Ç —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã"""
        print("\n" + "="*50)
        print("üéâ –°–ò–°–¢–ï–ú–ê AGATHA –ó–ê–ü–£–©–ï–ù–ê!")
        print("="*50)
        
        telegram_token = os.environ.get('TELEGRAM_BOT_TOKEN', '')
        bot_username = telegram_token.split(':')[0] if telegram_token else 'unknown'
        
        print(f"üåê API —Å–µ—Ä–≤–µ—Ä: http://localhost:8000")
        print(f"ü§ñ Telegram bot: https://t.me/{bot_username}")
        print(f"üìã API Info: http://localhost:8000/api/info")
        print(f"üíö Health: http://localhost:8000/healthz")
        
        print("\nüìã –î–æ—Å—Ç—É–ø–Ω—ã–µ endpoints:")
        print("   ‚Ä¢ POST /api/chat - —á–∞—Ç —Å Agatha")
        print("   ‚Ä¢ POST /api/memory/<user_id>/add - –¥–æ–±–∞–≤–∏—Ç—å –≤ –ø–∞–º—è—Ç—å")
        print("   ‚Ä¢ POST /api/memory/<user_id>/search - –ø–æ–∏—Å–∫ –≤ –ø–∞–º—è—Ç–∏")
        print("   ‚Ä¢ GET  /api/memory/<user_id>/overview - –æ–±–∑–æ—Ä –ø–∞–º—è—Ç–∏")
        print("   ‚Ä¢ POST /api/memory/<user_id>/clear - –æ—á–∏—Å—Ç–∏—Ç—å –ø–∞–º—è—Ç—å")
        
        print("\nüöÄ –ê–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã:")
        for name, process in self.processes:
            status = "‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç" if process.poll() is None else "‚ùå –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
            print(f"   ‚Ä¢ {name}: {status}")
        
        print("\nüí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Telegram bot –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å Agatha!")
        print("üõë –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—Å–µ–π —Å–∏—Å—Ç–µ–º—ã")
    
    def monitor_processes(self):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç –ø—Ä–æ—Ü–µ—Å—Å—ã –∏ –≤—ã–≤–æ–¥–∏—Ç –ª–æ–≥–∏"""
        try:
            print("üîç –ù–∞—á–∏–Ω–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤...")
            while True:
                time.sleep(2)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
                for name, process in self.processes:
                    if process.poll() is not None:
                        print(f"üí• –ü–†–û–¶–ï–°–° {name} –ó–ê–í–ï–†–®–ò–õ–°–Ø!")
                        print(f"   –ö–æ–¥ –≤—ã—Ö–æ–¥–∞: {process.returncode}")
                        
                        # –ß–∏—Ç–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏
                        try:
                            stdout, stderr = process.communicate(timeout=1)
                            if stdout:
                                print(f"   üìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏ stdout:")
                                print(f"   {stdout[-500:]}")  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 500 —Å–∏–º–≤–æ–ª–æ–≤
                            if stderr:
                                print(f"   ‚ùå –û—à–∏–±–∫–∏ stderr:")
                                print(f"   {stderr[-500:]}")
                        except:
                            print("   (–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ª–æ–≥–∏)")
                        
                        return False
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ API –æ—Ç–≤–µ—á–∞–µ—Ç
                try:
                    response = requests.get("http://localhost:8000/healthz", timeout=2)
                    if response.status_code != 200:
                        print(f"‚ö†Ô∏è API –æ—Ç–≤–µ—á–∞–µ—Ç —Å –∫–æ–¥–æ–º {response.status_code}")
                except Exception as e:
                    print(f"üí• API –ù–ï –û–¢–í–ï–ß–ê–ï–¢: {e}")
                    return False
                        
        except KeyboardInterrupt:
            print("\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")
            return True
    
    def cleanup(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã"""
        print("üßπ –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã...")
        
        for name, process in self.processes:
            if process.poll() is None:
                print(f"   –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º {name}...")
                process.terminate()
                try:
                    process.wait(timeout=5)
                except subprocess.TimeoutExpired:
                    print(f"   –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ–º {name}...")
                    process.kill()
        
        print("‚úÖ –í—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    
    def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –∑–∞–ø—É—Å–∫–∞"""
        print("üöÄ –ó–ê–ü–£–°–ö –°–ò–°–¢–ï–ú–´ AGATHA")
        print("=" * 40)
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ
        if not self.load_environment():
            return False
        
        # –ü–æ–ª—É—á–∞–µ–º Python executable
        python_exe = self.activate_venv()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        if not self.check_dependencies():
            return False
        
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
            if not self.start_api_server(python_exe):
                return False
            
            if not self.start_telegram_bot(python_exe):
                return False
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É
            self.test_system()
            
            # –í—ã–≤–æ–¥–∏–º —Å—Ç–∞—Ç—É—Å
            self.print_status()
            
            # –ú–æ–Ω–∏—Ç–æ—Ä–∏–º –ø—Ä–æ—Ü–µ—Å—Å—ã
            self.monitor_processes()
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
            return False
        
        finally:
            self.cleanup()
        
        return True

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    launcher = AgathaLauncher()
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
    def signal_handler(signum, frame):
        print("\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...")
        launcher.cleanup()
        sys.exit(0)
    
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏—Å—Ç–µ–º—É
    success = launcher.run()
    sys.exit(0 if success else 1)

if __name__ == "__main__":
    main()
