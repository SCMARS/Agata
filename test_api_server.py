#!/usr/bin/env python3
"""
–¢–ï–°–¢ API –°–ï–†–í–ï–†–ê: –ó–∞–ø—É—Å–∫ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ —Å –ø–∞–º—è—Ç—å—é
–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –∫–∞–∫ –≤—Å—è —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —á–µ—Ä–µ–∑ HTTP API
"""

import asyncio
import sys
import os
import time
import requests
import json
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

async def test_api_server():
    """–¢–µ—Å—Ç –∑–∞–ø—É—Å–∫–∞ API —Å–µ—Ä–≤–µ—Ä–∞ –∏ —Ä–∞–±–æ—Ç—ã —á–µ—Ä–µ–∑ HTTP"""
    
    print('üöÄ –¢–ï–°–¢ API –°–ï–†–í–ï–†–ê: –ó–∞–ø—É—Å–∫ —Ä–µ–∞–ª—å–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞')
    print('=' * 70)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–∂–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å API
    try:
        from app.api import create_app
        print('‚úÖ API –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ')
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        app = create_app()
        print('‚úÖ Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ')
        
    except Exception as e:
        print(f'‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ API: {e}')
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–∂–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–∞–º—è—Ç—å
    try:
        from app.memory.hybrid_memory import HybridMemory
        from app.memory.base import Message, MemoryContext
        print('‚úÖ –°–∏—Å—Ç–µ–º–∞ –ø–∞–º—è—Ç–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ')
    except Exception as e:
        print(f'‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –ø–∞–º—è—Ç–∏: {e}')
        return
    
    # –¢–ï–°–¢ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã –ø–∞–º—è—Ç–∏ –Ω–∞–ø—Ä—è–º—É—é
    print('\nüß† –¢–ï–°–¢ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–º—è—Ç–∏ –Ω–∞–ø—Ä—è–º—É—é')
    print('-' * 50)
    
    memory = HybridMemory('api_test_user')
    context = MemoryContext(user_id='api_test_user', day_number=1)
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    test_message = Message('user', '–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–µ—Å—Ç–∏—Ä—É—é API —Å–µ—Ä–≤–µ—Ä', datetime.utcnow())
    await memory.add_message(test_message, context)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
    context_result = await memory.get_context(context)
    print(f'üìù –ö–æ–Ω—Ç–µ–∫—Å—Ç: {context_result}')
    
    # –¢–ï–°–¢ 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    print('\n‚öôÔ∏è –¢–ï–°–¢ 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏')
    print('-' * 50)
    
    try:
        from app.config.settings import settings
        print(f'‚úÖ OpenAI API –∫–ª—é—á: {settings.OPENAI_API_KEY[:20]}...')
        print(f'‚úÖ –¢–∏–ø –ø–∞–º—è—Ç–∏: {settings.MEMORY_TYPE}')
        print(f'‚úÖ –í–µ–∫—Ç–æ—Ä–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ: {settings.VECTOR_STORE_TYPE}')
        print(f'‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {settings.DATABASE_HOST}:{settings.DATABASE_PORT}')
    except Exception as e:
        print(f'‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}')
    
    # –¢–ï–°–¢ 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã API
    print('\nüîå –¢–ï–°–¢ 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã API')
    print('-' * 50)
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
        if hasattr(app, 'url_map'):
            print(f'‚úÖ API –∏–º–µ–µ—Ç {len(app.url_map._rules)} –º–∞—Ä—à—Ä—É—Ç–æ–≤')
            
            # –í—ã–≤–æ–¥–∏–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã
            for rule in app.url_map._rules:
                print(f'  üìç {rule.rule} [{", ".join(rule.methods)}]')
        else:
            print('‚ö†Ô∏è API –Ω–µ –∏–º–µ–µ—Ç –º–∞—Ä—à—Ä—É—Ç–æ–≤')
            
    except Exception as e:
        print(f'‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ API: {e}')
    
    # –¢–ï–°–¢ 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    print('\nüóÑÔ∏è –¢–ï–°–¢ 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î')
    print('-' * 50)
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL
        import asyncpg
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        conn = await asyncpg.connect(
            host='localhost',
            port=5432,
            user='postgres',
            password='postgres',
            database='agatha'
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—É vector_memories
        result = await conn.fetchval("SELECT COUNT(*) FROM vector_memories")
        print(f'‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å–ø–µ—à–Ω–æ')
        print(f'‚úÖ –í —Ç–∞–±–ª–∏—Ü–µ vector_memories: {result} –∑–∞–ø–∏—Å–µ–π')
        
        await conn.close()
        
    except Exception as e:
        print(f'‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}')
    
    # –¢–ï–°–¢ 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ OpenAI API
    print('\nü§ñ –¢–ï–°–¢ 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ OpenAI API')
    print('-' * 50)
    
    try:
        import openai
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º API –∫–ª—é—á
        client = openai.OpenAI(api_key=os.getenv('OPENAI_API_KEY'))
        
        # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç —ç–º–±–µ–¥–¥–∏–Ω–≥–∞
        response = client.embeddings.create(
            model="text-embedding-ada-002",
            input="–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
        )
        
        if response.data and len(response.data) > 0:
            embedding = response.data[0].embedding
            print(f'‚úÖ OpenAI API —Ä–∞–±–æ—Ç–∞–µ—Ç')
            print(f'‚úÖ –≠–º–±–µ–¥–¥–∏–Ω–≥ —Å–æ–∑–¥–∞–Ω: {len(embedding)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤')
        else:
            print('‚ùå OpenAI API –Ω–µ –≤–µ—Ä–Ω—É–ª —ç–º–±–µ–¥–¥–∏–Ω–≥')
            
    except Exception as e:
        print(f'‚ùå –û—à–∏–±–∫–∞ OpenAI API: {e}')
    
    print('\nüéâ –¢–ï–°–¢ API –°–ï–†–í–ï–†–ê –ó–ê–í–ï–†–®–ï–ù!')
    print('=' * 70)
    
    # –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –ó–ê–ü–£–°–ö–£
    print('\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò –ü–û –ó–ê–ü–£–°–ö–£ –°–ï–†–í–ï–†–ê:')
    print('1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ PostgreSQL –∑–∞–ø—É—â–µ–Ω')
    print('2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ pgvector —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')
    print('3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä: python run_server.py')
    print('4. –û—Ç–∫—Ä–æ–π—Ç–µ Swagger UI: http://localhost:8000/docs')
    print('5. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ API endpoints')

if __name__ == "__main__":
    asyncio.run(test_api_server()) 