#!/usr/bin/env python3
"""
–ò–ù–¢–ï–ì–†–ò–†–û–í–ê–ù–ù–´–ô –¢–ï–°–¢: LangGraph + Buffer Memory + Vector Memory
–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∫–∞–∫ –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ä–∞–±–æ—Ç–∞—é—Ç –≤–º–µ—Å—Ç–µ
"""

import asyncio
import sys
import os
from datetime import datetime, timedelta

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from app.memory.hybrid_memory import HybridMemory
from app.memory.base import Message, MemoryContext
from app.graph.pipeline import AgathaPipeline, PipelineState

async def test_integrated_system():
    """–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã –ø–∞–º—è—Ç–∏ —Å LangGraph"""
    
    print('üöÄ –ò–ù–¢–ï–ì–†–ò–†–û–í–ê–ù–ù–´–ô –¢–ï–°–¢: LangGraph + –ü–∞–º—è—Ç—å')
    print('=' * 70)
    
    # –°–æ–∑–¥–∞–µ–º –≥–∏–±—Ä–∏–¥–Ω—É—é –ø–∞–º—è—Ç—å
    memory = HybridMemory('user_integrated_test')
    context = MemoryContext(user_id='user_integrated_test', day_number=1)
    
    # –°–¶–ï–ù–ê–†–ò–ô: –†–µ–∞–ª—å–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    print('\nüìù –°–¶–ï–ù–ê–†–ò–ô: –û–±—â–µ–Ω–∏–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —á–µ—Ä–µ–∑ LangGraph')
    
    conversation_messages = [
        Message('user', '–ü—Ä–∏–≤–µ—Ç! –ú–µ–Ω—è –∑–æ–≤—É—Ç –î–º–∏—Ç—Ä–∏–π, —è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫', datetime.utcnow() - timedelta(hours=8)),
        Message('assistant', '–ü—Ä–∏–≤–µ—Ç, –î–º–∏—Ç—Ä–∏–π! –†–∞–¥ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è. –†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–µ–±–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ.', datetime.utcnow() - timedelta(hours=7, minutes=45)),
        Message('user', '–Ø —Ä–∞–±–æ—Ç–∞—é –≤ IT-–∫–æ–º–ø–∞–Ω–∏–∏, —Ä–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–∞ Python', datetime.utcnow() - timedelta(hours=7, minutes=30)),
        Message('assistant', '–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ! –ö–∞–∫–∏–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—à—å –≤ —Ä–∞–±–æ—Ç–µ?', datetime.utcnow() - timedelta(hours=7, minutes=15)),
        Message('user', '–ò—Å–ø–æ–ª—å–∑—É—é Django, FastAPI, PostgreSQL, Redis. –õ—é–±–ª—é —Ä–∞–±–æ—Ç–∞—Ç—å —Å –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–∞–º–∏', datetime.utcnow() - timedelta(hours=7)),
        Message('assistant', '–û—Ç–ª–∏—á–Ω—ã–π —Å—Ç–µ–∫! –ï—Å—Ç—å –ª–∏ –ø—Ä–æ–µ–∫—Ç—ã, –∫–æ—Ç–æ—Ä—ã–º–∏ –≥–æ—Ä–¥–∏—à—å—Å—è?', datetime.utcnow() - timedelta(hours=6, minutes=45)),
        Message('user', '–î–∞, –Ω–µ–¥–∞–≤–Ω–æ –∑–∞–ø—É—Å—Ç–∏–ª –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –¥–ª—è –æ–Ω–ª–∞–π–Ω-–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è. –û—á–µ–Ω—å –¥–æ–≤–æ–ª–µ–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º', datetime.utcnow() - timedelta(hours=6, minutes=30)),
        Message('assistant', '–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ. –ö–∞–∫–∏–µ –ø–ª–∞–Ω—ã –Ω–∞ –±—É–¥—É—â–µ–µ?', datetime.utcnow() - timedelta(hours=6, minutes=15)),
        Message('user', '–•–æ—á—É –∏–∑—É—á–∏—Ç—å –º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –∏ –¥–æ–±–∞–≤–∏—Ç—å AI-—Ñ—É–Ω–∫—Ü–∏–∏ –≤ —Å–≤–æ–∏ –ø—Ä–æ–µ–∫—Ç—ã', datetime.utcnow() - timedelta(hours=6)),
        Message('assistant', '–û—Ç–ª–∏—á–Ω–∞—è –∏–¥–µ—è! ML –º–æ–∂–µ—Ç —Å–∏–ª—å–Ω–æ —É–ª—É—á—à–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –æ–ø—ã—Ç.', datetime.utcnow() - timedelta(hours=5, minutes=45)),
        Message('user', '–°–æ–≥–ª–∞—Å–µ–Ω! –ù–æ –ø–æ–∫–∞ –Ω–µ –∑–Ω–∞—é, —Å —á–µ–≥–æ –Ω–∞—á–∞—Ç—å –∏–∑—É—á–µ–Ω–∏–µ ML', datetime.utcnow() - timedelta(hours=5, minutes=30)),
        Message('assistant', '–ú–æ–≥—É –ø–æ—Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–µ—Å—É—Ä—Å–æ–≤ –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è. –ß—Ç–æ —Ç–µ–±—è –±–æ–ª—å—à–µ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?', datetime.utcnow() - timedelta(hours=5, minutes=15)),
        Message('user', '–ò–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–µ –∑—Ä–µ–Ω–∏–µ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞', datetime.utcnow() - timedelta(hours=5)),
        Message('assistant', '–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä! –ù–∞—á–Ω–∏ —Å –æ—Å–Ω–æ–≤ Python –¥–ª—è ML, –∑–∞—Ç–µ–º TensorFlow –∏–ª–∏ PyTorch.', datetime.utcnow() - timedelta(hours=4, minutes=45)),
        Message('user', '–°–ø–∞—Å–∏–±–æ –∑–∞ —Å–æ–≤–µ—Ç! –ë—É–¥—É –∏–∑—É—á–∞—Ç—å. –ê —Ç—ã –ø–æ–º–Ω–∏—à—å, —á—Ç–æ —è —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞–ª –æ —Å–µ–±–µ?', datetime.utcnow() - timedelta(hours=4, minutes=30)),
    ]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ø–∞–º—è—Ç—å
    print('\nüìù –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∏–∞–ª–æ–≥ –≤ –ø–∞–º—è—Ç—å...')
    for i, msg in enumerate(conversation_messages, 1):
        print(f'  {i:2d}. [{msg.role.upper()}] {msg.content[:50]}...')
        await memory.add_message(msg, context)
    
    # –¢–ï–°–¢ 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–∞–º—è—Ç—å —Ä–∞–±–æ—Ç–∞–µ—Ç
    print('\nüß† –¢–ï–°–¢ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã –ø–∞–º—è—Ç–∏')
    print('-' * 50)
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
    context_result = await memory.get_context(context)
    print(f'üìù –ö–æ–Ω—Ç–µ–∫—Å—Ç: {context_result}')
    
    # –ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Ç–µ–º–∞–º
    search_queries = ['–î–º–∏—Ç—Ä–∏–π', '—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫', 'Python', 'ML', '–∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–µ –∑—Ä–µ–Ω–∏–µ', '–ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è']
    
    print('\nüîç –ü–æ–∏—Å–∫ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Ç–µ–º–∞–º:')
    for query in search_queries:
        results = await memory.search_memory(query, limit=2)
        print(f'  "{query}": –Ω–∞–π–¥–µ–Ω–æ {len(results)} –∑–∞–ø–∏—Å–µ–π')
        if results:
            for result in results:
                print(f'    - {result["content"][:60]}... (–≤–∞–∂–Ω–æ—Å—Ç—å: {result["importance_score"]:.2f})')
    
    # –¢–ï–°–¢ 2: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å LangGraph Pipeline
    print('\nüîÑ –¢–ï–°–¢ 2: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å LangGraph Pipeline')
    print('-' * 50)
    
    try:
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä pipeline
        pipeline = AgathaPipeline()
        
        # –°–æ–∑–¥–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è pipeline
        pipeline_state = PipelineState(
            user_id='user_integrated_test',
            message='–ü—Ä–∏–≤–µ—Ç! –ü–æ–º–Ω–∏—à—å, —á—Ç–æ —è —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞–ª –æ —Å–µ–±–µ?',
            memory_context=context,
            current_step='start'
        )
        
        print('‚úÖ Pipeline —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ')
        print(f'üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ: {pipeline_state}')
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º —Ä–∞–±–æ—Ç—É pipeline —Å –ø–∞–º—è—Ç—å—é
        print('\nüîÑ –°–∏–º—É–ª—è—Ü–∏—è —Ä–∞–±–æ—Ç—ã pipeline —Å –ø–∞–º—è—Ç—å—é...')
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è AI-–æ—Ç–≤–µ—Ç–∞
        ai_context = await memory.get_context(context)
        print(f'üß† –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è AI: {ai_context}')
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º AI-–æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–∞–º—è—Ç–∏
        print('\nü§ñ –°–∏–º—É–ª—è—Ü–∏—è AI-–æ—Ç–≤–µ—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–∞–º—è—Ç–∏:')
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º, —á—Ç–æ –ø–æ–º–Ω–∏—Ç —Å–∏—Å—Ç–µ–º–∞
        user_info = await memory.get_user_profile()
        print(f'üë§ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_info}')
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
        if '–î–º–∏—Ç—Ä–∏–π' in str(ai_context):
            print('‚úÖ –°–∏—Å—Ç–µ–º–∞ –ø–æ–º–Ω–∏—Ç –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
            response = "–ö–æ–Ω–µ—á–Ω–æ, –î–º–∏—Ç—Ä–∏–π! –Ø –ø–æ–º–Ω—é, —á—Ç–æ —Ç—ã —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫, —Ä–∞–±–æ—Ç–∞–µ—à—å —Å Python, Django, FastAPI. –ù–µ–¥–∞–≤–Ω–æ –∑–∞–ø—É—Å—Ç–∏–ª –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –¥–ª—è –æ–Ω–ª–∞–π–Ω-–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –∏ —Ö–æ—á–µ—à—å –∏–∑—É—á–∞—Ç—å –º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ, –æ—Å–æ–±–µ–Ω–Ω–æ –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–µ –∑—Ä–µ–Ω–∏–µ –∏ NLP. –ü—Ä–∞–≤–∏–ª—å–Ω–æ?"
        else:
            print('‚ùå –°–∏—Å—Ç–µ–º–∞ –Ω–µ –ø–æ–º–Ω–∏—Ç –¥–µ—Ç–∞–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
            response = "–ò–∑–≤–∏–Ω–∏, –Ω–æ —è –Ω–µ –ø–æ–º–Ω—é –¥–µ—Ç–∞–ª–∏ –Ω–∞—à–µ–≥–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞. –†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–µ–±–µ –µ—â–µ —Ä–∞–∑?"
        
        print(f'ü§ñ AI-–æ—Ç–≤–µ—Ç: {response}')
        
        # –¢–ï–°–¢ 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã –ø–∞–º—è—Ç–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
        print('\n‚è∞ –¢–ï–°–¢ 3: –ü–∞–º—è—Ç—å –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏')
        print('-' * 50)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        new_message = Message('user', '–î–∞, –≤—Å–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ! –¢—ã –æ—Ç–ª–∏—á–Ω–æ –ø–æ–º–Ω–∏—à—å –Ω–∞—à–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä—ã', datetime.utcnow())
        await memory.add_message(new_message, context)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
        updated_context = await memory.get_context(context)
        print(f'üìù –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç: {updated_context}')
        
        # –ü–æ–∏—Å–∫ –ø–æ –Ω–æ–≤–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
        search_result = await memory.search_memory('–æ—Ç–ª–∏—á–Ω–æ –ø–æ–º–Ω–∏—à—å', limit=1)
        if search_result:
            print(f'üîç –ù–∞–π–¥–µ–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {search_result[0]["content"]}')
        
        print('\n‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –æ—Ç–ª–∏—á–Ω–æ!')
        
    except Exception as e:
        print(f'‚ùå –û—à–∏–±–∫–∞ –≤ LangGraph –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏: {e}')
        import traceback
        traceback.print_exc()
    
    print('\nüéâ –ò–ù–¢–ï–ì–†–ò–†–û–í–ê–ù–ù–´–ô –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù!')
    print('=' * 70)

if __name__ == "__main__":
    asyncio.run(test_integrated_system()) 