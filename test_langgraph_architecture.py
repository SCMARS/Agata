#!/usr/bin/env python3
"""
–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Ç–µ—Å—Ç –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã LangGraph
–ü—Ä–æ–≤–µ—Ä—è–µ–º: –ë—É—Ñ–µ—Ä ‚Üí –í–µ–∫—Ç–æ—Ä—ã ‚Üí –ü–æ–∏—Å–∫ ‚Üí –ü—Ä–æ–º–ø—Ç ‚Üí LLM
"""

import requests
import json
import time
from datetime import datetime

API_BASE_URL = "http://localhost:8000"
TEST_USER = "langgraph_test"

def send_to_memory(content, role="user"):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ø–∞–º—è—Ç—å"""
    memory_data = {
        'role': role,
        'content': content,
        'metadata': {
            'source': 'langgraph_test',
            'user_id': TEST_USER,
            'timestamp': datetime.now().isoformat()
        },
        'conversation_id': f'langgraph_{int(time.time())}',
        'day_number': 1
    }
    
    try:
        response = requests.post(
            f"{API_BASE_URL}/api/memory/{TEST_USER}/add",
            json=memory_data,
            timeout=20
        )
        response.raise_for_status()
        return response.json()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {e}")
        return None

def send_chat_message(message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç —á–µ—Ä–µ–∑ LangGraph pipeline"""
    chat_data = {
        'user_id': TEST_USER,
        'messages': [{'role': 'user', 'content': message}],
        'metaTime': datetime.now().isoformat()
    }
    
    try:
        response = requests.post(
            f"{API_BASE_URL}/api/chat",
            json=chat_data,
            timeout=30
        )
        response.raise_for_status()
        return response.json()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —á–∞—Ç–∞: {e}")
        return None

def search_memory(query, limit=5):
    """–ü–æ–∏—Å–∫ –≤ –ø–∞–º—è—Ç–∏"""
    try:
        response = requests.post(
            f"{API_BASE_URL}/api/memory/{TEST_USER}/search",
            json={"query": query, "limit": limit},
            timeout=20
        )
        response.raise_for_status()
        return response.json()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")
        return None

def get_memory_overview():
    """–ü–æ–ª—É—á–∞–µ–º –æ–±–∑–æ—Ä –ø–∞–º—è—Ç–∏"""
    try:
        response = requests.get(
            f"{API_BASE_URL}/api/memory/{TEST_USER}/overview",
            timeout=15
        )
        response.raise_for_status()
        return response.json()
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–∑–æ—Ä–∞: {e}")
        return None

def clear_memory():
    """–û—á–∏—â–∞–µ–º –ø–∞–º—è—Ç—å"""
    try:
        response = requests.post(f"{API_BASE_URL}/api/memory/{TEST_USER}/clear")
        response.raise_for_status()
        print("üßπ –ü–∞–º—è—Ç—å –æ—á–∏—â–µ–Ω–∞")
    except Exception as e:
        print(f"‚ö†Ô∏è –û—á–∏—Å—Ç–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å: {e}")

def test_architecture():
    print("üîç –¢–ï–°–¢ –ê–†–•–ò–¢–ï–ö–¢–£–†–´ LANGGRAPH")
    print("=" * 50)
    print("–ü—Ä–æ–≤–µ—Ä—è–µ–º: –ë—É—Ñ–µ—Ä ‚Üí –í–µ–∫—Ç–æ—Ä—ã ‚Üí –ü–æ–∏—Å–∫ ‚Üí –ü—Ä–æ–º–ø—Ç ‚Üí LLM")
    print("=" * 50)
    
    # –û—á–∏—â–∞–µ–º –ø–∞–º—è—Ç—å
    clear_memory()
    time.sleep(2)
    
    print("\nüìù –≠–¢–ê–ü 1: –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–∫—Ç—ã –≤ –ø–∞–º—è—Ç—å")
    print("-" * 30)
    
    facts = [
        "–ú–µ–Ω—è –∑–æ–≤—É—Ç –ì–ª–µ–±",
        "–ú–æ—è –ª—é–±–∏–º–∞—è –µ–¥–∞ - –ø–∏—Ü—Ü–∞",
        "–Ø –∂–∏–≤—É –≤ –ú–æ—Å–∫–≤–µ",
        "–ú–æ–π –¥—Ä—É–≥ –û–ª–µ–≥ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–æ–º",
        "–Ø –ª—é–±–ª—é –∏–≥—Ä–∞—Ç—å –≤ —à–∞—Ö–º–∞—Ç—ã"
    ]
    
    for i, fact in enumerate(facts, 1):
        print(f"üìå –§–∞–∫—Ç {i}: {fact}")
        result = send_to_memory(fact)
        if result:
            print(f"   ‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: short_term={result['result']['short_term']}, long_term={result['result']['long_term']}")
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è")
        time.sleep(1)
    
    print("\nüìä –≠–¢–ê–ü 2: –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–∑–æ—Ä –ø–∞–º—è—Ç–∏")
    print("-" * 30)
    
    overview = get_memory_overview()
    if overview:
        print(f"üìà –û–±–∑–æ—Ä –ø–∞–º—è—Ç–∏:")
        print(f"   Short-term: {overview.get('short_term_count', 0)} —Å–æ–æ–±—â–µ–Ω–∏–π")
        print(f"   Long-term: {overview.get('long_term_count', 0)} —Ñ–∞–∫—Ç–æ–≤")
        print(f"   Vector DB: {overview.get('vector_count', 0)} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
    
    print("\nüîç –≠–¢–ê–ü 3: –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–µ–∫—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫")
    print("-" * 30)
    
    search_queries = [
        "–∏–º—è –∑–æ–≤—É—Ç",
        "–ª—é–±–∏–º–∞—è –µ–¥–∞",
        "–≥–¥–µ –∂–∏–≤—É",
        "–¥—Ä—É–≥ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç",
        "—à–∞—Ö–º–∞—Ç—ã"
    ]
    
    for query in search_queries:
        print(f"üîé –ü–æ–∏—Å–∫: '{query}'")
        results = search_memory(query, limit=3)
        if results and results.get('success'):
            found = results.get('results', [])
            print(f"   üìã –ù–∞–π–¥–µ–Ω–æ: {len(found)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
            for i, result in enumerate(found[:2]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 2
                content = result.get('content', '')
                source = result.get('source_level', 'unknown')
                score = result.get('relevance_score', 0)
                print(f"      {i+1}. [{source}] {content} (score: {score:.2f})")
        else:
            print(f"   ‚ùå –ü–æ–∏—Å–∫ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        time.sleep(1)
    
    print("\nü§ñ –≠–¢–ê–ü 4: –¢–µ—Å—Ç–∏—Ä—É–µ–º LangGraph pipeline")
    print("-" * 30)
    
    test_questions = [
        "–ö–∞–∫ –º–µ–Ω—è –∑–æ–≤—É—Ç?",
        "–ß—Ç–æ —è –ª—é–±–ª—é –µ—Å—Ç—å?",
        "–ì–¥–µ —è –∂–∏–≤—É?",
        "–ö—Ç–æ –º–æ–π –¥—Ä—É–≥ –∏ –≥–¥–µ –æ–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç?",
        "–ß—Ç–æ —è –ª—é–±–ª—é –¥–µ–ª–∞—Ç—å?"
    ]
    
    for i, question in enumerate(test_questions, 1):
        print(f"\nü§î –í–æ–ø—Ä–æ—Å {i}: '{question}'")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ LangGraph pipeline
        chat_response = send_chat_message(question)
        
        if chat_response:
            parts = chat_response.get('parts', [])
            if parts:
                ai_response = ' '.join(parts)
                print(f"ü§ñ –û—Ç–≤–µ—Ç AI: {ai_response}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–º–Ω–∏—Ç –ª–∏ –º–æ–¥–µ–ª—å —Ñ–∞–∫—Ç—ã
                if "–≥–ª–µ–±" in ai_response.lower():
                    print("   ‚úÖ –ú–æ–¥–µ–ª—å –ø–æ–º–Ω–∏—Ç –∏–º—è!")
                if "–ø–∏—Ü—Ü–∞" in ai_response.lower():
                    print("   ‚úÖ –ú–æ–¥–µ–ª—å –ø–æ–º–Ω–∏—Ç –ª—é–±–∏–º—É—é –µ–¥—É!")
                if "–º–æ—Å–∫–≤–∞" in ai_response.lower():
                    print("   ‚úÖ –ú–æ–¥–µ–ª—å –ø–æ–º–Ω–∏—Ç –≥–¥–µ –∂–∏–≤–µ—Ç!")
                if "–æ–ª–µ–≥" in ai_response.lower() or "–ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç" in ai_response.lower():
                    print("   ‚úÖ –ú–æ–¥–µ–ª—å –ø–æ–º–Ω–∏—Ç –¥—Ä—É–≥–∞!")
                if "—à–∞—Ö–º–∞—Ç—ã" in ai_response.lower():
                    print("   ‚úÖ –ú–æ–¥–µ–ª—å –ø–æ–º–Ω–∏—Ç —Ö–æ–±–±–∏!")
            else:
                print("   ‚ùå –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç")
        else:
            print("   ‚ùå –ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç pipeline")
        
        time.sleep(2)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –≤–æ–ø—Ä–æ—Å–∞–º–∏
    
    print("\nüìä –≠–¢–ê–ü 5: –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã")
    print("-" * 30)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —Ñ–∞–∫—Ç—ã —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å –≤ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –ë–î
    final_search = search_memory("–≥–ª–µ–± –ø–∏—Ü—Ü–∞ –º–æ—Å–∫–≤–∞ –æ–ª–µ–≥ —à–∞—Ö–º–∞—Ç—ã", limit=10)
    if final_search and final_search.get('success'):
        total_found = final_search.get('total_found', 0)
        print(f"üìà –í –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –ë–î –Ω–∞–π–¥–µ–Ω–æ: {total_found} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
        
        if total_found >= 5:
            print("‚úÖ –ê–†–•–ò–¢–ï–ö–¢–£–†–ê –†–ê–ë–û–¢–ê–ï–¢ –ü–†–ê–í–ò–õ–¨–ù–û!")
            print("   ‚Ä¢ –§–∞–∫—Ç—ã —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ –±—É—Ñ–µ—Ä")
            print("   ‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–Ω–æ—Å—è—Ç—Å—è –≤ –≤–µ–∫—Ç–æ—Ä–Ω—É—é –ë–î")
            print("   ‚Ä¢ –ü–æ–∏—Å–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏")
            print("   ‚Ä¢ LangGraph pipeline –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å—ã")
            print("   ‚Ä¢ LLM –ø–æ–ª—É—á–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç")
        else:
            print("‚ö†Ô∏è –ù–µ –≤—Å–µ —Ñ–∞–∫—Ç—ã –Ω–∞–π–¥–µ–Ω—ã –≤ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –ë–î")
    else:
        print("‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å —Ñ–∏–Ω–∞–ª—å–Ω—ã–º –ø–æ–∏—Å–∫–æ–º")
    
    print("\n" + "=" * 50)
    print("üéØ –¢–ï–°–¢ –ê–†–•–ò–¢–ï–ö–¢–£–†–´ –ó–ê–í–ï–†–®–ï–ù")
    print("=" * 50)

if __name__ == "__main__":
    test_architecture()
