#!/usr/bin/env python3

import requests
import time

def test_long_term_memory():
    """–¢–µ—Å—Ç –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–π –ø–∞–º—è—Ç–∏ –ø–æ—Å–ª–µ 10+ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    
    print("üß† –¢–ï–°–¢ –î–û–õ–ì–û–°–†–û–ß–ù–û–ô –ü–ê–ú–Ø–¢–ò")
    print("=" * 50)
    
    user_id = "1132821710"
    
    # –®–∞–≥ 1: –û—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏
    print("üßπ –®–∞–≥ 1: –û—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏")
    try:
        response = requests.post(f"http://localhost:8000/api/memory/{user_id}/clear", timeout=10)
        print(f"   –û—á–∏—Å—Ç–∫–∞: {response.status_code}")
    except Exception as e:
        print(f"   –û—à–∏–±–∫–∞: {e}")
    
    # –®–∞–≥ 2: –î–æ–±–∞–≤–ª—è–µ–º –≤–∞–∂–Ω—ã–µ —Ñ–∞–∫—Ç—ã –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    print("\nüìù –®–∞–≥ 2: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–∞–∂–Ω—ã—Ö —Ñ–∞–∫—Ç–æ–≤ (–ø–µ—Ä–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è)")
    
    important_facts = [
        "–ú–µ–Ω—è –∑–æ–≤—É—Ç –ì–ª–µ–±, –º–Ω–µ 28 –ª–µ—Ç",
        "–Ø —Ä–∞–±–æ—Ç–∞—é Python —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º –≤ IT –∫–æ–º–ø–∞–Ω–∏–∏", 
        "–£–≤–ª–µ–∫–∞—é—Å—å –º–∞—à–∏–Ω–Ω—ã–º –æ–±—É—á–µ–Ω–∏–µ–º –∏ –Ω–µ–π—Ä–æ–Ω–Ω—ã–º–∏ —Å–µ—Ç—è–º–∏",
        "–•–æ–∂—É –≤ —Å–ø–æ—Ä—Ç–∑–∞–ª 3 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é, –∑–∞–Ω–∏–º–∞—é—Å—å —Å–∏–ª–æ–≤—ã–º–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º–∏",
        "–ß–∏—Ç–∞—é –∫–Ω–∏–≥–∏ –ø–æ Data Science –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º"
    ]
    
    for i, fact in enumerate(important_facts):
        try:
            memory_data = {
                'role': 'user',
                'content': fact,
                'metadata': {
                    'source': 'long_term_test',
                    'user_id': user_id,
                    'timestamp': f'2025-09-02T14:0{i}:00Z',
                    'importance': 'high',
                    'category': 'personal_info'
                },
                'conversation_id': f'long_term_test_{user_id}',
                'day_number': 1
            }
            
            response = requests.post(
                f"http://localhost:8000/api/memory/{user_id}/add",
                json=memory_data,
                timeout=15
            )
            
            if response.status_code == 200:
                print(f"   ‚úÖ –§–∞–∫—Ç {i+1}: {fact}")
            else:
                print(f"   ‚ùå –§–∞–∫—Ç {i+1}: {response.status_code}")
                
        except Exception as e:
            print(f"   ‚ùå –§–∞–∫—Ç {i+1}: {e}")
    
    # –®–∞–≥ 3: –î–æ–±–∞–≤–ª—è–µ–º 10+ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    print(f"\nüîÑ –®–∞–≥ 3: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ 12 –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π")
    
    filler_messages = [
        "–ü—Ä–∏–≤–µ—Ç, –∫–∞–∫ –¥–µ–ª–∞?",
        "–ß—Ç–æ –¥–µ–ª–∞–µ—à—å —Å–µ–≥–æ–¥–Ω—è?", 
        "–ö–∞–∫–∞—è –ø–æ–≥–æ–¥–∞?",
        "–ö–∞–∫ –ø—Ä–æ—à–µ–ª –¥–µ–Ω—å?",
        "–ß—Ç–æ –ø–ª–∞–Ω–∏—Ä—É–µ—à—å –Ω–∞ –≤—ã—Ö–æ–¥–Ω—ã–µ?",
        "–°–º–æ—Ç—Ä–µ–ª –ª–∏ –Ω–æ–≤—ã–µ —Ñ–∏–ª—å–º—ã?",
        "–ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ?",
        "–ß—Ç–æ –Ω–æ–≤–æ–≥–æ –≤ —Ä–∞–±–æ—Ç–µ?",
        "–ö–∞–∫ –∑–¥–æ—Ä–æ–≤—å–µ?",
        "–ü–ª–∞–Ω—ã –Ω–∞ –≤–µ—á–µ—Ä?",
        "–ß—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–≥–æ —á–∏—Ç–∞–µ—à—å?",
        "–ö–∞–∫ –ø—Ä–æ—Ö–æ–¥–∏—Ç –Ω–µ–¥–µ–ª—è?"
    ]
    
    for i, message in enumerate(filler_messages):
        try:
            memory_data = {
                'role': 'user',
                'content': message,
                'metadata': {
                    'source': 'filler',
                    'user_id': user_id,
                    'timestamp': f'2025-09-02T15:{i:02d}:00Z',
                    'importance': 'low',
                    'category': 'casual'
                },
                'conversation_id': f'filler_{user_id}',
                'day_number': 1
            }
            
            response = requests.post(
                f"http://localhost:8000/api/memory/{user_id}/add",
                json=memory_data,
                timeout=15
            )
            
            if response.status_code == 200:
                print(f"   ‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ {i+1}: {message}")
            else:
                print(f"   ‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ {i+1}: {response.status_code}")
                
        except Exception as e:
            print(f"   ‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ {i+1}: {e}")
    
    # –®–∞–≥ 4: –ñ–¥–µ–º –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏
    print(f"\n‚è≥ –®–∞–≥ 4: –ñ–¥–µ–º –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏ (10 —Å–µ–∫—É–Ω–¥)")
    time.sleep(10)
    
    # –®–∞–≥ 5: –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–∏—Å–∫ –≤ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –ë–î
    print(f"\nüîç –®–∞–≥ 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –ë–î")
    try:
        search_data = {
            'query': '–ì–ª–µ–± —Ä–∞–±–æ—Ç–∞ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç Python –º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ',
            'max_results': 10,
            'levels': ['long_term']
        }
        
        response = requests.post(
            f"http://localhost:8000/api/memory/{user_id}/search",
            json=search_data,
            timeout=15
        )
        
        if response.status_code == 200:
            result = response.json()
            found_count = result.get('total_found', 0)
            print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–æ: {found_count} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
            
            if found_count > 0:
                results = result.get('results', [])
                important_found = 0
                for i, item in enumerate(results):
                    content = item.get('content', '')
                    score = item.get('relevance_score', 0)
                    print(f"      {i+1}. {content} (score: {score:.2f})")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—à–ª–∏ –ª–∏ –≤–∞–∂–Ω—ã–µ —Ñ–∞–∫—Ç—ã
                    if any(keyword in content.lower() for keyword in ["–≥–ª–µ–±", "python", "—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫", "–º–∞—à–∏–Ω–Ω", "—Å–ø–æ—Ä—Ç"]):
                        important_found += 1
                
                print(f"   üìä –í–∞–∂–Ω—ã—Ö —Ñ–∞–∫—Ç–æ–≤ –Ω–∞–π–¥–µ–Ω–æ: {important_found}/{len(important_facts)}")
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {response.status_code}")
            
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
    
    # –®–∞–≥ 6: –ì–õ–ê–í–ù–´–ô –¢–ï–°–¢ - —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –æ —Ñ–∞–∫—Ç–∞—Ö —á–µ—Ä–µ–∑ –ò–ò
    print(f"\nü§ñ –®–∞–≥ 6: –ì–õ–ê–í–ù–´–ô –¢–ï–°–¢ - –≤–æ–ø—Ä–æ—Å —á–µ—Ä–µ–∑ –ò–ò")
    try:
        chat_data = {
            'user_id': user_id,
            'messages': [{'role': 'user', 'content': '–†–∞—Å—Å–∫–∞–∂–∏ –º–Ω–µ –æ —Å–µ–±–µ: –∫–∞–∫ –º–µ–Ω—è –∑–æ–≤—É—Ç, —Å–∫–æ–ª—å–∫–æ –ª–µ—Ç, –∫–µ–º —Ä–∞–±–æ—Ç–∞—é, —á–µ–º —É–≤–ª–µ–∫–∞—é—Å—å?'}],
            'metaTime': "2025-09-02T16:00:00Z"
        }
        
        print("   ‚ùì –í–æ–ø—Ä–æ—Å: '–†–∞—Å—Å–∫–∞–∂–∏ –º–Ω–µ –æ —Å–µ–±–µ: –∫–∞–∫ –º–µ–Ω—è –∑–æ–≤—É—Ç, —Å–∫–æ–ª—å–∫–æ –ª–µ—Ç, –∫–µ–º —Ä–∞–±–æ—Ç–∞—é, —á–µ–º —É–≤–ª–µ–∫–∞—é—Å—å?'")
        
        response = requests.post(
            "http://localhost:8000/api/chat",
            json=chat_data,
            timeout=60
        )
        
        if response.status_code == 200:
            result = response.json()
            parts = result.get('parts', [])
            
            if parts:
                ai_response = ' '.join(parts)
                print(f"\n   ü§ñ –û–¢–í–ï–¢ –ò–ò:")
                print(f"   {ai_response}")
                
                # –î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–π –ø–∞–º—è—Ç–∏
                memory_checks = {
                    "–∏–º—è": ["–≥–ª–µ–±"],
                    "–≤–æ–∑—Ä–∞—Å—Ç": ["28"],
                    "—Ä–∞–±–æ—Ç–∞": ["python", "—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫", "–ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç"],
                    "—É–≤–ª–µ—á–µ–Ω–∏—è": ["–º–∞—à–∏–Ω–Ω", "–Ω–µ–π—Ä–æ–Ω–Ω", "—Å–ø–æ—Ä—Ç", "data science"],
                }
                
                found_categories = []
                for category, keywords in memory_checks.items():
                    if any(keyword.lower() in ai_response.lower() for keyword in keywords):
                        found_categories.append(category)
                
                print(f"\n   üìä –ê–ù–ê–õ–ò–ó –î–û–õ–ì–û–°–†–û–ß–ù–û–ô –ü–ê–ú–Ø–¢–ò:")
                print(f"   ‚úÖ –ù–ê–ô–î–ï–ù–ù–´–ï –ö–ê–¢–ï–ì–û–†–ò–ò: {', '.join(found_categories)}")
                print(f"   üìà –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï –ü–ê–ú–Ø–¢–ò: {len(found_categories)}/4 –∫–∞—Ç–µ–≥–æ—Ä–∏–π")
                
                if len(found_categories) >= 3:
                    print(f"   üéâ –£–°–ü–ï–•! –î–û–õ–ì–û–°–†–û–ß–ù–ê–Ø –ü–ê–ú–Ø–¢–¨ –†–ê–ë–û–¢–ê–ï–¢")
                    print(f"   ‚úÖ –ò–ò –ø–æ–º–Ω–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–∞–∂–µ –ø–æ—Å–ª–µ 12 –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π")
                elif len(found_categories) >= 1:
                    print(f"   ‚ö†Ô∏è –ß–ê–°–¢–ò–ß–ù–´–ô –£–°–ü–ï–•: –ü–∞–º—è—Ç—å —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ –Ω–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é")
                else:
                    print(f"   ‚ùå –ü–†–û–í–ê–õ: –î–æ–ª–≥–æ—Å—Ä–æ—á–Ω–∞—è –ø–∞–º—è—Ç—å –ù–ï —Ä–∞–±–æ—Ç–∞–µ—Ç")
                    print(f"   üîß –ò–ò –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ñ–∞–∫—Ç—ã, –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –≤ –Ω–∞—á–∞–ª–µ")
            else:
                print("   ‚ùå –ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç –ò–ò")
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ API: {response.status_code}")
            print(f"   –û—Ç–≤–µ—Ç: {response.text}")
            
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
    
    print(f"\n" + "=" * 50)
    if len(found_categories) >= 3:
        print("üéâ –î–û–õ–ì–û–°–†–û–ß–ù–ê–Ø –ü–ê–ú–Ø–¢–¨ –†–ê–ë–û–¢–ê–ï–¢ –ü–†–ê–í–ò–õ–¨–ù–û!")
        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –ø–æ–º–Ω–∏—Ç –≤–∞–∂–Ω—ã–µ —Ñ–∞–∫—Ç—ã –¥–∞–∂–µ –ø–æ—Å–ª–µ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π")
    else:
        print("‚ùå –ü–†–û–ë–õ–ï–ú–ê –° –î–û–õ–ì–û–°–†–û–ß–ù–û–ô –ü–ê–ú–Ø–¢–¨–Æ")
        print("üîß –°–∏—Å—Ç–µ–º–∞ –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç/–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –≤–∞–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ")

if __name__ == "__main__":
    test_long_term_memory()
