#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ —Å–∏—Å—Ç–µ–º—ã –ø–∞–º—è—Ç–∏
–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –ø–æ–∏—Å–∫ —Ñ–∞–∫—Ç–æ–≤ —Å LangSmith —Ç—Ä–µ–π—Å–∏–Ω–≥–æ–º
"""

import os
import sys
import json
import requests
import time
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
API_BASE_URL = "http://localhost:8000"
TEST_USER_ID = "memory_debug_user"

def test_memory_operations():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –ø–∞–º—è—Ç—å—é"""
    print("üß™ –¢–ï–°–¢ –°–ò–°–¢–ï–ú–´ –ü–ê–ú–Ø–¢–ò")
    print("=" * 50)
    
    # 1. –û—á–∏—â–∞–µ–º –ø–∞–º—è—Ç—å
    print("\n1Ô∏è‚É£ –û—á–∏—â–∞–µ–º –ø–∞–º—è—Ç—å...")
    try:
        response = requests.post(f"{API_BASE_URL}/api/memory/{TEST_USER_ID}/clear", timeout=10)
        if response.status_code == 200:
            print("‚úÖ –ü–∞–º—è—Ç—å –æ—á–∏—â–µ–Ω–∞")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: {response.status_code}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: {e}")
    
    # 2. –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–∫—Ç –æ–± –∏–º–µ–Ω–∏
    print("\n2Ô∏è‚É£ –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–∫—Ç –æ–± –∏–º–µ–Ω–∏...")
    name_message = {
        'role': 'user',
        'content': '–ú–µ–Ω—è –∑–æ–≤—É—Ç –ì–ª–µ–±',
        'metadata': {
            'source': 'test',
            'user_id': TEST_USER_ID,
            'timestamp': datetime.now().isoformat(),
            'test': True
        },
        'conversation_id': f'test_{int(datetime.now().timestamp())}',
        'day_number': 1
    }
    
    try:
        response = requests.post(
            f"{API_BASE_URL}/api/memory/{TEST_USER_ID}/add",
            json=name_message,
            timeout=10
        )
        if response.status_code == 200:
            result = response.json()
            print(f"‚úÖ –§–∞–∫—Ç –¥–æ–±–∞–≤–ª–µ–Ω: {json.dumps(result.get('result', {}), indent=2, ensure_ascii=False)}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: {response.status_code}")
            print(f"–û—Ç–≤–µ—Ç: {response.text}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: {e}")
    
    # 3. –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    print("\n3Ô∏è‚É£ –î–æ–±–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è...")
    regular_messages = [
        "–ü—Ä–∏–≤–µ—Ç, –∫–∞–∫ –¥–µ–ª–∞?",
        "–ß—Ç–æ –Ω–æ–≤–æ–≥–æ?", 
        "–†–∞—Å—Å–∫–∞–∂–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ",
        "–ö–∞–∫–∞—è —Å–µ–≥–æ–¥–Ω—è –ø–æ–≥–æ–¥–∞?",
        "–ß—Ç–æ —Ç—ã –¥—É–º–∞–µ—à—å –æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–∏?",
        "–ö–∞–∫ —Ç–≤–æ–∏ –¥–µ–ª–∞?"
    ]
    
    for i, msg in enumerate(regular_messages, 1):
        print(f"  –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ {i}: {msg}")
        message_data = {
            'role': 'user',
            'content': msg,
            'metadata': {
                'source': 'test',
                'user_id': TEST_USER_ID,
                'timestamp': datetime.now().isoformat(),
                'test': True
            },
            'conversation_id': f'test_{int(datetime.now().timestamp())}',
            'day_number': 1
        }
        
        try:
            response = requests.post(
                f"{API_BASE_URL}/api/memory/{TEST_USER_ID}/add",
                json=message_data,
                timeout=10
            )
            if response.status_code == 200:
                print(f"  ‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ {i} –¥–æ–±–∞–≤–ª–µ–Ω–æ")
            else:
                print(f"  ‚ùå –û—à–∏–±–∫–∞ {i}: {response.status_code}")
        except Exception as e:
            print(f"  ‚ùå –û—à–∏–±–∫–∞ {i}: {e}")
        
        time.sleep(0.5)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
    
    # 4. –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ –∏–º–µ–Ω–∏
    print("\n4Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ –∏–º–µ–Ω–∏...")
    try:
        response = requests.post(
            f"{API_BASE_URL}/api/memory/{TEST_USER_ID}/search",
            json={"query": "–∫–∞–∫ –º–µ–Ω—è –∑–æ–≤—É—Ç", "limit": 10},
            timeout=10
        )
        if response.status_code == 200:
            results = response.json()
            print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –∏–º–µ–Ω–∏:")
            for result in results.get('results', []):
                print(f"  üìù {result.get('content', '')}")
                print(f"     –†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {result.get('score', 'N/A')}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {response.status_code}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")
    
    # 5. –¢–µ—Å—Ç–∏—Ä—É–µ–º chat API —Å –≤–æ–ø—Ä–æ—Å–æ–º –æ–± –∏–º–µ–Ω–∏
    print("\n5Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º chat API —Å –≤–æ–ø—Ä–æ—Å–æ–º –æ–± –∏–º–µ–Ω–∏...")
    try:
        chat_data = {
            'user_id': TEST_USER_ID,
            'messages': [{'role': 'user', 'content': '–ö–∞–∫ –º–µ–Ω—è –∑–æ–≤—É—Ç?'}],
            'metaTime': datetime.now().isoformat()
        }
        
        response = requests.post(
            f"{API_BASE_URL}/api/chat",
            json=chat_data,
            timeout=30
        )
        
        if response.status_code == 200:
            chat_result = response.json()
            parts = chat_result.get('parts', [])
            if parts:
                ai_response = ' '.join(parts)
                print(f"‚úÖ –û—Ç–≤–µ—Ç AI: {ai_response}")
            else:
                print("‚ùå –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç AI")
                print(f"–ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç: {json.dumps(chat_result, indent=2, ensure_ascii=False)}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ chat API: {response.status_code}")
            print(f"–û—Ç–≤–µ—Ç: {response.text}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ chat API: {e}")
    
    # 6. –ü–æ–ª—É—á–∞–µ–º –æ–±–∑–æ—Ä –ø–∞–º—è—Ç–∏
    print("\n6Ô∏è‚É£ –ü–æ–ª—É—á–∞–µ–º –æ–±–∑–æ—Ä –ø–∞–º—è—Ç–∏...")
    try:
        response = requests.get(f"{API_BASE_URL}/api/memory/{TEST_USER_ID}/overview", timeout=10)
        if response.status_code == 200:
            overview = response.json()
            print(f"‚úÖ –û–±–∑–æ—Ä –ø–∞–º—è—Ç–∏:")
            print(json.dumps(overview, indent=2, ensure_ascii=False))
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–∑–æ—Ä–∞: {response.status_code}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–∑–æ—Ä–∞: {e}")

if __name__ == "__main__":
    test_memory_operations()
