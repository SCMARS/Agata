#!/usr/bin/env python3

import requests
import time

def test_new_architecture():
    """–¢–µ—Å—Ç –Ω–æ–≤–æ–π —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã –ø–∞–º—è—Ç–∏"""
    
    print("üöÄ –¢–ï–°–¢ –ù–û–í–û–ô –ê–†–•–ò–¢–ï–ö–¢–£–†–´ –ü–ê–ú–Ø–¢–ò")
    print("=" * 60)
    
    user_id = "1132821710"
    
    # –®–∞–≥ 1: –û—á–∏—Å—Ç–∫–∞
    print("üßπ –®–∞–≥ 1: –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏")
    try:
        response = requests.post(f"http://localhost:8000/api/memory/{user_id}/clear", timeout=10)
        print(f"   –û—á–∏—Å—Ç–∫–∞: {response.status_code}")
    except Exception as e:
        print(f"   –û—à–∏–±–∫–∞: {e}")
    
    # –®–∞–≥ 2: –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–∫—Ç—ã –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ (—Ç–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–µ—Ö–æ–¥ short ‚Üí vector)
    print("\nüìù –®–∞–≥ 2: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–∫—Ç–æ–≤ —Å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º –ø–µ—Ä–µ—Ö–æ–¥–æ–≤")
    
    facts = [
        # –°–æ–æ–±—â–µ–Ω–∏—è 1-5: –î–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–æ–π –ø–∞–º—è—Ç–∏
        "–ú–µ–Ω—è –∑–æ–≤—É—Ç –ì–ª–µ–± –£—Ö–æ–≤—Å–∫–∏–π",
        "–ú–Ω–µ 28 –ª–µ—Ç, —Ä–æ–¥–∏–ª—Å—è –≤ –ú–æ—Å–∫–≤–µ", 
        "–†–∞–±–æ—Ç–∞—é Senior Python Developer",
        "–£–≤–ª–µ–∫–∞—é—Å—å –º–∞—à–∏–Ω–Ω—ã–º –æ–±—É—á–µ–Ω–∏–µ–º",
        "–•–æ–∂—É –≤ —Å–ø–æ—Ä—Ç–∑–∞–ª –∫–∞–∂–¥—ã–π –¥–µ–Ω—å",
        
        # –°–æ–æ–±—â–µ–Ω–∏—è 6-10: –í—Å–µ –µ—â–µ –≤ –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–æ–π –ø–∞–º—è—Ç–∏
        "–ò–≥—Ä–∞—é –≤ —à–∞—Ö–º–∞—Ç—ã, —Ä–µ–π—Ç–∏–Ω–≥ 1800",
        "–ò–∑—É—á–∞—é —è–ø–æ–Ω—Å–∫–∏–π —è–∑—ã–∫",
        "–ü–ª–∞–Ω–∏—Ä—É—é –ø–æ–µ–∑–¥–∫—É –≤ –¢–æ–∫–∏–æ",
        "–ß–∏—Ç–∞—é –∫–Ω–∏–≥–∏ –ø–æ –Ω–µ–π—Ä–æ–Ω–Ω—ã–º —Å–µ—Ç—è–º",
        "–†–∞–±–æ—Ç–∞—é —Å PyTorch –∏ TensorFlow",
        
        # –°–æ–æ–±—â–µ–Ω–∏—è 11-15: –î–æ–ª–∂–Ω—ã –≤—ã—Ç–µ—Å–Ω–∏—Ç—å –ø–µ—Ä–≤—ã–µ 5 –≤ –≤–µ–∫—Ç–æ—Ä–Ω—É—é –ë–î
        "–ó–∞–Ω–∏–º–∞—é—Å—å –ø–∞—É—ç—Ä–ª–∏—Ñ—Ç–∏–Ω–≥–æ–º",
        "–õ—é–±–ª—é —Å–ª—É—à–∞—Ç—å –¥–∂–∞–∑",
        "–ì–æ—Ç–æ–≤–ª—é –∏—Ç–∞–ª—å—è–Ω—Å–∫—É—é –∫—É—Ö–Ω—é",
        "–ò–∑—É—á–∞—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É –º–∏–∫—Ä–æ—Å–µ—Ä–≤–∏—Å–æ–≤",
        "–ú–µ—á—Ç–∞—é –æ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–º —Å—Ç–∞—Ä—Ç–∞–ø–µ"
    ]
    
    for i, fact in enumerate(facts):
        try:
            chat_data = {
                'user_id': user_id,
                'messages': [{'role': 'user', 'content': fact}],
                'metaTime': f"2025-09-03T20:{i:02d}:00Z"
            }
            
            response = requests.post(
                "http://localhost:8000/api/chat",
                json=chat_data,
                timeout=30
            )
            
            if response.status_code == 200:
                print(f"   ‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ {i+1:2d}: {fact}")
                
                # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–µ—Ö–æ–¥ –ø–æ—Å–ª–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π
                if i == 9:
                    print(f"   üîÑ –ü–ï–†–ï–•–û–î: –°–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –≤—ã—Ç–µ—Å–Ω–∏—Ç—å –ø–µ—Ä–≤—ã–µ –≤ –≤–µ–∫—Ç–æ—Ä–Ω—É—é –ë–î")
                elif i == 10:
                    print(f"   üóÑÔ∏è –í–´–¢–ï–°–ù–ï–ù–ò–ï: –ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –ë–î")
            else:
                print(f"   ‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ {i+1}: {response.status_code}")
                
        except Exception as e:
            print(f"   ‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ {i+1}: {e}")
    
    print(f"   üìä –î–æ–±–∞–≤–ª–µ–Ω–æ {len(facts)} —Å–æ–æ–±—â–µ–Ω–∏–π")
    print(f"   üí° –û–∂–∏–¥–∞–µ–º–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:")
    print(f"      - –í –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–æ–π –ø–∞–º—è—Ç–∏: —Å–æ–æ–±—â–µ–Ω–∏—è 6-15 (10 —à—Ç)")
    print(f"      - –í –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –ë–î: —Å–æ–æ–±—â–µ–Ω–∏—è 1-5 (5 —à—Ç)")
    
    # –®–∞–≥ 3: –ñ–¥–µ–º –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏
    print(f"\n‚è≥ –®–∞–≥ 3: –ñ–¥–µ–º –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –ë–î (10 —Å–µ–∫—É–Ω–¥)")
    time.sleep(10)
    
    # –®–∞–≥ 4: –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ –°–¢–ê–†–´–• –¥–∞–Ω–Ω—ã—Ö (–¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –ë–î)
    print(f"\nüîç –®–∞–≥ 4: –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ –°–¢–ê–†–´–• –¥–∞–Ω–Ω—ã—Ö (–≤–µ–∫—Ç–æ—Ä–Ω–∞—è –ë–î)")
    
    old_data_tests = [
        ("–ö–∞–∫ –º–µ–Ω—è –∑–æ–≤—É—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é?", ["–ì–ª–µ–± –£—Ö–æ–≤—Å–∫–∏–π"]),
        ("–°–∫–æ–ª—å–∫–æ –º–Ω–µ –ª–µ—Ç?", ["28 –ª–µ—Ç", "–º–æ—Å–∫–≤–∞", "—Ä–æ–¥–∏–ª—Å—è"]),
        ("–ö–∞–∫–∞—è —É –º–µ–Ω—è –¥–æ–ª–∂–Ω–æ—Å—Ç—å?", ["Senior Python Developer"])
    ]
    
    for question, expected_keywords in old_data_tests:
        try:
            chat_data = {
                'user_id': user_id,
                'messages': [{'role': 'user', 'content': question}],
                'metaTime': "2025-09-03T21:00:00Z"
            }
            
            response = requests.post(
                "http://localhost:8000/api/chat",
                json=chat_data,
                timeout=30
            )
            
            if response.status_code == 200:
                result = response.json()
                parts = result.get('parts', [])
                ai_response = ' '.join(parts) if parts else ""
                
                found_keywords = []
                for keyword in expected_keywords:
                    if keyword.lower() in ai_response.lower():
                        found_keywords.append(keyword)
                
                print(f"   ‚ùì {question}")
                print(f"   ü§ñ {ai_response[:100]}...")
                
                if found_keywords:
                    print(f"   ‚úÖ –ù–ê–ô–î–ï–ù–û –∏–∑ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –ë–î: {', '.join(found_keywords)}")
                else:
                    print(f"   ‚ùå –ù–ï –ù–ê–ô–î–ï–ù–û –∏–∑ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –ë–î: {', '.join(expected_keywords)}")
                    
            else:
                print(f"   ‚ùå –û—à–∏–±–∫–∞: {response.status_code}")
                
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
    
    # –®–∞–≥ 5: –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ –ù–û–í–´–• –¥–∞–Ω–Ω—ã—Ö (–¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–æ–π –ø–∞–º—è—Ç–∏)
    print(f"\nüîç –®–∞–≥ 5: –¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ –ù–û–í–´–• –¥–∞–Ω–Ω—ã—Ö (–∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–∞—è –ø–∞–º—è—Ç—å)")
    
    new_data_tests = [
        ("–ß—Ç–æ —è –ø–ª–∞–Ω–∏—Ä—É—é —Å –±–∏–∑–Ω–µ—Å–æ–º?", ["—Å—Ç–∞—Ä—Ç–∞–ø", "–º–µ—á—Ç–∞—é"]),
        ("–ö–∞–∫—É—é –∫—É—Ö–Ω—é —è –≥–æ—Ç–æ–≤–ª—é?", ["–∏—Ç–∞–ª—å—è–Ω—Å–∫—É—é"]),
        ("–ö–∞–∫—É—é –º—É–∑—ã–∫—É —Å–ª—É—à–∞—é?", ["–¥–∂–∞–∑"])
    ]
    
    for question, expected_keywords in new_data_tests:
        try:
            chat_data = {
                'user_id': user_id,
                'messages': [{'role': 'user', 'content': question}],
                'metaTime': "2025-09-03T21:05:00Z"
            }
            
            response = requests.post(
                "http://localhost:8000/api/chat",
                json=chat_data,
                timeout=30
            )
            
            if response.status_code == 200:
                result = response.json()
                parts = result.get('parts', [])
                ai_response = ' '.join(parts) if parts else ""
                
                found_keywords = []
                for keyword in expected_keywords:
                    if keyword.lower() in ai_response.lower():
                        found_keywords.append(keyword)
                
                print(f"   ‚ùì {question}")
                print(f"   ü§ñ {ai_response[:100]}...")
                
                if found_keywords:
                    print(f"   ‚úÖ –ù–ê–ô–î–ï–ù–û –∏–∑ –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–æ–π –ø–∞–º—è—Ç–∏: {', '.join(found_keywords)}")
                else:
                    print(f"   ‚ùå –ù–ï –ù–ê–ô–î–ï–ù–û –∏–∑ –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–æ–π –ø–∞–º—è—Ç–∏: {', '.join(expected_keywords)}")
                    
            else:
                print(f"   ‚ùå –û—à–∏–±–∫–∞: {response.status_code}")
                
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
    
    # –®–∞–≥ 6: –§–∏–Ω–∞–ª—å–Ω—ã–π –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ—Å—Ç
    print(f"\nüéØ –®–∞–≥ 6: –§–ò–ù–ê–õ–¨–ù–´–ô –¢–ï–°–¢ - –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å")
    
    try:
        chat_data = {
            'user_id': user_id,
            'messages': [{'role': 'user', 'content': '–†–∞—Å—Å–∫–∞–∂–∏ –≤—Å–µ —á—Ç–æ –∑–Ω–∞–µ—à—å –æ–±–æ –º–Ω–µ: –∏–º—è, –≤–æ–∑—Ä–∞—Å—Ç, —Ä–∞–±–æ—Ç–∞, —É–≤–ª–µ—á–µ–Ω–∏—è, –ø–ª–∞–Ω—ã'}],
            'metaTime': "2025-09-03T21:10:00Z"
        }
        
        response = requests.post(
            "http://localhost:8000/api/chat",
            json=chat_data,
            timeout=45
        )
        
        if response.status_code == 200:
            result = response.json()
            parts = result.get('parts', [])
            ai_response = ' '.join(parts) if parts else ""
            
            print(f"   ü§ñ –ü–û–õ–ù–´–ô –û–¢–í–ï–¢:")
            print(f"   {ai_response}")
            
            # –ê–Ω–∞–ª–∏–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –æ–±–µ–∏—Ö —Å–∏—Å—Ç–µ–º –ø–∞–º—è—Ç–∏
            old_data_found = 0
            new_data_found = 0
            
            # –°—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ (–¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∏–∑ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –ë–î)
            old_checks = ["—É—Ö–æ–≤—Å–∫–∏–π", "28", "senior", "python"]
            for check in old_checks:
                if check.lower() in ai_response.lower():
                    old_data_found += 1
            
            # –ù–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ (–¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∏–∑ –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–æ–π –ø–∞–º—è—Ç–∏)
            new_checks = ["—Å—Ç–∞—Ä—Ç–∞–ø", "–¥–∂–∞–∑", "–∏—Ç–∞–ª—å—è–Ω—Å–∫", "–ø–∞—É—ç—Ä–ª–∏—Ñ—Ç–∏–Ω–≥"]
            for check in new_checks:
                if check.lower() in ai_response.lower():
                    new_data_found += 1
            
            print(f"\n   üìä –ê–ù–ê–õ–ò–ó –ù–û–í–û–ô –ê–†–•–ò–¢–ï–ö–¢–£–†–´:")
            print(f"   üìö –í–µ–∫—Ç–æ—Ä–Ω–∞—è –ë–î (—Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ): {old_data_found}/4")
            print(f"   üí≠ –ö—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–∞—è –ø–∞–º—è—Ç—å (–Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ): {new_data_found}/4")
            print(f"   üîÑ –û–±—â–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: {old_data_found + new_data_found}/8")
            
            if old_data_found >= 3 and new_data_found >= 2:
                print(f"   üéâ –£–°–ü–ï–•! –ù–æ–≤–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç")
                print(f"   ‚úÖ –°–∏—Å—Ç–µ–º–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –û–ë–ï —Å–∏—Å—Ç–µ–º—ã –ø–∞–º—è—Ç–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            elif old_data_found >= 2 or new_data_found >= 2:
                print(f"   ‚ö†Ô∏è –ß–ê–°–¢–ò–ß–ù–´–ô –£–°–ü–ï–•")
                print(f"   üîß –û–¥–Ω–∞ –∏–∑ —Å–∏—Å—Ç–µ–º –ø–∞–º—è—Ç–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é")
            else:
                print(f"   ‚ùå –ü–†–û–í–ê–õ: –ù–æ–≤–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ –ù–ï —Ä–∞–±–æ—Ç–∞–µ—Ç")
                print(f"   üîß –û–±–µ —Å–∏—Å—Ç–µ–º—ã –ø–∞–º—è—Ç–∏ –Ω–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É—é—Ç")
                
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞: {response.status_code}")
            
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞: {e}")
    
    print(f"\n" + "=" * 60)
    
    total_success = old_data_found + new_data_found
    if total_success >= 6:
        print("üéâ –ù–û–í–ê–Ø –ê–†–•–ò–¢–ï–ö–¢–£–†–ê –†–ê–ë–û–¢–ê–ï–¢ –û–¢–õ–ò–ß–ù–û!")
        print("‚úÖ UnifiedMemoryManager –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —É–ø—Ä–∞–≤–ª—è–µ—Ç –ø–µ—Ä–µ—Ö–æ–¥–∞–º–∏")
        print("‚úÖ –ö—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–∞—è –∏ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–∞—è –ø–∞–º—è—Ç—å —Ä–∞–±–æ—Ç–∞—é—Ç —Å–æ–≤–º–µ—Å—Ç–Ω–æ")
    elif total_success >= 4:
        print("‚ö†Ô∏è –ù–û–í–ê–Ø –ê–†–•–ò–¢–ï–ö–¢–£–†–ê –†–ê–ë–û–¢–ê–ï–¢ –ß–ê–°–¢–ò–ß–ù–û")
        print("üîß –ù—É–∂–Ω—ã –Ω–µ–±–æ–ª—å—à–∏–µ –¥–æ—Ä–∞–±–æ—Ç–∫–∏")
    else:
        print("‚ùå –ù–û–í–ê–Ø –ê–†–•–ò–¢–ï–ö–¢–£–†–ê –ù–ï –†–ê–ë–û–¢–ê–ï–¢")
        print("üîß –¢—Ä–µ–±—É—é—Ç—Å—è —Å–µ—Ä—å–µ–∑–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è")

if __name__ == "__main__":
    test_new_architecture()
