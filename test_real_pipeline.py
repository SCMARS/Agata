#!/usr/bin/env python3
"""
–†–ï–ê–õ–¨–ù–´–ô –¢–ï–°–¢: LangGraph Pipeline —Å –ø–∞–º—è—Ç—å—é
–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –∫–∞–∫ pipeline —Ä–µ–∞–ª—å–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å —Å–∏—Å—Ç–µ–º–æ–π –ø–∞–º—è—Ç–∏
"""

import asyncio
import sys
import os
from datetime import datetime, timedelta

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from app.memory.hybrid_memory import HybridMemory
from app.memory.base import Message, MemoryContext
from app.graph.pipeline import AgathaPipeline, PipelineState

async def test_real_pipeline_workflow():
    """–¢–µ—Å—Ç —Ä–µ–∞–ª—å–Ω–æ–≥–æ workflow LangGraph pipeline —Å –ø–∞–º—è—Ç—å—é"""
    
    print('üöÄ –†–ï–ê–õ–¨–ù–´–ô –¢–ï–°–¢: LangGraph Pipeline + –ü–∞–º—è—Ç—å')
    print('=' * 70)
    
    # –°–æ–∑–¥–∞–µ–º –≥–∏–±—Ä–∏–¥–Ω—É—é –ø–∞–º—è—Ç—å
    memory = HybridMemory('user_pipeline_test')
    context = MemoryContext(user_id='user_pipeline_test', day_number=1)
    
    # –°–æ–∑–¥–∞–µ–º pipeline
    pipeline = AgathaPipeline()
    
    print('‚úÖ Pipeline —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ')
    
    # –°–¶–ï–ù–ê–†–ò–ô 1: –ü–µ—Ä–≤–æ–µ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–æ
    print('\nüìù –°–¶–ï–ù–ê–†–ò–ô 1: –ü–µ—Ä–≤–æ–µ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–æ')
    print('-' * 50)
    
    # –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_message = "–ü—Ä–∏–≤–µ—Ç! –ú–µ–Ω—è –∑–æ–≤—É—Ç –ê–Ω–Ω–∞, —è –≤—Ä–∞—á-—Ç–µ—Ä–∞–ø–µ–≤—Ç. –†–∞–±–æ—Ç–∞—é –≤ –ø–æ–ª–∏–∫–ª–∏–Ω–∏–∫–µ —É–∂–µ 5 –ª–µ—Ç."
    
    # –°–æ–∑–¥–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è pipeline (–∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É)
    pipeline_state = PipelineState(
        user_id='user_pipeline_test',
        messages=[],
        meta_time=datetime.utcnow(),
        normalized_input=user_message,
        memory_context=str(context),
        day_prompt="",
        behavior_prompt="",
        final_prompt="",
        llm_response="",
        processed_response={},
        current_strategy="",
        behavioral_analysis={},
        strategy_confidence=0.0,
        day_number=1,
        question_count=0,
        processing_start=datetime.utcnow()
    )
    
    print(f'üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_message}')
    print(f'üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ pipeline: user_id={pipeline_state["user_id"]}, day_number={pipeline_state["day_number"]}')
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ø–∞–º—è—Ç—å
    user_msg = Message('user', user_message, datetime.utcnow())
    await memory.add_message(user_msg, context)
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è AI
    ai_context = await memory.get_context(context)
    print(f'üß† –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è AI: {ai_context}')
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º AI-–æ—Ç–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–∞–º—è—Ç–∏
    ai_response = "–ü—Ä–∏–≤–µ—Ç, –ê–Ω–Ω–∞! –û—á–µ–Ω—å –ø—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è! –Ø –ø–æ–º–Ω—é, —á—Ç–æ —Ç—ã –≤—Ä–∞—á-—Ç–µ—Ä–∞–ø–µ–≤—Ç —Å 5-–ª–µ—Ç–Ω–∏–º –æ–ø—ã—Ç–æ–º —Ä–∞–±–æ—Ç—ã –≤ –ø–æ–ª–∏–∫–ª–∏–Ω–∏–∫–µ. –†–∞—Å—Å–∫–∞–∂–∏, —á—Ç–æ —Ç–µ–±—è –ø—Ä–∏–≤–µ–ª–æ –∫–æ –º–Ω–µ —Å–µ–≥–æ–¥–Ω—è?"
    
    print(f'ü§ñ AI-–æ—Ç–≤–µ—Ç: {ai_response}')
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç AI
    ai_msg = Message('assistant', ai_response, datetime.utcnow())
    await memory.add_message(ai_msg, context)
    
    # –°–¶–ï–ù–ê–†–ò–ô 2: –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
    print('\nüìù –°–¶–ï–ù–ê–†–ò–ô 2: –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞')
    print('-' * 50)
    
    # –°–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_message_2 = "–£ –º–µ–Ω—è –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å –ø–æ –∫–∞—Ä–¥–∏–æ–ª–æ–≥–∏–∏. –ü–∞—Ü–∏–µ–Ω—Ç –∂–∞–ª—É–µ—Ç—Å—è –Ω–∞ –±–æ–ª–∏ –≤ –≥—Ä—É–¥–∏. –ß—Ç–æ –¥–µ–ª–∞—Ç—å?"
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ pipeline
    pipeline_state["normalized_input"] = user_message_2
    pipeline_state["question_count"] += 1
    
    print(f'üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_message_2}')
    print(f'üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ pipeline: question_count={pipeline_state["question_count"]}')
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    user_msg_2 = Message('user', user_message_2, datetime.utcnow())
    await memory.add_message(user_msg_2, context)
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
    updated_context = await memory.get_context(context)
    print(f'üß† –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç: {updated_context}')
    
    # AI –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Å–µ–π –∏—Å—Ç–æ—Ä–∏–∏
    ai_response_2 = "–ê–Ω–Ω–∞, —É—á–∏—Ç—ã–≤–∞—è —Ç–≤–æ–π –æ–ø—ã—Ç —Ç–µ—Ä–∞–ø–µ–≤—Ç–∞, —Ç—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–∞—â–∞–µ—à—å –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –±–æ–ª–∏ –≤ –≥—Ä—É–¥–∏. –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–µ—Ä—å–µ–∑–Ω–æ. –ù—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Å—Ç–∏ –≠–ö–ì, –∏–∑–º–µ—Ä–∏—Ç—å –¥–∞–≤–ª–µ–Ω–∏–µ, —Å–æ–±—Ä–∞—Ç—å –∞–Ω–∞–º–Ω–µ–∑. –ü–æ–º–Ω–∏—à—å, —á—Ç–æ —Ç—ã —Ä–∞–±–æ—Ç–∞–µ—à—å –≤ –ø–æ–ª–∏–∫–ª–∏–Ω–∏–∫–µ - —É —Ç–µ–±—è –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ —ç—Ç–∏–º –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è–º?"
    
    print(f'ü§ñ AI-–æ—Ç–≤–µ—Ç: {ai_response_2}')
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
    ai_msg_2 = Message('assistant', ai_response_2, datetime.utcnow())
    await memory.add_message(ai_msg_2, context)
    
    # –°–¶–ï–ù–ê–†–ò–ô 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–º—è—Ç–∏
    print('\nüìù –°–¶–ï–ù–ê–†–ò–ô 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–º—è—Ç–∏')
    print('-' * 50)
    
    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –ø–æ–º–Ω–∏—Ç –ª–∏ AI –¥–µ—Ç–∞–ª–∏
    user_message_3 = "–¢—ã –ø–æ–º–Ω–∏—à—å, —á—Ç–æ —è —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞–ª–∞ –æ —Å–µ–±–µ?"
    
    pipeline_state["normalized_input"] = user_message_3
    pipeline_state["question_count"] += 1
    
    print(f'üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_message_3}')
    print(f'üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ pipeline: question_count={pipeline_state["question_count"]}')
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    user_msg_3 = Message('user', user_message_3, datetime.utcnow())
    await memory.add_message(user_msg_3, context)
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
    full_context = await memory.get_context(context)
    print(f'üß† –ü–æ–ª–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç: {full_context}')
    
    # AI –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–∞–º—è—Ç–∏
    ai_response_3 = "–ö–æ–Ω–µ—á–Ω–æ, –ê–Ω–Ω–∞! –Ø –ø–æ–º–Ω—é, —á—Ç–æ —Ç—ã –≤—Ä–∞—á-—Ç–µ—Ä–∞–ø–µ–≤—Ç, —Ä–∞–±–æ—Ç–∞–µ—à—å –≤ –ø–æ–ª–∏–∫–ª–∏–Ω–∏–∫–µ —É–∂–µ 5 –ª–µ—Ç. –£ —Ç–µ–±—è –µ—Å—Ç—å –æ–ø—ã—Ç, –∏ —Ç—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ–¥—Ö–æ–¥–∏—à—å –∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–µ. –°–µ–π—á–∞—Å –º—ã –æ–±—Å—É–∂–¥–∞–ª–∏ —Å–ª—É—á–∞–π —Å –ø–∞—Ü–∏–µ–Ω—Ç–æ–º, —É –∫–æ—Ç–æ—Ä–æ–≥–æ –±–æ–ª–∏ –≤ –≥—Ä—É–¥–∏, –∏ —Ç—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ä–µ—à–∏–ª–∞ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è —Å —ç—Ç–∏–º —Å–µ—Ä—å–µ–∑–Ω–æ. –Ø –ø–æ–º–Ω—é –≤—Å–µ –¥–µ—Ç–∞–ª–∏ –Ω–∞—à–µ–≥–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞!"
    
    print(f'ü§ñ AI-–æ—Ç–≤–µ—Ç: {ai_response_3}')
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
    ai_msg_3 = Message('assistant', ai_response_3, datetime.utcnow())
    await memory.add_message(ai_msg_3, context)
    
    # –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: –ü–æ–∏—Å–∫ –ø–æ –ø–∞–º—è—Ç–∏
    print('\nüîç –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: –ü–æ–∏—Å–∫ –ø–æ –ø–∞–º—è—Ç–∏')
    print('-' * 50)
    
    search_queries = ['–ê–Ω–Ω–∞', '–≤—Ä–∞—á', '—Ç–µ—Ä–∞–ø–µ–≤—Ç', '–ø–æ–ª–∏–∫–ª–∏–Ω–∏–∫–∞', '–∫–∞—Ä–¥–∏–æ–ª–æ–≥–∏—è', '–±–æ–ª–∏ –≤ –≥—Ä—É–¥–∏', '5 –ª–µ—Ç']
    
    for query in search_queries:
        results = await memory.search_memory(query, limit=2)
        print(f'  "{query}": –Ω–∞–π–¥–µ–Ω–æ {len(results)} –∑–∞–ø–∏—Å–µ–π')
        if results:
            for result in results:
                print(f'    - {result["content"][:60]}... (–≤–∞–∂–Ω–æ—Å—Ç—å: {result["importance_score"]:.2f})')
    
    # –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_profile = await memory.get_user_profile()
    print(f'\nüë§ –§–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_profile}')
    
    print('\nüéâ –†–ï–ê–õ–¨–ù–´–ô –¢–ï–°–¢ PIPELINE –ó–ê–í–ï–†–®–ï–ù!')
    print('=' * 70)

if __name__ == "__main__":
    asyncio.run(test_real_pipeline_workflow()) 