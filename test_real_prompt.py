#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –†–ï–ê–õ–¨–ù–û–ì–û –ø—Ä–æ–º–ø—Ç–∞ –∏ –æ—Ç–≤–µ—Ç–æ–≤ –º–æ–¥–µ–ª–∏
–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —á—Ç–æ –∏–º–µ–Ω–Ω–æ –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è –≤ –ø—Ä–æ–º–ø—Ç –∏ —á—Ç–æ –æ—Ç–≤–µ—á–∞–µ—Ç AI
"""

import requests
import json
import time
from datetime import datetime

API_BASE_URL = "http://localhost:8000"
TEST_USER = "prompt_test"

def clear_memory():
    """–û—á–∏—â–∞–µ—Ç –ø–∞–º—è—Ç—å"""
    try:
        requests.post(f"{API_BASE_URL}/api/memory/{TEST_USER}/clear", timeout=10)
        print("üßπ –ü–∞–º—è—Ç—å –æ—á–∏—â–µ–Ω–∞")
    except:
        print("‚ö†Ô∏è –û—á–∏—Å—Ç–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å")

def add_fact(content):
    """–î–æ–±–∞–≤–ª—è–µ—Ç —Ñ–∞–∫—Ç –≤ –ø–∞–º—è—Ç—å"""
    memory_data = {
        'role': 'user',
        'content': content,
        'metadata': {'source': 'test', 'user_id': TEST_USER, 'timestamp': datetime.now().isoformat()},
        'conversation_id': f'test_{int(datetime.now().timestamp())}',
        'day_number': 1
    }
    
    try:
        response = requests.post(f"{API_BASE_URL}/api/memory/{TEST_USER}/add", json=memory_data, timeout=20)
        if response.status_code == 200:
            result = response.json().get('result', {})
            print(f"‚úÖ –§–∞–∫—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: short_term={result.get('short_term')}, long_term={result.get('long_term')}")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

def test_chat_with_debug(question):
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —á–∞—Ç —Å –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π"""
    print(f"\nü§î –í–û–ü–†–û–°: '{question}'")
    print("-" * 50)
    
    try:
        chat_data = {
            'user_id': TEST_USER,
            'messages': [{'role': 'user', 'content': question}],
            'metaTime': datetime.now().isoformat()
        }
        
        response = requests.post(f"{API_BASE_URL}/api/chat", json=chat_data, timeout=45)
        
        if response.status_code == 200:
            chat_result = response.json()
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ü–û–õ–ù–´–ô —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            print("üìã –ü–û–õ–ù–´–ô –û–¢–í–ï–¢ API:")
            print(json.dumps(chat_result, indent=2, ensure_ascii=False))
            
            parts = chat_result.get('parts', [])
            if parts:
                ai_response = ' '.join(parts)
                print(f"\nü§ñ –û–¢–í–ï–¢ –ú–û–î–ï–õ–ò: {ai_response}")
                return ai_response
            else:
                print("‚ùå –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏")
                return ""
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ chat API: {response.status_code}")
            print(f"–û—Ç–≤–µ—Ç: {response.text}")
            return ""
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return ""

def check_memory_search(query):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä—è–º–æ–π –ø–æ–∏—Å–∫ –≤ –ø–∞–º—è—Ç–∏"""
    print(f"\nüîç –ü–†–Ø–ú–û–ô –ü–û–ò–°–ö –í –ü–ê–ú–Ø–¢–ò: '{query}'")
    print("-" * 40)
    
    try:
        response = requests.post(
            f"{API_BASE_URL}/api/memory/{TEST_USER}/search",
            json={"query": query, "limit": 5},
            timeout=15
        )
        if response.status_code == 200:
            results = response.json()
            found_results = results.get('results', [])
            print(f"üìä –ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(found_results)}")
            
            for i, result in enumerate(found_results, 1):
                content = result.get('content', '')
                score = result.get('score', 'N/A')
                print(f"  {i}. {content} (—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {score})")
            
            return found_results
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {response.status_code}")
            return []
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}")
        return []

def main():
    """–û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ—Å—Ç"""
    print("üîç –¢–ï–°–¢ –†–ï–ê–õ–¨–ù–û–ì–û –ü–†–û–ú–ü–¢–ê –ò –û–¢–í–ï–¢–û–í")
    print("=" * 60)
    
    # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞
    print("‚è≥ –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ —Å–∏—Å—Ç–µ–º—ã...")
    time.sleep(10)
    
    # –û—á–∏—â–∞–µ–º –ø–∞–º—è—Ç—å
    clear_memory()
    time.sleep(2)
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–∫—Ç—ã
    print("\nüìù –î–û–ë–ê–í–õ–Ø–ï–ú –§–ê–ö–¢–´...")
    add_fact("–ú–µ–Ω—è –∑–æ–≤—É—Ç –ì–ª–µ–±")
    time.sleep(3)
    add_fact("–Ø —Ä–∞–±–æ—Ç–∞—é –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–æ–º")
    time.sleep(3)
    add_fact("–õ—é–±–ª—é –ø–∏—Ü—Ü—É —Å –≥—Ä–∏–±–∞–º–∏")
    time.sleep(3)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    print("\nüí¨ –î–û–ë–ê–í–õ–Ø–ï–ú –û–ë–´–ß–ù–´–ï –°–û–û–ë–©–ï–ù–ò–Ø...")
    ordinary = ["–ü—Ä–∏–≤–µ—Ç", "–ö–∞–∫ –¥–µ–ª–∞", "–•–æ—Ä–æ—à–∞—è –ø–æ–≥–æ–¥–∞", "–ß—Ç–æ –Ω–æ–≤–æ–≥–æ", "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ"]
    for msg in ordinary:
        add_fact(msg)
        time.sleep(2)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä—è–º–æ–π –ø–æ–∏—Å–∫ –≤ –ø–∞–º—è—Ç–∏
    print("\n" + "=" * 60)
    print("üîç –ü–†–û–í–ï–†–Ø–ï–ú –ü–†–Ø–ú–û–ô –ü–û–ò–°–ö –í –í–ï–ö–¢–û–†–ù–û–ô –ë–î")
    print("=" * 60)
    
    name_results = check_memory_search("–∫–∞–∫ –º–µ–Ω—è –∑–æ–≤—É—Ç")
    work_results = check_memory_search("–≥–¥–µ —è —Ä–∞–±–æ—Ç–∞—é")
    food_results = check_memory_search("—á—Ç–æ —è –ª—é–±–ª—é –µ—Å—Ç—å")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –†–ï–ê–õ–¨–ù–´–ï –æ—Ç–≤–µ—Ç—ã –º–æ–¥–µ–ª–∏
    print("\n" + "=" * 60)
    print("ü§ñ –¢–ï–°–¢–ò–†–£–ï–ú –†–ï–ê–õ–¨–ù–´–ï –û–¢–í–ï–¢–´ –ú–û–î–ï–õ–ò")
    print("=" * 60)
    
    # –í–æ–ø—Ä–æ—Å 1: –ò–º—è
    response1 = test_chat_with_debug("–ö–∞–∫ –º–µ–Ω—è –∑–æ–≤—É—Ç?")
    name_remembered = "–≥–ª–µ–±" in response1.lower()
    
    time.sleep(5)
    
    # –í–æ–ø—Ä–æ—Å 2: –†–∞–±–æ—Ç–∞  
    response2 = test_chat_with_debug("–ö–µ–º —è —Ä–∞–±–æ—Ç–∞—é?")
    work_remembered = "–ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç" in response2.lower()
    
    time.sleep(5)
    
    # –í–æ–ø—Ä–æ—Å 3: –ï–¥–∞
    response3 = test_chat_with_debug("–ß—Ç–æ —è –ª—é–±–ª—é –µ—Å—Ç—å?")
    food_remembered = "–ø–∏—Ü—Ü–∞" in response3.lower() or "–≥—Ä–∏–±" in response3.lower()
    
    # –ò–¢–û–ì–û–í–´–ô –ê–ù–ê–õ–ò–ó
    print("\n" + "=" * 60)
    print("üìä –ê–ù–ê–õ–ò–ó –†–ï–ê–õ–¨–ù–û–ô –†–ê–ë–û–¢–´ –°–ò–°–¢–ï–ú–´")
    print("=" * 60)
    
    print(f"üîç –ü–û–ò–°–ö –í –í–ï–ö–¢–û–†–ù–û–ô –ë–î:")
    print(f"  ‚Ä¢ –ü–æ–∏—Å–∫ –∏–º–µ–Ω–∏: {len(name_results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
    print(f"  ‚Ä¢ –ü–æ–∏—Å–∫ —Ä–∞–±–æ—Ç—ã: {len(work_results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
    print(f"  ‚Ä¢ –ü–æ–∏—Å–∫ –µ–¥—ã: {len(food_results)} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
    
    print(f"\nü§ñ –û–¢–í–ï–¢–´ –ú–û–î–ï–õ–ò:")
    print(f"  ‚Ä¢ –ü–æ–º–Ω–∏—Ç –∏–º—è '–ì–ª–µ–±': {'‚úÖ' if name_remembered else '‚ùå'}")
    print(f"  ‚Ä¢ –ü–æ–º–Ω–∏—Ç —Ä–∞–±–æ—Ç—É '–ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç': {'‚úÖ' if work_remembered else '‚ùå'}")
    print(f"  ‚Ä¢ –ü–æ–º–Ω–∏—Ç –µ–¥—É '–ø–∏—Ü—Ü–∞ —Å –≥—Ä–∏–±–∞–º–∏': {'‚úÖ' if food_remembered else '‚ùå'}")
    
    total_success = sum([name_remembered, work_remembered, food_remembered])
    
    print(f"\nüéØ –û–ë–©–ò–ô –†–ï–ó–£–õ–¨–¢–ê–¢: {total_success}/3 —Ñ–∞–∫—Ç–æ–≤ –ø–æ–º–Ω–∏—Ç –º–æ–¥–µ–ª—å")
    
    if total_success == 3:
        print("üéâ –û–¢–õ–ò–ß–ù–û! –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ!")
        print("   ‚úÖ –í–µ–∫—Ç–æ—Ä–Ω–∞—è –ë–î —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ñ–∞–∫—Ç—ã")
        print("   ‚úÖ –ü–æ–∏—Å–∫ –Ω–∞—Ö–æ–¥–∏—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é") 
        print("   ‚úÖ –ú–æ–¥–µ–ª—å –ø–æ–ª—É—á–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –≤ –ø—Ä–æ–º–ø—Ç–µ")
    elif total_success >= 2:
        print("üëç –•–û–†–û–®–û! –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç, –µ—Å—Ç—å –º–µ–ª–∫–∏–µ –ø—Ä–æ–±–ª–µ–º—ã")
    else:
        print("‚ùå –ü–†–û–ë–õ–ï–ú–´! –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ")

if __name__ == "__main__":
    main()
