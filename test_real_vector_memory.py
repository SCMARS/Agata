#!/usr/bin/env python3

import requests
import time

def test_real_vector_memory():
    """–†–ï–ê–õ–¨–ù–´–ô —Ç–µ—Å—Ç –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –ø–∞–º—è—Ç–∏ - –¥–æ–±–∞–≤–ª—è–µ–º 50+ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    
    print("üîç –†–ï–ê–õ–¨–ù–´–ô –¢–ï–°–¢ –í–ï–ö–¢–û–†–ù–û–ô –ë–ê–ó–´ –î–ê–ù–ù–´–•")
    print("=" * 60)
    
    user_id = "1132821710"
    
    # –®–∞–≥ 1: –û—á–∏—Å—Ç–∫–∞
    print("üßπ –®–∞–≥ 1: –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏")
    try:
        response = requests.post(f"http://localhost:8000/api/memory/{user_id}/clear", timeout=10)
        print(f"   –û—á–∏—Å—Ç–∫–∞: {response.status_code}")
    except Exception as e:
        print(f"   –û—à–∏–±–∫–∞: {e}")
    
    # –®–∞–≥ 2: –î–æ–±–∞–≤–ª—è–µ–º –≤–∞–∂–Ω—ã–µ —Ñ–∞–∫—Ç—ã –≤ –°–ê–ú–û–ú –ù–ê–ß–ê–õ–ï
    print("\nüìù –®–∞–≥ 2: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–∞–∂–Ω—ã—Ö —Ñ–∞–∫—Ç–æ–≤ (–°–ê–ú–û–ï –ù–ê–ß–ê–õ–û)")
    
    important_facts = [
        "–ú–µ–Ω—è –∑–æ–≤—É—Ç –ì–ª–µ–± –£—Ö–æ–≤—Å–∫–∏–π, –º–Ω–µ 28 –ª–µ—Ç, —Ä–æ–¥–∏–ª—Å—è –≤ –ú–æ—Å–∫–≤–µ",
        "–†–∞–±–æ—Ç–∞—é Senior Python Developer –≤ –∫—Ä—É–ø–Ω–æ–π IT –∫–æ–º–ø–∞–Ω–∏–∏", 
        "–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Å—å –Ω–∞ –º–∞—à–∏–Ω–Ω–æ–º –æ–±—É—á–µ–Ω–∏–∏ –∏ Computer Vision",
        "–£–≤–ª–µ–∫–∞—é—Å—å –≥–ª—É–±–æ–∫–∏–º –æ–±—É—á–µ–Ω–∏–µ–º, —Ä–∞–±–æ—Ç–∞—é —Å PyTorch –∏ TensorFlow",
        "–•–æ–∂—É –≤ —Å–ø–æ—Ä—Ç–∑–∞–ª 4 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é, –∑–∞–Ω–∏–º–∞—é—Å—å –ø–∞—É—ç—Ä–ª–∏—Ñ—Ç–∏–Ω–≥–æ–º",
        "–ß–∏—Ç–∞—é –∫–Ω–∏–≥–∏ –ø–æ AI/ML, –Ω–µ–¥–∞–≤–Ω–æ –∏–∑—É—á–∞–ª —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–µ—Ä—ã",
        "–õ—é–±–ª—é –∏–≥—Ä–∞—Ç—å –≤ —à–∞—Ö–º–∞—Ç—ã, –º–æ–π —Ä–µ–π—Ç–∏–Ω–≥ 1800 ELO",
        "–ò–∑—É—á–∞—é —è–ø–æ–Ω—Å–∫–∏–π —è–∑—ã–∫, –ø–ª–∞–Ω–∏—Ä—É—é –ø–æ–µ–∑–¥–∫—É –≤ –¢–æ–∫–∏–æ"
    ]
    
    for i, fact in enumerate(important_facts):
        try:
            memory_data = {
                'role': 'user',
                'content': fact,
                'metadata': {
                    'source': 'vector_test_facts',
                    'user_id': user_id,
                    'timestamp': f'2025-09-01T10:{i:02d}:00Z',
                    'importance': 'high',
                    'category': 'personal_info'
                },
                'conversation_id': f'vector_test_{user_id}',
                'day_number': 1
            }
            
            response = requests.post(
                f"http://localhost:8000/api/memory/{user_id}/add",
                json=memory_data,
                timeout=15
            )
            
            if response.status_code == 200:
                print(f"   ‚úÖ –§–∞–∫—Ç {i+1}: {fact[:50]}...")
            else:
                print(f"   ‚ùå –§–∞–∫—Ç {i+1}: {response.status_code}")
                
        except Exception as e:
            print(f"   ‚ùå –§–∞–∫—Ç {i+1}: {e}")
    
    # –®–∞–≥ 3: –î–æ–±–∞–≤–ª—è–µ–º 50+ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    print(f"\nüîÑ –®–∞–≥ 3: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ 50+ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π")
    print("(–≠—Ç–æ –¥–æ–ª–∂–Ω–æ –ü–û–õ–ù–û–°–¢–¨–Æ –≤—ã—Ç–µ—Å–Ω–∏—Ç—å –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω—É—é –ø–∞–º—è—Ç—å)")
    
    filler_messages = [
        "–ü—Ä–∏–≤–µ—Ç", "–ö–∞–∫ –¥–µ–ª–∞?", "–ß—Ç–æ –¥–µ–ª–∞–µ—à—å?", "–ö–∞–∫–∞—è –ø–æ–≥–æ–¥–∞?", "–ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ?",
        "–ß—Ç–æ –ø–ª–∞–Ω–∏—Ä—É–µ—à—å?", "–ö–∞–∫ –ø—Ä–æ—à–µ–ª –¥–µ–Ω—å?", "–ß—Ç–æ –Ω–æ–≤–æ–≥–æ?", "–ö–∞–∫ –∑–¥–æ—Ä–æ–≤—å–µ?", "–ü–ª–∞–Ω—ã –Ω–∞ –≤–µ—á–µ—Ä?",
        "–°–º–æ—Ç—Ä–µ–ª —Ñ–∏–ª—å–º—ã?", "–ß—Ç–æ —á–∏—Ç–∞–µ—à—å?", "–ö–∞–∫ —Ä–∞–±–æ—Ç–∞?", "–ß—Ç–æ –µ–¥–∏–º?", "–ö–∞–∫ –≤—ã—Ö–æ–¥–Ω—ã–µ?",
        "–ü–ª–∞–Ω—ã –Ω–∞ –æ—Ç–ø—É—Å–∫?", "–ß—Ç–æ –ø–æ–∫—É–ø–∞–µ—à—å?", "–ö–∞–∫ —Å–µ–º—å—è?", "–ß—Ç–æ —Å–ª—É—à–∞–µ—à—å?", "–ì–¥–µ –≥—É–ª—è–µ—à—å?",
        "–ö–∞–∫ —É—á–µ–±–∞?", "–ß—Ç–æ –≥–æ—Ç–æ–≤–∏—à—å?", "–ö–∞–∫ —Å–ø–æ—Ä—Ç?", "–ß—Ç–æ –∏–≥—Ä–∞–µ—à—å?", "–ö–∞–∫ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç?",
        "–ß—Ç–æ —Å–º–æ—Ç—Ä–∏—à—å?", "–ö–∞–∫ –ø–æ–≥–æ–¥–∞?", "–ß—Ç–æ –ø—å–µ—à—å?", "–ö–∞–∫ —Å–æ–Ω?", "–ß—Ç–æ –ø–æ–∫—É–ø–∞—Ç—å?",
        "–ö–∞–∫ –¥–æ—Ä–æ–≥–∞?", "–ß—Ç–æ –¥–µ–ª–∞—Ç—å?", "–ö–∞–∫ –≤—Ä–µ–º—è?", "–ß—Ç–æ –µ—Å—Ç—å?", "–ö–∞–∫ –¥–µ–ª–∞ –¥–æ–º–∞?",
        "–ß—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–≥–æ?", "–ö–∞–∫ –ø—Ä–æ–µ–∫—Ç—ã?", "–ß—Ç–æ –Ω–æ–≤–æ–≥–æ –≤ –º–∏—Ä–µ?", "–ö–∞–∫ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏?", "–ß—Ç–æ –º–æ–¥–Ω–æ?",
        "–ö–∞–∫ –¥—Ä—É–∑—å—è?", "–ß—Ç–æ –≤ –ø–ª–∞–Ω–∞—Ö?", "–ö–∞–∫ –±–∏–∑–Ω–µ—Å?", "–ß—Ç–æ –∏–∑—É—á–∞–µ—à—å?", "–ö–∞–∫ –æ—Ç–¥—ã—Ö?",
        "–ß—Ç–æ –ø–æ–∫—É–ø–∞–ª?", "–ö–∞–∫ –ø–æ–µ–∑–¥–∫–∞?", "–ß—Ç–æ –≥–æ—Ç–æ–≤–∏–ª?", "–ö–∞–∫ –≤—Å—Ç—Ä–µ—á–∞?", "–ß—Ç–æ –ø–ª–∞–Ω–∏—Ä—É–µ—à—å –∑–∞–≤—Ç—Ä–∞?",
        "–ö–∞–∫ –ø—Ä–æ—à–ª–∞ –Ω–µ–¥–µ–ª—è?", "–ß—Ç–æ –±—É–¥–µ—à—å –¥–µ–ª–∞—Ç—å?", "–ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å–µ–≥–æ–¥–Ω—è?", "–ß—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–≥–æ —Å–ª—É—á–∏–ª–æ—Å—å?", "–ö–∞–∫ –ø–ª–∞–Ω—ã –Ω–∞ –º–µ—Å—è—Ü?"
    ]
    
    for i, message in enumerate(filler_messages):
        try:
            memory_data = {
                'role': 'user',
                'content': message,
                'metadata': {
                    'source': 'filler_overload',
                    'user_id': user_id,
                    'timestamp': f'2025-09-02T{10 + i//60}:{(i%60):02d}:00Z',
                    'importance': 'low',
                    'category': 'casual'
                },
                'conversation_id': f'filler_overload_{user_id}',
                'day_number': 1
            }
            
            response = requests.post(
                f"http://localhost:8000/api/memory/{user_id}/add",
                json=memory_data,
                timeout=15
            )
            
            if response.status_code == 200 and i % 10 == 0:
                print(f"   ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {i+1} –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π...")
            elif response.status_code != 200:
                print(f"   ‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ {i+1}: {response.status_code}")
                
        except Exception as e:
            print(f"   ‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ {i+1}: {e}")
    
    print(f"   ‚úÖ –í—Å–µ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ: {len(filler_messages)} –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π")
    print(f"   üìä –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {len(important_facts) + len(filler_messages)}")
    
    # –®–∞–≥ 4: –ñ–¥–µ–º –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏
    print(f"\n‚è≥ –®–∞–≥ 4: –ñ–¥–µ–º –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –ë–î (15 —Å–µ–∫—É–Ω–¥)")
    time.sleep(15)
    
    # –®–∞–≥ 5: –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä—è–º–æ–π –ø–æ–∏—Å–∫ –≤ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –ë–î
    print(f"\nüîç –®–∞–≥ 5: –ü–†–Ø–ú–û–ô –ø–æ–∏—Å–∫ –≤ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –ë–î")
    try:
        search_data = {
            'query': '–ì–ª–µ–± –£—Ö–æ–≤—Å–∫–∏–π Senior Python Developer –º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ –ø–∞—É—ç—Ä–ª–∏—Ñ—Ç–∏–Ω–≥ —à–∞—Ö–º–∞—Ç—ã —è–ø–æ–Ω—Å–∫–∏–π',
            'max_results': 15,
            'levels': ['long_term']
        }
        
        response = requests.post(
            f"http://localhost:8000/api/memory/{user_id}/search",
            json=search_data,
            timeout=20
        )
        
        if response.status_code == 200:
            result = response.json()
            found_count = result.get('total_found', 0)
            print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–æ –≤ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –ë–î: {found_count} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
            
            if found_count > 0:
                results = result.get('results', [])
                important_found = 0
                for i, item in enumerate(results[:10]):
                    content = item.get('content', '')
                    score = item.get('relevance_score', 0)
                    print(f"      {i+1}. {content[:80]}... (score: {score:.3f})")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–∂–Ω—ã–µ —Ñ–∞–∫—Ç—ã
                    if any(keyword in content.lower() for keyword in 
                          ["—É—Ö–æ–≤—Å–∫–∏–π", "senior", "python", "–º–∞—à–∏–Ω–Ω", "–ø–∞—É—ç—Ä–ª–∏—Ñ—Ç–∏–Ω–≥", "—à–∞—Ö–º–∞—Ç", "—è–ø–æ–Ω—Å–∫"]):
                        important_found += 1
                
                print(f"   üìä –í–∞–∂–Ω—ã—Ö —Ñ–∞–∫—Ç–æ–≤ –≤ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –ë–î: {important_found}")
                
                if important_found >= 4:
                    print(f"   ‚úÖ –í–ï–ö–¢–û–†–ù–ê–Ø –ë–î —Å–æ–¥–µ—Ä–∂–∏—Ç –≤–∞–∂–Ω—ã–µ —Ñ–∞–∫—Ç—ã")
                else:
                    print(f"   ‚ùå –í–ï–ö–¢–û–†–ù–ê–Ø –ë–î –ø–æ—Ç–µ—Ä—è–ª–∞ –≤–∞–∂–Ω—ã–µ —Ñ–∞–∫—Ç—ã")
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –≤ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –ë–î: {response.status_code}")
            
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
    
    # –®–∞–≥ 6: –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –¢–ï–°–¢ - –≤–æ–ø—Ä–æ—Å —á–µ—Ä–µ–∑ –ò–ò
    print(f"\nü§ñ –®–∞–≥ 6: –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –¢–ï–°–¢ - –ò–ò –¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¢–û–õ–¨–ö–û –≤–µ–∫—Ç–æ—Ä–Ω—É—é –ë–î")
    print("(–ö—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–∞—è –ø–∞–º—è—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤—ã—Ç–µ—Å–Ω–µ–Ω–∞)")
    
    try:
        chat_data = {
            'user_id': user_id,
            'messages': [{'role': 'user', 'content': '–†–∞—Å—Å–∫–∞–∂–∏ –ø–æ–¥—Ä–æ–±–Ω–æ: –∫–∞–∫ –º–µ–Ω—è –∑–æ–≤—É—Ç, –∫–µ–º —Ä–∞–±–æ—Ç–∞—é, —á–µ–º —É–≤–ª–µ–∫–∞—é—Å—å, –∫–∞–∫–∏–µ —É –º–µ–Ω—è —Ö–æ–±–±–∏?'}],
            'metaTime': "2025-09-03T18:00:00Z"
        }
        
        print("   ‚ùì –í–û–ü–†–û–°: '–†–∞—Å—Å–∫–∞–∂–∏ –ø–æ–¥—Ä–æ–±–Ω–æ: –∫–∞–∫ –º–µ–Ω—è –∑–æ–≤—É—Ç, –∫–µ–º —Ä–∞–±–æ—Ç–∞—é, —á–µ–º —É–≤–ª–µ–∫–∞—é—Å—å, –∫–∞–∫–∏–µ —É –º–µ–Ω—è —Ö–æ–±–±–∏?'")
        
        response = requests.post(
            "http://localhost:8000/api/chat",
            json=chat_data,
            timeout=60
        )
        
        if response.status_code == 200:
            result = response.json()
            parts = result.get('parts', [])
            
            if parts:
                ai_response = ' '.join(parts)
                print(f"\n   ü§ñ –û–¢–í–ï–¢ –ò–ò (–¥–æ–ª–∂–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –í–ï–ö–¢–û–†–ù–£–Æ –ë–î):")
                print(f"   {ai_response}")
                
                # –î–ï–¢–ê–õ–¨–ù–ê–Ø –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –ø–∞–º—è—Ç–∏
                vector_memory_checks = {
                    "–ø–æ–ª–Ω–æ–µ_–∏–º—è": ["—É—Ö–æ–≤—Å–∫–∏–π", "–≥–ª–µ–± —É—Ö–æ–≤—Å–∫–∏–π"],
                    "–¥–æ–ª–∂–Ω–æ—Å—Ç—å": ["senior", "senior python"],
                    "—Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è": ["computer vision", "pytorch", "tensorflow"],
                    "—Å–ø–æ—Ä—Ç": ["–ø–∞—É—ç—Ä–ª–∏—Ñ—Ç–∏–Ω–≥", "4 —Ä–∞–∑–∞ –≤ –Ω–µ–¥–µ–ª—é"],
                    "—Ö–æ–±–±–∏": ["—à–∞—Ö–º–∞—Ç", "1800", "elo"],
                    "—è–∑—ã–∫–∏": ["—è–ø–æ–Ω—Å–∫", "—Ç–æ–∫–∏–æ"],
                    "–∫–Ω–∏–≥–∏": ["—Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–µ—Ä", "ai/ml"]
                }
                
                found_details = []
                for category, keywords in vector_memory_checks.items():
                    if any(keyword.lower() in ai_response.lower() for keyword in keywords):
                        found_details.append(category)
                
                print(f"\n   üìä –ê–ù–ê–õ–ò–ó –í–ï–ö–¢–û–†–ù–û–ô –ü–ê–ú–Ø–¢–ò:")
                print(f"   ‚úÖ –ù–ê–ô–î–ï–ù–ù–´–ï –î–ï–¢–ê–õ–ò: {', '.join(found_details)}")
                print(f"   üìà –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï –í–ï–ö–¢–û–†–ù–û–ô –ë–î: {len(found_details)}/{len(vector_memory_checks)} –∫–∞—Ç–µ–≥–æ—Ä–∏–π")
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫ –ø–∞–º—è—Ç–∏
                if len(found_details) >= 5:
                    print(f"   üéâ –£–°–ü–ï–•! –ò–ò –ò–°–ü–û–õ–¨–ó–£–ï–¢ –í–ï–ö–¢–û–†–ù–£–Æ –ë–ê–ó–£ –î–ê–ù–ù–´–•")
                    print(f"   ‚úÖ –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —á–µ—Ä–µ–∑ –≤–µ–∫—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫")
                    print(f"   ‚úÖ –ö—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–∞—è –ø–∞–º—è—Ç—å –≤—ã—Ç–µ—Å–Ω–µ–Ω–∞, —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–∞—è")
                elif len(found_details) >= 2:
                    print(f"   ‚ö†Ô∏è –ß–ê–°–¢–ò–ß–ù–´–ô –£–°–ü–ï–•: –í–µ–∫—Ç–æ—Ä–Ω–∞—è –ë–î —Ä–∞–±–æ—Ç–∞–µ—Ç —á–∞—Å—Ç–∏—á–Ω–æ")
                    print(f"   üîß –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –¥–µ—Ç–∞–ª–∏ –ø–æ—Ç–µ—Ä—è–Ω—ã –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                else:
                    print(f"   ‚ùå –ü–†–û–í–ê–õ: –ò–ò –ù–ï –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –≤–µ–∫—Ç–æ—Ä–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
                    print(f"   üîß –°–∏—Å—Ç–µ–º–∞ –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–π –ø–∞–º—è—Ç–∏")
                    
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ª–∏ –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω—É—é –ø–∞–º—è—Ç—å
                recent_words = ["–ø—Ä–∏–≤–µ—Ç", "–∫–∞–∫ –¥–µ–ª–∞", "—á—Ç–æ –¥–µ–ª–∞–µ—à—å", "–ø–ª–∞–Ω–∏—Ä—É–µ—à—å"]
                uses_recent = any(word in ai_response.lower() for word in recent_words)
                
                if uses_recent:
                    print(f"   ‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ò–ò —É–ø–æ–º–∏–Ω–∞–µ—Ç –Ω–µ–¥–∞–≤–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è")
                    print(f"   üîß –í–æ–∑–º–æ–∂–Ω–æ, –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–∞—è –ø–∞–º—è—Ç—å –µ—â–µ –∞–∫—Ç–∏–≤–Ω–∞")
                else:
                    print(f"   ‚úÖ –ò–ò –ù–ï —É–ø–æ–º–∏–Ω–∞–µ—Ç –Ω–µ–¥–∞–≤–Ω–∏–µ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è")
                    print(f"   ‚úÖ –§–æ–∫—É—Å —Ç–æ–ª—å–∫–æ –Ω–∞ –≤–∞–∂–Ω—ã—Ö —Ñ–∞–∫—Ç–∞—Ö –∏–∑ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –ë–î")
                    
            else:
                print("   ‚ùå –ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç –ò–ò")
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ API: {response.status_code}")
            print(f"   –û—Ç–≤–µ—Ç: {response.text}")
            
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
    
    print(f"\n" + "=" * 60)
    
    if len(found_details) >= 5:
        print("üéâ –í–ï–ö–¢–û–†–ù–ê–Ø –ë–ê–ó–ê –î–ê–ù–ù–´–• –†–ê–ë–û–¢–ê–ï–¢ –ò–î–ï–ê–õ–¨–ù–û!")
        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—É—é –ø–∞–º—è—Ç—å —á–µ—Ä–µ–∑ –≤–µ–∫—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫")
        print("‚úÖ –ö—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–∞—è –ø–∞–º—è—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤—ã—Ç–µ—Å–Ω–µ–Ω–∞")
        print("‚úÖ –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç—Å—è")
    elif len(found_details) >= 2:
        print("‚ö†Ô∏è –í–ï–ö–¢–û–†–ù–ê–Ø –ë–î –†–ê–ë–û–¢–ê–ï–¢, –ù–û –ù–ï –ò–î–ï–ê–õ–¨–ù–û")
        print("üîß –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –¥–µ—Ç–∞–ª–∏ —Ç–µ—Ä—è—é—Ç—Å—è –∏–ª–∏ –Ω–µ –Ω–∞—Ö–æ–¥—è—Ç—Å—è")
        print("üîß –ù—É–∂–Ω–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø–æ–∏—Å–∫–∞ –∏–ª–∏ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏")
    else:
        print("‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê –° –í–ï–ö–¢–û–†–ù–û–ô –ë–ê–ó–û–ô")
        print("üîß –°–∏—Å—Ç–µ–º–∞ –ù–ï –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—É—é –ø–∞–º—è—Ç—å")
        print("üîß –¢—Ä–µ–±—É–µ—Ç—Å—è —Å–µ—Ä—å–µ–∑–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã")

if __name__ == "__main__":
    test_real_vector_memory()
