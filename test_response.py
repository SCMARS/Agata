#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤ Agatha AI
"""

import json
import requests
from datetime import datetime

def format_agatha_response(response_data):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç Agatha –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ —á—Ç–µ–Ω–∏—è"""
    print("\nüé≠ AGATHA AI RESPONSE")
    print("=" * 60)

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á–∞—Å—Ç–∏ —Å –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏
    parts = response_data.get('parts', [])
    delays = response_data.get('delays_ms', [])

    for i, (part, delay) in enumerate(zip(parts, delays), 1):
        print(f"üìù –ß–ê–°–¢–¨ {i} (–∑–∞–¥–µ—Ä–∂–∫–∞: {delay}–º—Å):")
        print(f"   {part}")
        print()

    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–æ–ø—Ä–æ—Å–µ
    has_question = response_data.get('has_question', False)
    print(f"‚ùì –í–û–ü–†–û–°: {'–î–ê' if has_question else '–ù–ï–¢'}")
    print(f"üìä –í–°–ï–ì–û –ß–ê–°–¢–ï–ô: {len(parts)}")
    print(f"‚è±Ô∏è  –û–ë–©–ê–Ø –ó–ê–î–ï–†–ñ–ö–ê: {sum(delays)}–º—Å")

    return response_data

def test_chat_endpoint():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —á–∞—Ç endpoint –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫—Ä–∞—Å–∏–≤—ã–π –æ—Ç–≤–µ—Ç"""
    url = "http://localhost:8000/api/chat"

    payload = {
        "user_id": "test_user",
        "messages": [{"role": "user", "content": "–ü—Ä–∏–≤–µ—Ç! –†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–µ–±–µ"}],
        "metaTime": datetime.now().isoformat()
    }

    try:
        response = requests.post(url, json=payload)
        response.raise_for_status()

        data = response.json()
        format_agatha_response(data)

    except requests.exceptions.RequestException as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {e}")
    except json.JSONDecodeError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")

if __name__ == "__main__":
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï AGATHA AI")
    print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:8000")
    print("\n–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞...")

    test_chat_endpoint()
