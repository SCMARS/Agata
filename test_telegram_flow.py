#!/usr/bin/env python3

import requests
import time
import json
import os
import sys

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
PROJECT_ROOT = os.path.dirname(os.path.abspath(__file__))
sys.path.insert(0, PROJECT_ROOT)

API_BASE_URL = "http://localhost:8000"

def test_chat_response():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª: —Å–æ–æ–±—â–µ–Ω–∏–µ -> –ø–∞–º—è—Ç—å -> –æ—Ç–≤–µ—Ç –æ—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç–∏"""
    
    print("üß™ –¢–ï–°–¢ –ü–û–õ–ù–û–ì–û –¶–ò–ö–õ–ê TELEGRAM –ë–û–¢–ê")
    print("=" * 50)
    
    user_id = "test_telegram_user"
    
    # –û—á–∏—â–∞–µ–º –ø–∞–º—è—Ç—å –ø–µ—Ä–µ–¥ —Ç–µ—Å—Ç–æ–º
    print("üßπ –û—á–∏—â–∞–µ–º –ø–∞–º—è—Ç—å...")
    try:
        response = requests.post(f"{API_BASE_URL}/api/memory/{user_id}/clear", timeout=10)
        if response.status_code == 200:
            print("‚úÖ –ü–∞–º—è—Ç—å –æ—á–∏—â–µ–Ω–∞")
        else:
            print(f"‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ —Å –æ—á–∏—Å—Ç–∫–æ–π: {response.status_code}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: {e}")
    
    # –¢–µ—Å—Ç 1: –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    print("\nüìù –¢–µ—Å—Ç 1: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ")
    
    test_message = "–ü—Ä–∏–≤–µ—Ç! –ú–µ–Ω—è –∑–æ–≤—É—Ç –ì–ª–µ–± –∏ —è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫."
    
    try:
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –ø–∞–º—è—Ç—å
        memory_data = {
            'role': 'user',
            'content': test_message,
            'metadata': {
                'source': 'telegram_test',
                'user_id': user_id,
                'timestamp': '2025-09-02T14:07:00Z'
            },
            'conversation_id': f'test_{user_id}',
            'day_number': 1
        }
        
        print(f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: {test_message}")
        
        response = requests.post(
            f"{API_BASE_URL}/api/memory/{user_id}/add",
            json=memory_data,
            timeout=10
        )
        
        if response.status_code == 200:
            result = response.json()
            memory_result = result.get('result', {})
            print(f"‚úÖ –ü–∞–º—è—Ç—å: Short-term: {'‚úÖ' if memory_result.get('short_term') else '‚ùå'}, Long-term: {'‚úÖ' if memory_result.get('long_term') else '‚ùå'}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –ø–∞–º—è—Ç—å: {response.status_code}")
            return
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return
    
    # –¢–µ—Å—Ç 2: –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç–∏
    print("\nü§ñ –¢–µ—Å—Ç 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç–∏")
    
    try:
        chat_data = {
            'user_id': user_id,
            'messages': [{'role': 'user', 'content': test_message}],
            'metaTime': "2025-09-02T14:07:00Z"
        }
        
        print("üîÑ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ /api/chat...")
        
        chat_response = requests.post(
            f"{API_BASE_URL}/api/chat",
            json=chat_data,
            timeout=30
        )
        
        if chat_response.status_code == 200:
            chat_result = chat_response.json()
            parts = chat_result.get('parts', [])
            
            if parts:
                ai_response = ' '.join(parts)
                print(f"‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω!")
                print(f"ü§ñ –û—Ç–≤–µ—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç–∏: {ai_response[:200]}...")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç –Ω–µ –ø—É—Å—Ç–æ–π –∏ –æ—Å–º—ã—Å–ª–µ–Ω–Ω—ã–π
                if len(ai_response.strip()) > 10:
                    print("‚úÖ –û—Ç–≤–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç–µ–ª—å–Ω—ã–π")
                else:
                    print("‚ö†Ô∏è –û—Ç–≤–µ—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π")
                    
            else:
                print("‚ùå –ù–µ—Ç —á–∞—Å—Ç–µ–π –≤ –æ—Ç–≤–µ—Ç–µ")
                print(f"üìÑ –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç: {json.dumps(chat_result, indent=2, ensure_ascii=False)}")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ chat API: {chat_response.status_code}")
            print(f"üìÑ –û—Ç–≤–µ—Ç: {chat_response.text}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ chat: {e}")
        return
    
    # –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞–º—è—Ç—å —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π
    print("\nüîÑ –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–º—è—Ç–∏ –ø–æ—Å–ª–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    intermediate_messages = [
        "–°–µ–≥–æ–¥–Ω—è —Ö–æ—Ä–æ—à–∞—è –ø–æ–≥–æ–¥–∞",
        "–Ø –∏–∑—É—á–∞—é Python",
        "–ú–Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ",
        "–†–∞–±–æ—Ç–∞—é –Ω–∞–¥ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–º –ø—Ä–æ–µ–∫—Ç–æ–º",
        "–ò—Å–ø–æ–ª—å–∑—É—é LangChain –∏ –≤–µ–∫—Ç–æ—Ä–Ω—ã–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"
    ]
    
    for i, msg in enumerate(intermediate_messages):
        try:
            memory_data = {
                'role': 'user',
                'content': msg,
                'metadata': {
                    'source': 'telegram_test',
                    'user_id': user_id,
                    'timestamp': '2025-09-02T14:07:00Z'
                },
                'conversation_id': f'test_{user_id}',
                'day_number': 1
            }
            
            response = requests.post(
                f"{API_BASE_URL}/api/memory/{user_id}/add",
                json=memory_data,
                timeout=10
            )
            
            if response.status_code == 200:
                print(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ {i+1}: {msg[:30]}...")
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è {i+1}: {response.status_code}")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è {i+1}: {e}")
    
    # –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–º–Ω–∏—Ç –ª–∏ —Å–∏—Å—Ç–µ–º–∞ –∏–º—è
    print("\nüîç –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–π –ø–∞–º—è—Ç–∏")
    
    try:
        question = "–ö–∞–∫ –º–µ–Ω—è –∑–æ–≤—É—Ç?"
        
        chat_data = {
            'user_id': user_id,
            'messages': [{'role': 'user', 'content': question}],
            'metaTime': "2025-09-02T14:07:00Z"
        }
        
        print(f"‚ùì –í–æ–ø—Ä–æ—Å: {question}")
        
        chat_response = requests.post(
            f"{API_BASE_URL}/api/chat",
            json=chat_data,
            timeout=30
        )
        
        if chat_response.status_code == 200:
            chat_result = chat_response.json()
            parts = chat_result.get('parts', [])
            
            if parts:
                ai_response = ' '.join(parts)
                print(f"ü§ñ –û—Ç–≤–µ—Ç: {ai_response}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–ø–æ–º–∏–Ω–∞–µ—Ç—Å—è –ª–∏ –∏–º—è "–ì–ª–µ–±"
                if "–ì–ª–µ–±" in ai_response or "–≥–ª–µ–±" in ai_response.lower():
                    print("‚úÖ –£–°–ü–ï–•: –°–∏—Å—Ç–µ–º–∞ –ø–æ–º–Ω–∏—Ç –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!")
                else:
                    print("‚ùå –ü–†–û–ë–õ–ï–ú–ê: –°–∏—Å—Ç–µ–º–∞ –Ω–µ –ø–æ–º–Ω–∏—Ç –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                    
                    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ - –ø–æ–∏—Å–∫ –≤ –ø–∞–º—è—Ç–∏
                    print("\nüîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞: –ü–æ–∏—Å–∫ –≤ –ø–∞–º—è—Ç–∏...")
                    search_data = {
                        'query': '–ì–ª–µ–± –∏–º—è –∑–æ–≤—É—Ç',
                        'max_results': 5,
                        'levels': ['short_term', 'long_term']
                    }
                    
                    search_response = requests.post(
                        f"{API_BASE_URL}/api/memory/{user_id}/search",
                        json=search_data,
                        timeout=10
                    )
                    
                    if search_response.status_code == 200:
                        search_result = search_response.json()
                        found_count = search_result.get('total_found', 0)
                        print(f"üîç –ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ –ø–∞–º—è—Ç–∏: {found_count}")
                        
                        if found_count > 0:
                            results = search_result.get('results', [])
                            for i, item in enumerate(results[:3]):
                                content = item.get('content', '')
                                print(f"   {i+1}. {content[:100]}...")
                    else:
                        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {search_response.status_code}")
            else:
                print("‚ùå –ù–µ—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç–∏")
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞: {chat_response.status_code}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞: {e}")
    
    print("\n" + "=" * 50)
    print("üèÅ –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù")

if __name__ == "__main__":
    test_chat_response()
