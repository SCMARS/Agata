#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –Ω–æ–≤–æ–π –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –ø–∞–º—è—Ç–∏ —Å pgvector
"""
import asyncio
import requests
import json
from datetime import datetime

def test_vector_memory():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–æ–≤—É—é –≤–µ–∫—Ç–æ—Ä–Ω—É—é –ø–∞–º—è—Ç—å"""
    print('üß† –¢–ï–°–¢ –í–ï–ö–¢–û–†–ù–û–ô –ü–ê–ú–Ø–¢–ò (pgvector)')
    print('=' * 60)
    
    base_url = 'http://localhost:8000'
    
    # –¢–µ—Å—Ç 1: –ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –∑–Ω–∞–∫–æ–º—Å—Ç–≤–æ
    print('\nüß™ –¢–µ—Å—Ç 1: –ó–Ω–∞–∫–æ–º—Å—Ç–≤–æ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º')
    response1 = requests.post(f'{base_url}/api/chat', json={
        'user_id': 'vector_memory_test',
        'messages': [
            {'role': 'user', 'content': '–ü—Ä–∏–≤–µ—Ç! –ú–µ–Ω—è –∑–æ–≤—É—Ç –í–∏–∫—Ç–æ—Ä, –º–Ω–µ 35 –ª–µ—Ç. –Ø —Ä–∞–±–æ—Ç–∞—é –∏–Ω–∂–µ–Ω–µ—Ä–æ–º –≤ IT –∫–æ–º–ø–∞–Ω–∏–∏ –≤ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥–µ. –õ—é–±–ª—é –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞—Ç—å, —á–∏—Ç–∞—Ç—å –Ω–∞—É—á–Ω—É—é —Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫—É –∏ –∏–≥—Ä–∞—Ç—å –≤ —à–∞—Ö–º–∞—Ç—ã.'}
        ],
        'metaTime': '2024-01-15T18:00:00Z'
    })
    
    if response1.status_code == 200:
        data1 = response1.json()
        print(f'‚úÖ –ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ')
        print(f'üìù –û—Ç–≤–µ—Ç: {data1["parts"][0][:150]}...')
        print(f'üìä –ß–∞—Å—Ç–µ–π: {len(data1["parts"])}')
        first_response = data1['parts']
    else:
        print(f'‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {response1.status_code}')
        return
    
    # –¢–µ—Å—Ç 2: –í—Ç–æ—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–º—è—Ç–∏
    print('\nüß™ –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–º—è—Ç–∏ - –ø–æ–º–Ω–∏—Ç –ª–∏ –∏–º—è –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏—é')
    response2 = requests.post(f'{base_url}/api/chat', json={
        'user_id': 'vector_memory_test',
        'messages': [
            {'role': 'user', 'content': '–ü—Ä–∏–≤–µ—Ç! –ú–µ–Ω—è –∑–æ–≤—É—Ç –í–∏–∫—Ç–æ—Ä, –º–Ω–µ 35 –ª–µ—Ç. –Ø —Ä–∞–±–æ—Ç–∞—é –∏–Ω–∂–µ–Ω–µ—Ä–æ–º –≤ IT –∫–æ–º–ø–∞–Ω–∏–∏ –≤ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥–µ. –õ—é–±–ª—é –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞—Ç—å, —á–∏—Ç–∞—Ç—å –Ω–∞—É—á–Ω—É—é —Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫—É –∏ –∏–≥—Ä–∞—Ç—å –≤ —à–∞—Ö–º–∞—Ç—ã.'},
            {'role': 'assistant', 'content': ' '.join(first_response)},
            {'role': 'user', 'content': '–ü–æ–º–Ω–∏—à—å –ª–∏ —Ç—ã –º–æ–µ –∏–º—è –∏ –≥–¥–µ —è —Ä–∞–±–æ—Ç–∞—é?'}
        ],
        'metaTime': '2024-01-15T18:05:00Z'
    })
    
    if response2.status_code == 200:
        data2 = response2.json()
        print(f'‚úÖ –í—Ç–æ—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ')
        print(f'üìù –û—Ç–≤–µ—Ç: {data2["parts"][0][:200]}...')
        print(f'üîç –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ª–∏ –ø–∞–º—è—Ç—å: {"–î–∞" if ("–í–∏–∫—Ç–æ—Ä" in data2["parts"][0] or "–≤–∏–∫—Ç–æ—Ä" in data2["parts"][0].lower()) and ("–∏–Ω–∂–µ–Ω–µ—Ä" in data2["parts"][0].lower() or "IT" in data2["parts"][0]) else "–ù–µ—Ç"}')
        second_response = data2['parts']
    else:
        print(f'‚ùå –û—à–∏–±–∫–∞ –≤—Ç–æ—Ä–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {response2.status_code}')
        return
    
    # –¢–µ—Å—Ç 3: –¢—Ä–µ—Ç—å–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –ø—Ä–æ–≤–µ—Ä–∫–∞ —É–≤–ª–µ—á–µ–Ω–∏–π
    print('\nüß™ –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–º—è—Ç–∏ —É–≤–ª–µ—á–µ–Ω–∏–π')
    response3 = requests.post(f'{base_url}/api/chat', json={
        'user_id': 'vector_memory_test',
        'messages': [
            {'role': 'user', 'content': '–ü—Ä–∏–≤–µ—Ç! –ú–µ–Ω—è –∑–æ–≤—É—Ç –í–∏–∫—Ç–æ—Ä, –º–Ω–µ 35 –ª–µ—Ç. –Ø —Ä–∞–±–æ—Ç–∞—é –∏–Ω–∂–µ–Ω–µ—Ä–æ–º –≤ IT –∫–æ–º–ø–∞–Ω–∏–∏ –≤ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥–µ. –õ—é–±–ª—é –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞—Ç—å, —á–∏—Ç–∞—Ç—å –Ω–∞—É—á–Ω—É—é —Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫—É –∏ –∏–≥—Ä–∞—Ç—å –≤ —à–∞—Ö–º–∞—Ç—ã.'},
            {'role': 'assistant', 'content': ' '.join(first_response)},
            {'role': 'user', 'content': '–ü–æ–º–Ω–∏—à—å –ª–∏ —Ç—ã –º–æ–µ –∏–º—è –∏ –≥–¥–µ —è —Ä–∞–±–æ—Ç–∞—é?'},
            {'role': 'assistant', 'content': ' '.join(second_response)},
            {'role': 'user', 'content': '–ö–∞–∫–∏–µ —É –º–µ–Ω—è —É–≤–ª–µ—á–µ–Ω–∏—è? –ü–æ–º–Ω–∏—à—å –ª–∏ —Ç—ã —á—Ç–æ —è –ª—é–±–ª—é –¥–µ–ª–∞—Ç—å?'}
        ],
        'metaTime': '2024-01-15T18:10:00Z'
    })
    
    if response3.status_code == 200:
        data3 = response3.json()
        print(f'‚úÖ –¢—Ä–µ—Ç—å–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ')
        print(f'üìù –û—Ç–≤–µ—Ç: {data3["parts"][0][:200]}...')
        print(f'üîç –ü–æ–º–Ω–∏—Ç —É–≤–ª–µ—á–µ–Ω–∏—è: {"–î–∞" if any(word in data3["parts"][0].lower() for word in ["–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞—Ç—å", "—á–∏—Ç–∞—Ç—å", "—à–∞—Ö–º–∞—Ç—ã", "—Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫"]) else "–ù–µ—Ç"}')
        third_response = data3['parts']
    else:
        print(f'‚ùå –û—à–∏–±–∫–∞ —Ç—Ä–µ—Ç—å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {response3.status_code}')
        return
    
    # –¢–µ—Å—Ç 4: –ß–µ—Ç–≤–µ—Ä—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ—Ç–∞–ª–µ–π
    print('\nüß™ –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ—Ç–∞–ª–µ–π - –≤–æ–∑—Ä–∞—Å—Ç –∏ –≥–æ—Ä–æ–¥')
    response4 = requests.post(f'{base_url}/api/chat', json={
        'user_id': 'vector_memory_test',
        'messages': [
            {'role': 'user', 'content': '–ü—Ä–∏–≤–µ—Ç! –ú–µ–Ω—è –∑–æ–≤—É—Ç –í–∏–∫—Ç–æ—Ä, –º–Ω–µ 35 –ª–µ—Ç. –Ø —Ä–∞–±–æ—Ç–∞—é –∏–Ω–∂–µ–Ω–µ—Ä–æ–º –≤ IT –∫–æ–º–ø–∞–Ω–∏–∏ –≤ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥–µ. –õ—é–±–ª—é –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞—Ç—å, —á–∏—Ç–∞—Ç—å –Ω–∞—É—á–Ω—É—é —Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫—É –∏ –∏–≥—Ä–∞—Ç—å –≤ —à–∞—Ö–º–∞—Ç—ã.'},
            {'role': 'assistant', 'content': ' '.join(first_response)},
            {'role': 'user', 'content': '–ü–æ–º–Ω–∏—à—å –ª–∏ —Ç—ã –º–æ–µ –∏–º—è –∏ –≥–¥–µ —è —Ä–∞–±–æ—Ç–∞—é?'},
            {'role': 'assistant', 'content': ' '.join(second_response)},
            {'role': 'user', 'content': '–ö–∞–∫–∏–µ —É –º–µ–Ω—è —É–≤–ª–µ—á–µ–Ω–∏—è? –ü–æ–º–Ω–∏—à—å –ª–∏ —Ç—ã —á—Ç–æ —è –ª—é–±–ª—é –¥–µ–ª–∞—Ç—å?'},
            {'role': 'assistant', 'content': ' '.join(third_response)},
            {'role': 'user', 'content': '–°–∫–æ–ª—å–∫–æ –º–Ω–µ –ª–µ—Ç –∏ –≤ –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ —è –∂–∏–≤—É?'}
        ],
        'metaTime': '2024-01-15T18:15:00Z'
    })
    
    if response4.status_code == 200:
        data4 = response4.json()
        print(f'‚úÖ –ß–µ—Ç–≤–µ—Ä—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ')
        print(f'üìù –û—Ç–≤–µ—Ç: {data4["parts"][0][:200]}...')
        print(f'üîç –ü–æ–º–Ω–∏—Ç –≤–æ–∑—Ä–∞—Å—Ç –∏ –≥–æ—Ä–æ–¥: {"–î–∞" if ("35" in data4["parts"][0] or "—Ç—Ä–∏–¥—Ü–∞—Ç—å –ø—è—Ç—å" in data4["parts"][0].lower()) and ("–ø–µ—Ç–µ—Ä–±—É—Ä–≥" in data4["parts"][0].lower() or "—Å–ø–±" in data4["parts"][0].lower()) else "–ù–µ—Ç"}')
    else:
        print(f'‚ùå –û—à–∏–±–∫–∞ —á–µ—Ç–≤–µ—Ä—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {response4.status_code}')
    
    # –¢–µ—Å—Ç 5: –ü—è—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    print('\nüß™ –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—â–µ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞')
    response5 = requests.post(f'{base_url}/api/chat', json={
        'user_id': 'vector_memory_test',
        'messages': [
            {'role': 'user', 'content': '–ü—Ä–∏–≤–µ—Ç! –ú–µ–Ω—è –∑–æ–≤—É—Ç –í–∏–∫—Ç–æ—Ä, –º–Ω–µ 35 –ª–µ—Ç. –Ø —Ä–∞–±–æ—Ç–∞—é –∏–Ω–∂–µ–Ω–µ—Ä–æ–º –≤ IT –∫–æ–º–ø–∞–Ω–∏–∏ –≤ –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥–µ. –õ—é–±–ª—é –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞—Ç—å, —á–∏—Ç–∞—Ç—å –Ω–∞—É—á–Ω—É—é —Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫—É –∏ –∏–≥—Ä–∞—Ç—å –≤ —à–∞—Ö–º–∞—Ç—ã.'},
            {'role': 'assistant', 'content': ' '.join(first_response)},
            {'role': 'user', 'content': '–ü–æ–º–Ω–∏—à—å –ª–∏ —Ç—ã –º–æ–µ –∏–º—è –∏ –≥–¥–µ —è —Ä–∞–±–æ—Ç–∞—é?'},
            {'role': 'assistant', 'content': ' '.join(second_response)},
            {'role': 'user', 'content': '–ö–∞–∫–∏–µ —É –º–µ–Ω—è —É–≤–ª–µ—á–µ–Ω–∏—è? –ü–æ–º–Ω–∏—à—å –ª–∏ —Ç—ã —á—Ç–æ —è –ª—é–±–ª—é –¥–µ–ª–∞—Ç—å?'},
            {'role': 'assistant', 'content': ' '.join(third_response)},
            {'role': 'user', 'content': '–°–∫–æ–ª—å–∫–æ –º–Ω–µ –ª–µ—Ç –∏ –≤ –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ —è –∂–∏–≤—É?'},
            {'role': 'assistant', 'content': ' '.join(data4["parts"])},
            {'role': 'user', 'content': '–†–∞—Å—Å–∫–∞–∂–∏ –º–Ω–µ –æ —Å–µ–±–µ - —á—Ç–æ —Ç—ã –∑–Ω–∞–µ—à—å –æ–±–æ –º–Ω–µ?'}
        ],
        'metaTime': '2024-01-15T18:20:00Z'
    })
    
    if response5.status_code == 200:
        data5 = response5.json()
        print(f'‚úÖ –ü—è—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ')
        print(f'üìù –û—Ç–≤–µ—Ç: {data5["parts"][0][:300]}...')
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞—á–µ—Å—Ç–≤–æ –ø–∞–º—è—Ç–∏
        response_text = data5["parts"][0].lower()
        memory_score = 0
        
        if "–≤–∏–∫—Ç–æ—Ä" in response_text: memory_score += 1
        if "35" in response_text or "—Ç—Ä–∏–¥—Ü–∞—Ç—å –ø—è—Ç—å" in response_text: memory_score += 1
        if "–∏–Ω–∂–µ–Ω–µ—Ä" in response_text: memory_score += 1
        if "–ø–µ—Ç–µ—Ä–±—É—Ä–≥" in response_text or "—Å–ø–±" in response_text: memory_score += 1
        if any(word in response_text for word in ["–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞—Ç—å", "—á–∏—Ç–∞—Ç—å", "—à–∞—Ö–º–∞—Ç—ã", "—Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫"]): memory_score += 1
        
        print(f'üìä –ö–∞—á–µ—Å—Ç–≤–æ –ø–∞–º—è—Ç–∏: {memory_score}/5 ({memory_score*20}%)')
    else:
        print(f'‚ùå –û—à–∏–±–∫–∞ –ø—è—Ç–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {response5.status_code}')
    
    print('\nüéâ –¢–ï–°–¢ –í–ï–ö–¢–û–†–ù–û–ô –ü–ê–ú–Ø–¢–ò –ó–ê–í–ï–†–®–ï–ù!')
    print('=' * 60)

if __name__ == "__main__":
    test_vector_memory() 