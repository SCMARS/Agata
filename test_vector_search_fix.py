#!/usr/bin/env python3

import requests
import time
import json

def test_vector_search_fix():
    """–¢–µ—Å—Ç–∏—Ä—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞"""
    
    print("üîç –¢–ï–°–¢ –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô –í–ï–ö–¢–û–†–ù–û–ì–û –ü–û–ò–°–ö–ê")
    print("=" * 50)
    
    user_id = "1132821710"
    
    # –®–∞–≥ 1: –û—á–∏—â–∞–µ–º –ø–∞–º—è—Ç—å
    print("üßπ –®–∞–≥ 1: –û—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏")
    try:
        response = requests.post(f"http://localhost:8000/api/memory/{user_id}/clear", timeout=10)
        print(f"   –û—á–∏—Å—Ç–∫–∞: {response.status_code}")
    except Exception as e:
        print(f"   –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: {e}")
    
    # –®–∞–≥ 2: –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è—Ö
    print("\nüìù –®–∞–≥ 2: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è—Ö")
    
    preferences = [
        "–Ø –ª—é–±–ª—é –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ Python",
        "–ú–Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è –º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ",
        "–Ø —É–≤–ª–µ–∫–∞—é—Å—å —Å–ø–æ—Ä—Ç–æ–º –∏ —Ö–æ–∂—É –≤ —Å–ø–æ—Ä—Ç–∑–∞–ª",
        "–õ—é–±–ª—é —á–∏—Ç–∞—Ç—å –∫–Ω–∏–≥–∏ –ø–æ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è–º",
        "–ú–Ω–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –ò–ò"
    ]
    
    for i, pref in enumerate(preferences):
        try:
            memory_data = {
                'role': 'user',
                'content': pref,
                'metadata': {
                    'source': 'vector_test',
                    'user_id': user_id,
                    'timestamp': '2025-09-02T14:07:00Z',
                    'preference': True
                },
                'conversation_id': f'vector_test_{user_id}',
                'day_number': 1
            }
            
            response = requests.post(
                f"http://localhost:8000/api/memory/{user_id}/add",
                json=memory_data,
                timeout=10
            )
            
            if response.status_code == 200:
                print(f"   ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: {pref}")
            else:
                print(f"   ‚ùå –û—à–∏–±–∫–∞: {response.status_code}")
                
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
    
    # –®–∞–≥ 3: –ñ–¥–µ–º –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏
    print("\n‚è≥ –®–∞–≥ 3: –ñ–¥–µ–º –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏ (3 —Å–µ–∫—É–Ω–¥—ã)")
    time.sleep(3)
    
    # –®–∞–≥ 4: –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–∏—Å–∫ –≤ –ø–∞–º—è—Ç–∏ –Ω–∞–ø—Ä—è–º—É—é
    print("\nüîç –®–∞–≥ 4: –ü—Ä—è–º–æ–π –ø–æ–∏—Å–∫ –≤ –ø–∞–º—è—Ç–∏")
    try:
        search_data = {
            'query': '—á—Ç–æ —è –ª—é–±–ª—é –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–æ—Ä—Ç',
            'max_results': 5,
            'levels': ['short_term', 'long_term']
        }
        
        response = requests.post(
            f"http://localhost:8000/api/memory/{user_id}/search",
            json=search_data,
            timeout=15
        )
        
        if response.status_code == 200:
            result = response.json()
            found_count = result.get('total_found', 0)
            print(f"   ‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {found_count}")
            
            if found_count > 0:
                results = result.get('results', [])
                for i, item in enumerate(results[:3]):
                    content = item.get('content', '')
                    level = item.get('source_level', 'unknown')
                    score = item.get('relevance_score', 0)
                    print(f"      {i+1}. [{level}] {content} (score: {score:.2f})")
            else:
                print("   ‚ö†Ô∏è –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {response.status_code}")
            print(f"   –û—Ç–≤–µ—Ç: {response.text}")
            
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
    
    # –®–∞–≥ 5: –¢–µ—Å—Ç–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ chat API
    print("\nü§ñ –®–∞–≥ 5: –¢–µ—Å—Ç —á–µ—Ä–µ–∑ chat API")
    try:
        chat_data = {
            'user_id': user_id,
            'messages': [{'role': 'user', 'content': '–ß—Ç–æ —è –ª—é–±–ª—é –¥–µ–ª–∞—Ç—å?'}],
            'metaTime': "2025-09-02T14:07:00Z"
        }
        
        print("   –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å: '–ß—Ç–æ —è –ª—é–±–ª—é –¥–µ–ª–∞—Ç—å?'")
        
        response = requests.post(
            "http://localhost:8000/api/chat",
            json=chat_data,
            timeout=30
        )
        
        if response.status_code == 200:
            result = response.json()
            parts = result.get('parts', [])
            
            if parts:
                ai_response = ' '.join(parts)
                print(f"   ü§ñ –û—Ç–≤–µ—Ç: {ai_response[:200]}...")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–ø–æ–º–∏–Ω–∞—é—Ç—Å—è –ª–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è
                found_prefs = []
                for pref in ["–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä", "–º–∞—à–∏–Ω–Ω", "—Å–ø–æ—Ä—Ç", "–∫–Ω–∏–≥", "–ò–ò", "Python"]:
                    if pref.lower() in ai_response.lower():
                        found_prefs.append(pref)
                
                if found_prefs:
                    print(f"   ‚úÖ –£–°–ü–ï–•! –ù–∞–π–¥–µ–Ω—ã –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è: {', '.join(found_prefs)}")
                else:
                    print("   ‚ùå –ü–†–û–ë–õ–ï–ú–ê: –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –æ—Ç–≤–µ—Ç–µ")
                    
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ª–∏ —Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
                if ai_response.startswith("–î–æ–±—Ä—ã–π –¥–µ–Ω—å"):
                    print("   ‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –û—Ç–≤–µ—Ç –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è (–≤–æ–∑–º–æ–∂–Ω–æ, –∫–æ–Ω—Ç–µ–∫—Å—Ç –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)")
                else:
                    print("   ‚úÖ –û—Ç–≤–µ—Ç –Ω–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è")
            else:
                print("   ‚ùå –ù–µ—Ç —á–∞—Å—Ç–µ–π –≤ –æ—Ç–≤–µ—Ç–µ")
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ chat API: {response.status_code}")
            print(f"   –û—Ç–≤–µ—Ç: {response.text}")
            
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
    
    # –®–∞–≥ 6: –¢–µ—Å—Ç —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –µ—â–µ —Å–æ–æ–±—â–µ–Ω–∏–π
    print("\nüìù –®–∞–≥ 6: –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è")
    
    filler_messages = [
        "–ö–∞–∫ –¥–µ–ª–∞?",
        "–ß—Ç–æ –Ω–æ–≤–æ–≥–æ?", 
        "–•–æ—Ä–æ—à–∞—è –ø–æ–≥–æ–¥–∞ —Å–µ–≥–æ–¥–Ω—è",
        "–ü–ª–∞–Ω—ã –Ω–∞ –≤—ã—Ö–æ–¥–Ω—ã–µ?",
        "–ö–∞–∫ —Ä–∞–±–æ—Ç–∞?"
    ]
    
    for msg in filler_messages:
        try:
            memory_data = {
                'role': 'user',
                'content': msg,
                'metadata': {
                    'source': 'vector_test_filler',
                    'user_id': user_id,
                    'timestamp': '2025-09-02T14:07:00Z'
                },
                'conversation_id': f'vector_test_{user_id}',
                'day_number': 1
            }
            
            response = requests.post(
                f"http://localhost:8000/api/memory/{user_id}/add",
                json=memory_data,
                timeout=10
            )
            
            if response.status_code == 200:
                print(f"   ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: {msg}")
            else:
                print(f"   ‚ùå –û—à–∏–±–∫–∞: {response.status_code}")
                
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
    
    # –®–∞–≥ 7: –ü–æ–≤—Ç–æ—Ä–Ω—ã–π —Ç–µ—Å—Ç –ø–æ—Å–ª–µ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    print("\nüîç –®–∞–≥ 7: –ü–æ–≤—Ç–æ—Ä–Ω—ã–π —Ç–µ—Å—Ç –ø–æ–∏—Å–∫–∞")
    try:
        chat_data = {
            'user_id': user_id,
            'messages': [{'role': 'user', 'content': '–ù–∞–ø–æ–º–Ω–∏, —á—Ç–æ —è –ª—é–±–ª—é –¥–µ–ª–∞—Ç—å?'}],
            'metaTime': "2025-09-02T14:07:00Z"
        }
        
        response = requests.post(
            "http://localhost:8000/api/chat",
            json=chat_data,
            timeout=30
        )
        
        if response.status_code == 200:
            result = response.json()
            parts = result.get('parts', [])
            
            if parts:
                ai_response = ' '.join(parts)
                print(f"   ü§ñ –û—Ç–≤–µ—Ç: {ai_response[:200]}...")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–ø–æ–º–∏–Ω–∞—é—Ç—Å—è –ª–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è
                found_prefs = []
                for pref in ["–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä", "–º–∞—à–∏–Ω–Ω", "—Å–ø–æ—Ä—Ç", "–∫–Ω–∏–≥", "–ò–ò", "Python"]:
                    if pref.lower() in ai_response.lower():
                        found_prefs.append(pref)
                
                if found_prefs:
                    print(f"   ‚úÖ –û–¢–õ–ò–ß–ù–û! –î–æ–ª–≥–æ—Å—Ä–æ—á–Ω–∞—è –ø–∞–º—è—Ç—å —Ä–∞–±–æ—Ç–∞–µ—Ç: {', '.join(found_prefs)}")
                else:
                    print("   ‚ùå –ü–†–û–ë–õ–ï–ú–ê: –î–æ–ª–≥–æ—Å—Ä–æ—á–Ω–∞—è –ø–∞–º—è—Ç—å –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            else:
                print("   ‚ùå –ù–µ—Ç –æ—Ç–≤–µ—Ç–∞")
        else:
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {response.status_code}")
            
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
    
    print("\n" + "=" * 50)
    print("üéØ –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù")

if __name__ == "__main__":
    test_vector_search_fix()
